{"version":3,"sources":["sourcemaps/_gen.scss","sourcemaps/docs.css","../scss/_mixins.scss","../scss/_funcs.scss","sourcemaps/_prism.scss"],"names":[],"mappings":"AAAA,MACI,qBCCJ,CCkHQ,qEACI,eD/GZ,CDYA,WAbI,0BGuT4D,CHtT5D,yBGsT4D,CHvS5D,YAAY,CACZ,qBAAqB,CACrB,aAAa,CACb,gBAAgB,CAChB,eAA8B,CAA9B,8BAA8B,CAC9B,UCTJ,CCeI,yBFdJ,WATQ,kCGmT0C,CHlT1C,iCCaN,CACF,CDKA,MACI,oBAAoB,CACpB,SAAS,CACT,UAAU,CACV,0BAA0B,CAC1B,4BAA4B,CAC5B,cCFJ,CDKA,aACI,cAAc,CACd,KAAK,CACL,MAAM,CACN,eAAe,CACf,sEGiR8C,CHhR9C,WAAW,CACX,WAAW,CACX,wCCFJ,CCZI,yBFMJ,iBAYY,sCAAkD,CAAlD,qDCDV,CACF,CDZA,mBAgBY,wBAAwB,CACxB,gCCAZ,CDjBA,wBAsBQ,oCGgQ0C,CH/P1C,qCAAqC,CACrC,sCCDR,CDvBA,gBA4BQ,aAAa,CACb,oBCDR,CDKA,KACI,MAAM,CACN,+BGmP8C,CHlP9C,kCCFJ,CDDA,QAMQ,sCCDR,CDLA,gBAWY,iCAAiC,CACjC,sCAAsC,CACtC,qCAAqC,CACrC,wBAAwB,CACxB,0BGsOoD,CHrOpD,sCGqOsC,CHpOtC,oDCFZ,CDOA,WACI,kCCJJ,CDGA,cAIQ,wBAAwB,CACxB,qCAAqC,CACrC,kCAAkC,CAClC,sCCHR,CDJA,oBAUY,WCFZ,CDRA,iBAeQ,kBCHR,CDZA,wCEgSI,eAAe,CACf,sBAAsB,CACtB,kBD/QJ,CDnBA,sBAuBY,SAAS,CACT,4BCAZ,CDxBA,mBA6BQ,gCAAgC,CAChC,qCCDR,CDKA,aACI,YAAY,CACZ,kBAAkB,CAClB,aAAa,CACb,8CCFJ,CDKA,WACI,wBAAwB,CACxB,kCCFJ,CDKA,UACI,UAAU,CACV,WAAW,CACX,4CAA4C,CAC5C,iBAAiB,CACjB,+BCFJ,CDKA,OACI,eAAe,CACf,0FCFJ,CDKA,MACI,iBAAiB,CACjB,KAAK,CACL,MAAM,CACN,UAAU,CACV,WCFJ,CDHA,aAQQ,iBAAiB,CACjB,OAAO,CACP,QAAQ,CACR,gBAAgB,CAChB,iBAAiB,CACjB,8BCDR,CDZA,SAiBQ,cCDR,CDhBA,QAqBQ,wBAAwB,CACxB,gBCDR,CG7KA,sBACI,2BAA2B,CAC3B,qCHgLJ,CG7KA,yDAII,aHgLJ,CG7KA,mBACI,2BHgLJ,CG7KA,WACI,UHgLJ,CG7KA,qGAOI,UHgLJ,CG7KA,0FAMI,UHgLJ,CG7KA,0FAKI,6BAAiC,CACjC,aHgLJ,CG7KA,+CAGI,UHgLJ,CG7KA,kCAEI,aHgLJ,CG7KA,8CAGI,UHgLJ,CG7KA,6BAEI,eHgLJ,CG7KA,cACI,iBHgLJ,CG7KA,cACI,WHgLJ","file":"../docs.min.css","sourcesContent":[":root {\r\n    --content-width:800px;\r\n}\r\n\r\n@mixin container-padding-horizontal {\r\n    padding-right:space();\r\n    padding-left:space();\r\n\r\n    @include min($breakpoint-s) {\r\n        padding-right:space(2);\r\n        padding-left:space(2);\r\n    }\r\n}\r\n\r\nhtml body #container#container#container {\r\n    @include controlled();\r\n}\r\n\r\n#container {\r\n    @include container-padding-horizontal();\r\n\r\n    display:flex;\r\n    flex-direction:column;\r\n    margin:0 auto;\r\n    min-height:100vh;\r\n    max-width:var(--content-width);\r\n    width:100%;\r\n}\r\n\r\n.icon {\r\n    display:inline-block;\r\n    width:1em;\r\n    height:1em;\r\n    fill:var(--color-contrast);\r\n    stroke:var(--color-contrast);\r\n    stroke-width:0;\r\n}\r\n\r\n.site-header {\r\n    position:fixed;\r\n    top:0;\r\n    left:0;\r\n    overflow-y:auto;\r\n    padding:space(3.375) space() space(4.375);\r\n    width:200px;\r\n    height:100%;\r\n    background-color:var(--color-background);\r\n\r\n    nav {\r\n        @include min($breakpoint-s) {\r\n            max-width:calc(var(--content-width) - #{alley(2)});\r\n        }\r\n\r\n        > * {\r\n            text-transform:uppercase;\r\n            font-size:var(--font-size-small);\r\n        }\r\n    }\r\n\r\n    .site-name {\r\n        margin-bottom:space(1.5);\r\n        font-weight:var(--font-weight-normal);\r\n        line-height:var(--line-height-general);\r\n    }\r\n\r\n    ul {\r\n        margin-left:0;\r\n        list-style-type:none;\r\n    }\r\n}\r\n\r\nmain {\r\n    flex:1;\r\n    margin-top:space(3);\r\n    margin-bottom:space(4);\r\n\r\n    > h1 {\r\n        margin-bottom:space(2.125);\r\n    }\r\n\r\n    > section {\r\n        > h2 {\r\n            font-size:var(--font-size-xsmall);\r\n            line-height:var(--line-height-general);\r\n            font-weight:var(--font-weight-normal);\r\n            text-transform:uppercase;\r\n            margin-bottom:space();\r\n            padding-bottom:space(0.25);\r\n            border-bottom:5px solid var(--color-contrast-lowest);\r\n        }\r\n    }\r\n}\r\n\r\n.doc-block {\r\n    margin-bottom:space(2);\r\n\r\n    h3 {\r\n        text-transform:uppercase;\r\n        font-weight:var(--font-weight-normal);\r\n        font-size:var(--font-size-general);\r\n        line-height:var(--line-height-general);\r\n\r\n        .icon {\r\n            float:right;\r\n        }\r\n    }\r\n\r\n    table {\r\n        table-layout:fixed;\r\n\r\n        th,\r\n        td {\r\n            @include ellipsis();\r\n        }\r\n\r\n        code {\r\n            padding:0;\r\n            background-color:transparent;\r\n        }\r\n    }\r\n\r\n    .anchor {\r\n        padding-top:var(--space-5xlarge);\r\n        font-weight:var(--font-weight-normal);\r\n    }\r\n}\r\n\r\n.site-footer {\r\n    display:flex;\r\n    align-items:center;\r\n    height:4.2rem;\r\n    border-top:1px solid var(--color-contrast-low);\r\n}\r\n\r\n.copyright {\r\n    text-transform:uppercase;\r\n    font-size:var(--font-size-xxsmall);\r\n}\r\n\r\n.colorbox {\r\n    width:42px;\r\n    height:42px;\r\n    border:1px solid var(--color-contrast-lower);\r\n    border-radius:50%;\r\n    box-shadow:0 0 0 4px #ffffff inset;\r\n}\r\n\r\n.decoy {\r\n    min-height:4rem;\r\n    background:linear-gradient(90deg, var(--color-contrast-lower) 0%, var(--color-contrast-lowest) 100%);\r\n}\r\n\r\n._404 {\r\n    position:absolute;\r\n    top:0;\r\n    left:0;\r\n    width:100%;\r\n    height:100%;\r\n\r\n    .inner {\r\n        position:absolute;\r\n        top:50%;\r\n        left:50%;\r\n        margin-top:-2rem;\r\n        text-align:center;\r\n        transform:translate(-50%, -50%);\r\n    }\r\n\r\n    h1 {\r\n        font-size:8rem;\r\n    }\r\n\r\n    p {\r\n        text-transform:uppercase;\r\n        font-size:$font-size-small;\r\n    }\r\n}\r\n",":root {\n  --content-width:800px;\n}\n\nhtml body #container#container#container *:last-child:not(.f-margins) {\n  margin-bottom: 0;\n}\n\n#container {\n  padding-right: var(--space);\n  padding-left: var(--space);\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n  min-height: 100vh;\n  max-width: var(--content-width);\n  width: 100%;\n}\n\n@media (min-width: 480px) {\n  #container {\n    padding-right: calc(var(--space) * 2);\n    padding-left: calc(var(--space) * 2);\n  }\n}\n\n.icon {\n  display: inline-block;\n  width: 1em;\n  height: 1em;\n  fill: var(--color-contrast);\n  stroke: var(--color-contrast);\n  stroke-width: 0;\n}\n\n.site-header {\n  position: fixed;\n  top: 0;\n  left: 0;\n  overflow-y: auto;\n  padding: calc(var(--space) * 3.375) var(--space) calc(var(--space) * 4.375);\n  width: 200px;\n  height: 100%;\n  background-color: var(--color-background);\n}\n\n@media (min-width: 480px) {\n  .site-header nav {\n    max-width: calc(var(--content-width) - calc(var(--alley) * 2));\n  }\n}\n\n.site-header nav > * {\n  text-transform: uppercase;\n  font-size: var(--font-size-small);\n}\n\n.site-header .site-name {\n  margin-bottom: calc(var(--space) * 1.5);\n  font-weight: var(--font-weight-normal);\n  line-height: var(--line-height-general);\n}\n\n.site-header ul {\n  margin-left: 0;\n  list-style-type: none;\n}\n\nmain {\n  flex: 1;\n  margin-top: calc(var(--space) * 3);\n  margin-bottom: calc(var(--space) * 4);\n}\n\nmain > h1 {\n  margin-bottom: calc(var(--space) * 2.125);\n}\n\nmain > section > h2 {\n  font-size: var(--font-size-xsmall);\n  line-height: var(--line-height-general);\n  font-weight: var(--font-weight-normal);\n  text-transform: uppercase;\n  margin-bottom: var(--space);\n  padding-bottom: calc(var(--space) * 0.25);\n  border-bottom: 5px solid var(--color-contrast-lowest);\n}\n\n.doc-block {\n  margin-bottom: calc(var(--space) * 2);\n}\n\n.doc-block h3 {\n  text-transform: uppercase;\n  font-weight: var(--font-weight-normal);\n  font-size: var(--font-size-general);\n  line-height: var(--line-height-general);\n}\n\n.doc-block h3 .icon {\n  float: right;\n}\n\n.doc-block table {\n  table-layout: fixed;\n}\n\n.doc-block table th,\n.doc-block table td {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.doc-block table code {\n  padding: 0;\n  background-color: transparent;\n}\n\n.doc-block .anchor {\n  padding-top: var(--space-5xlarge);\n  font-weight: var(--font-weight-normal);\n}\n\n.site-footer {\n  display: flex;\n  align-items: center;\n  height: 4.2rem;\n  border-top: 1px solid var(--color-contrast-low);\n}\n\n.copyright {\n  text-transform: uppercase;\n  font-size: var(--font-size-xxsmall);\n}\n\n.colorbox {\n  width: 42px;\n  height: 42px;\n  border: 1px solid var(--color-contrast-lower);\n  border-radius: 50%;\n  box-shadow: 0 0 0 4px #ffffff inset;\n}\n\n.decoy {\n  min-height: 4rem;\n  background: linear-gradient(90deg, var(--color-contrast-lower) 0%, var(--color-contrast-lowest) 100%);\n}\n\n._404 {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n._404 .inner {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-top: -2rem;\n  text-align: center;\n  transform: translate(-50%, -50%);\n}\n\n._404 h1 {\n  font-size: 8rem;\n}\n\n._404 p {\n  text-transform: uppercase;\n  font-size: 0.889em;\n}\n\npre[class*=language-] {\n  color: var(--color-contrast);\n  font-weight: var(--font-weight-normal);\n}\n\n.token.comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n  color: slategray;\n}\n\n.token.punctuation {\n  color: var(--color-contrast);\n}\n\n.namespace {\n  opacity: 0.7;\n}\n\n.token.property,\n.token.tag,\n.token.boolean,\n.token.number,\n.token.constant,\n.token.symbol,\n.token.deleted {\n  color: #990055;\n}\n\n.token.selector,\n.token.attr-name,\n.token.string,\n.token.char,\n.token.builtin,\n.token.inserted {\n  color: #669900;\n}\n\n.token.operator,\n.token.entity,\n.token.url,\n.language-css .token.string,\n.style .token.string {\n  background: rgba(255, 255, 255, 0.5);\n  color: #9a6e3a;\n}\n\n.token.atrule,\n.token.attr-value,\n.token.keyword {\n  color: #0077aa;\n}\n\n.token.function,\n.token.class-name {\n  color: #dd4a68;\n}\n\n.token.regex,\n.token.important,\n.token.variable {\n  color: #ee9900;\n}\n\n.token.important,\n.token.bold {\n  font-weight: bold;\n}\n\n.token.italic {\n  font-style: italic;\n}\n\n.token.entity {\n  cursor: help;\n}\n","/// Converts `$aspect-width` and `$aspect-height` to the appropriate bottom padding.\r\n/// @param {<number>} $aspect-width [16]\r\n/// @param {<number>} $aspect-height [9]\r\n/// @access private\r\n@mixin aspect-ratio-to-padding($aspect-width:16, $aspect-height:9) {\r\n    padding-bottom:percentage($aspect-height / $aspect-width);\r\n}\r\n\r\n/// Adds styles for a responsive video container.\r\n/// @param {<number>} $aspect-width [16]\r\n/// @param {<number>} $aspect-height [9]\r\n@mixin video-container($aspect-width:16, $aspect-height:9) {\r\n    @include aspect-ratio-to-padding($aspect-width, $aspect-height);\r\n\r\n    position:relative;\r\n    display:block;\r\n    height:0;\r\n\r\n    iframe,\r\n    object,\r\n    embed {\r\n        position:absolute;\r\n        top:0;\r\n        left:0;\r\n        width:100%;\r\n        height:100%;\r\n    }\r\n}\r\n\r\n/// Includes `@content` on screens that are at least `$min-width` wide.\r\n/// @param {<number>} $min-width\r\n@mixin min($min-width) {\r\n    @media (min-width:$min-width) {\r\n        @content;\r\n    }\r\n}\r\n\r\n/// Includes `@content` on screens up to `$max-width` wide.\r\n/// @param {<number>} $max-width\r\n@mixin max($max-width) {\r\n    @media (max-width:$max-width) {\r\n        @content;\r\n    }\r\n}\r\n\r\n/// @param {<number>} $min-width\r\n/// @param {<number>} $max-width\r\n@mixin min-max($min-width, $max-width) {\r\n    @media (min-width:$min-width) and (max-width:$max-width) {\r\n        @content;\r\n    }\r\n}\r\n\r\n///\r\n@mixin min-small() {\r\n    @media (min-width:$breakpoint-s) {\r\n        @content;\r\n    }\r\n}\r\n\r\n///\r\n@mixin min-medium() {\r\n    @media (min-width:$breakpoint-m) {\r\n        @content;\r\n    }\r\n}\r\n\r\n///\r\n@mixin min-large() {\r\n    @media (min-width:$breakpoint-l) {\r\n        @content;\r\n    }\r\n}\r\n\r\n///\r\n@mixin min-xlarge() {\r\n    @media (min-width:$breakpoint-xl) {\r\n        @content;\r\n    }\r\n}\r\n\r\n/// Includes `@content` for ie9 and above.\r\n@mixin ie9plus() {\r\n    // @formatter:off\r\n    @media (min-width:0\\0) and (min-resolution:+72dpi) {\r\n        @content;\r\n    }\r\n    // @formatter:on\r\n}\r\n\r\n/// Includes `@content` for ie10 and above.\r\n@mixin ie10plus() {\r\n    @media (-ms-high-contrast:none), (-ms-high-contrast:active) {\r\n        @content;\r\n    }\r\n}\r\n\r\n/// Removes margins if element is the first and/or last child (depending on `$scope`).\r\n/// @param {<string>} $scope [all]\r\n@mixin control-margins($scope:all) {\r\n    $scope-y:$scope == vertical or $scope == all;\r\n    $scope-x:$scope == horizontal or $scope == all;\r\n\r\n    @if $scope-y or $scope == top {\r\n        &:first-child:not(.f-margins) {\r\n            margin-top:0;\r\n        }\r\n    }\r\n\r\n    @if $scope-x or $scope == right {\r\n        &:last-child:not(.f-margins) {\r\n            margin-right:0;\r\n        }\r\n    }\r\n\r\n    @if $scope-y or $scope == bottom {\r\n        &:last-child:not(.f-margins) {\r\n            margin-bottom:0;\r\n        }\r\n    }\r\n\r\n    @if $scope-x or $scope == left {\r\n        &:first-child:not(.f-margins) {\r\n            margin-left:0;\r\n        }\r\n    }\r\n}\r\n\r\n/// Removes bottom margins from last children.\r\n@mixin controlled($scope:bottom) {\r\n    * {\r\n        @include control-margins($scope);\r\n    }\r\n}\r\n\r\n/// Sets default vertical margins for selected elements\r\n/// @param {<number>|false} $multiplier [false]\r\n@mixin vertical-margins($multiplier:false) {\r\n    $m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\r\n\r\n    hr {\r\n        margin-top:if($m, space($m), space());\r\n        margin-bottom:if($m, space($m), space());\r\n    }\r\n\r\n    caption {\r\n        margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\r\n    }\r\n\r\n    h1,\r\n    h2,\r\n    h3,\r\n    h4,\r\n    h5,\r\n    h6 {\r\n        @include control-margins(top);\r\n\r\n        margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\r\n        margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\r\n    }\r\n\r\n    address,\r\n    blockquote,\r\n    canvas,\r\n    dl,\r\n    fieldset,\r\n    figure,\r\n    form,\r\n    hr,\r\n    noscript,\r\n    ol,\r\n    p,\r\n    pre,\r\n    table,\r\n    ul,\r\n    video {\r\n        margin-bottom:if($m, space($m), space());\r\n    }\r\n}\r\n\r\n/// @param {1|2|3|4|5} $type\r\n/// @param {<number>|false} $margins-multiplier [false]\r\n@mixin h($type:1, $margins-multiplier:false) {\r\n    font-weight:var(--font-weight-heading);\r\n    font-size:var(--font-size-h#{$type});\r\n    font-family:var(--font-stack-heading);\r\n    line-height:var(--line-height-h#{$type});\r\n\r\n    @if is-nonneg-unitless-number($margins-multiplier) {\r\n        $m:$margins-multiplier;\r\n\r\n        @include control-margins(top);\r\n\r\n        margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\r\n        margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\r\n    }\r\n}\r\n\r\n///\r\n@mixin big() {\r\n    font-size:var(--font-size-big);\r\n    line-height:var(--line-height-big);\r\n}\r\n\r\n///\r\n@mixin xbig() {\r\n    font-size:var(--font-size-xbig);\r\n    line-height:var(--line-height-xbig);\r\n}\r\n\r\n///\r\n@mixin xxbig() {\r\n    font-size:var(--font-size-xxbig);\r\n    line-height:var(--line-height-xxbig);\r\n}\r\n\r\n///\r\n@mixin small() {\r\n    font-size:var(--font-size-small);\r\n    line-height:var(--line-height-small);\r\n}\r\n\r\n///\r\n@mixin xsmall() {\r\n    font-size:var(--font-size-xsmall);\r\n    line-height:var(--line-height-xsmall);\r\n}\r\n\r\n///\r\n@mixin xxsmall() {\r\n    font-size:var(--font-size-xxsmall);\r\n    line-height:var(--line-height-xxsmall);\r\n}\r\n\r\n/// Hides element when viewport is as wide or wider than `$breakpoint`\r\n@mixin hide($breakpoint:s) {\r\n    @if index(map-keys($breakpoints), $breakpoint) {\r\n        @include min(map-get($breakpoints, $breakpoint)) {\r\n            display:none;\r\n        }\r\n    } @else if is-nonneg-unit-number($breakpoint) {\r\n        @include min($breakpoint) {\r\n            display:none;\r\n        }\r\n    }\r\n}\r\n\r\n/// @param {<number>} $multiplier [1]\r\n/// @param {<bool>} $important [false]\r\n@mixin mgbch($multiplier:1, $important:false) {\r\n    $m:if(is-unitless-number($multiplier), $multiplier, 1);\r\n    $i:if($important == true, $important, false);\r\n\r\n    margin-top:space(-$m) if($i, !important, null);\r\n\r\n    > * {\r\n        margin-top:space($m) if($i, !important, null);\r\n    }\r\n}\r\n\r\n/// @param {row|col} $type [row]\r\n/// @param {<number>|false} $multiplier [false]\r\n@mixin row-alleys($type:row, $multiplier:false) {\r\n    $m:false;\r\n\r\n    @if index(map-keys($alley-sizes), $multiplier) {\r\n        $m:map-get($alley-sizes, $multiplier);\r\n    } @else if is-nonneg-unitless-number($multiplier) {\r\n        $m:$multiplier;\r\n    }\r\n\r\n    @if $type == row {\r\n        margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\r\n        margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\r\n    } @else if $type == col {\r\n        padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\r\n        padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\r\n    }\r\n}\r\n\r\n///\r\n@mixin row($alley-multiplier:false) {\r\n    @include row-alleys(row, $alley-multiplier);\r\n\r\n    display:flex;\r\n    flex-wrap:wrap;\r\n\r\n    > * {\r\n        @include row-alleys(col, $alley-multiplier);\r\n    }\r\n}\r\n\r\n/// @access private\r\n@mixin row-alley-styles($alley-multiplier) {\r\n    @include row-alleys(row, $alley-multiplier);\r\n\r\n    > * {\r\n        @include row-alleys(col, $alley-multiplier);\r\n    }\r\n}\r\n\r\n///\r\n@mixin row-alley($alley-multiplier, $breakpoint:false) {\r\n    $m:false;\r\n\r\n    @if index(map-keys($alley-sizes), $alley-multiplier) {\r\n        $m:map-get($alley-sizes, $alley-multiplier);\r\n    } @else if is-nonneg-unitless-number($alley-multiplier) {\r\n        $m:$alley-multiplier;\r\n    }\r\n\r\n    @if $m {\r\n        @if index(map-keys($breakpoints), $breakpoint) {\r\n            @include min(map-get($breakpoints, $breakpoint)) {\r\n                @include row-alley-styles($m);\r\n            }\r\n        } @else if is-nonneg-unit-number($breakpoint) {\r\n            @include min($breakpoint) {\r\n                @include row-alley-styles($m);\r\n            }\r\n        } @else {\r\n            @include row-alley-styles($m);\r\n        }\r\n    }\r\n}\r\n\r\n///\r\n@mixin col-width($column-width, $breakpoint:false) {\r\n    @if index(map-keys($columns), $column-width) {\r\n        @if index(map-keys($breakpoints), $breakpoint) {\r\n            @include min(map-get($breakpoints, $breakpoint)) {\r\n                width:map-get($columns, $column-width);\r\n            }\r\n        } @else if is-nonneg-unit-number($breakpoint) {\r\n            @include min($breakpoint) {\r\n                width:map-get($columns, $column-width);\r\n            }\r\n        } @else {\r\n            width:map-get($columns, $column-width);\r\n        }\r\n    } @else if is-nonneg-unitless-number($column-width) {\r\n        @if index(map-keys($breakpoints), $breakpoint) {\r\n            @include min(map-get($breakpoints, $breakpoint)) {\r\n                width:percentage($column-width);\r\n            }\r\n        } @else if is-nonneg-unit-number($breakpoint) {\r\n            @include min($breakpoint) {\r\n                width:percentage($column-width);\r\n            }\r\n        } @else {\r\n            width:percentage($column-width);\r\n        }\r\n    }\r\n}\r\n\r\n/// Utility to clear floats\r\n@mixin clearfix() {\r\n    &:before,\r\n    &:after {\r\n        display:table;\r\n        clear:both;\r\n        width:100%;\r\n        content:'';\r\n    }\r\n}\r\n\r\n///\r\n@mixin figcaption() {\r\n    padding-top:space(0.375);\r\n    color:var(--color-contrast-medium);\r\n    text-align:center;\r\n    font-size:var(--font-size-xsmall);\r\n}\r\n\r\n/// Unsets border radius\r\n@mixin sq() {\r\n    border-radius:unset;\r\n}\r\n\r\n///\r\n@mixin ellipsis() {\r\n    overflow:hidden;\r\n    text-overflow:ellipsis;\r\n    white-space:nowrap;\r\n}\r\n","//\r\n// Strings\r\n//\r\n//\r\n\r\n/// Joins `$list` items into a `$glue` separated string and uses an optional `$closer` before the final item.\r\n/// @param {<list>} $list\r\n/// @param {<any>} $glue ['']\r\n/// @param {<any>} $closer [null]\r\n/// @param {<bool>} $quote-strings [false]\r\n@function list-to-string($list, $glue:'', $closer:null, $quote-strings:true) {\r\n    $output:null;\r\n    $last-item:null;\r\n    $last-item-quoted:false;\r\n\r\n    @if type-of($list) != list {\r\n        @error '`#{$list}` is not a valid list.';\r\n    }\r\n\r\n    @for $i from 1 through length($list) {\r\n        $item:nth($list, $i);\r\n\r\n        @if type-of($item) == list {\r\n            @if $i == length($list) {\r\n                $last-item:nth($item, -1);\r\n                $is-nested-list:type-of($last-item) == list;\r\n\r\n                @while $is-nested-list {\r\n                    $last-item:nth($last-item, -1);\r\n\r\n                    @if type-of($last-item) != list {\r\n                        $is-nested-list:false;\r\n                        $last-item-quoted:type-of($last-item) == string and $quote-strings;\r\n                    }\r\n                }\r\n\r\n                $output:#{$output}#{list-to-string($item, $glue, null, $quote-strings)};\r\n            } @else {\r\n                $output:#{$output}#{list-to-string($item, $glue, null, $quote-strings)}#{$glue};\r\n            }\r\n        } @else {\r\n            $item:if(type-of($item) == string and $quote-strings, '\"#{$item}\"', $item);\r\n\r\n            @if $i == length($list) {\r\n                $last-item:$item;\r\n                $last-item-quoted:type-of($last-item) == string and $quote-strings;\r\n\r\n                $output:#{$output}#{$item}\r\n            } @else {\r\n                $output:#{$output}#{$item}#{$glue};\r\n            }\r\n        }\r\n    }\r\n\r\n    @if $closer != null {\r\n        $offset:if($last-item-quoted, 2, 0);\r\n        $find:#{$glue}#{$last-item};\r\n        $slice-1:str-slice($output, 1, -(str-length(#{$find}) + 1 + $offset));\r\n        $slice-2:str-slice($output, -(str-length(#{$last-item}) + $offset));\r\n        $output:#{$slice-1}#{$closer}#{$slice-2};\r\n    }\r\n\r\n    @return $output;\r\n}\r\n\r\n//\r\n// Colors\r\n//\r\n//\r\n\r\n/// Returns a `$dark` or `$light` color depending on the lightness `$threshold` of the `$bg-color`.\r\n/// @param {<color>} $bg-color\r\n/// @param {<number>} $threshold [60]\r\n/// @param {<color>} $dark [black]\r\n/// @param {<color>} $light [white]\r\n@function auto-color-contrast($bg-color, $threshold: 84, $dark: black, $light: white) {\r\n    @if type-of($bg-color) != color {\r\n        @error '`#{$bg-color}` is not a valid color.';\r\n    }\r\n\r\n    @if not is-nonneg-number($threshold) {\r\n        @error '`#{$threshold}` is not a nonnegative number.';\r\n    }\r\n\r\n    @if lightness($bg-color) > $threshold {\r\n        @return $dark;\r\n    } @else {\r\n        @return $light;\r\n    }\r\n}\r\n\r\n//\r\n// Numbers\r\n//\r\n//\r\n\r\n/// Ceils `$number` to given decimal `$places`.\r\n/// @param {<number>} $number\r\n/// @param {<number>} $places\r\n@function decimal-ceil($number, $places:3) {\r\n    @return decimal-round($number, $places, ceil);\r\n}\r\n\r\n/// Floors `$number` to given decimal `$places`.\r\n/// @param {<number>} $number\r\n/// @param {<number>} $places\r\n@function decimal-floor($number, $places:3) {\r\n    @return decimal-round($number, $places, floor);\r\n}\r\n\r\n/// Rounds, ceils or floors `$number` to given decimal `$places`.\r\n/// @param {<number>} $number\r\n/// @param {<number>} $places\r\n/// @param {<any> (round, ceil, floor)} $mode [round]\r\n@function decimal-round($number, $places:3, $mode:round) {\r\n    $n:1;\r\n\r\n    @if not is-number($number) {\r\n        @return $number;\r\n    }\r\n\r\n    @if not is-number($places) {\r\n        @return $number;\r\n    }\r\n\r\n    @if $places > 0 and $places < 20 {\r\n        @for $i from 1 through $places {\r\n            $n:$n * 10;\r\n        }\r\n    }\r\n\r\n    @if $mode == round {\r\n        @return round($number * $n) / $n;\r\n    } @else if $mode == ceil {\r\n        @return ceil($number * $n) / $n;\r\n    } @else if $mode == floor {\r\n        @return floor($number * $n) / $n;\r\n    } @else {\r\n        @return $number;\r\n    }\r\n}\r\n\r\n/// Removes the unit from `$number`.\r\n/// @param {<number>} $number\r\n@function strip-unit($number) {\r\n    @if type-of($number) == 'number' and not unitless($number) {\r\n        @return $number / ($number * 0 + 1);\r\n    }\r\n\r\n    @return $number;\r\n}\r\n\r\n/// Converts `$size-in-rem` to pixels based on `$font-size-base`.\r\n/// @param {<number>} $size-in-rem\r\n/// @param {<number>} $font-size-base\r\n@function rem-to-pixels($size-in-rem, $font-size-base) {\r\n    @return strip-unit($size-in-rem) * $font-size-base;\r\n}\r\n\r\n//\r\n// Conditionals\r\n//\r\n//\r\n\r\n/// Checks if `$value` is a boolean.\r\n/// @param {<any>} $value\r\n@function is-bool($value) {\r\n    @return type-of($value) == bool;\r\n}\r\n\r\n/// Checks if `$value` is a color.\r\n/// @param {<any>} $value\r\n@function is-color($value) {\r\n    @return type-of($value) == color;\r\n}\r\n\r\n/// Checks if `$value` is a string.\r\n/// @param {<any>} $value\r\n@function is-string($value) {\r\n    @return type-of($value) == string;\r\n}\r\n\r\n/// Checks if `$value` is a number.\r\n/// @param {<any>} $value\r\n@function is-number($value) {\r\n    @return type-of($value) == number;\r\n}\r\n\r\n/// Checks if `$value` is a number with a unit.\r\n/// @param {<any>} $value\r\n/// @param {<bool>} $warn [false]\r\n@function is-unit-number($value, $warn: false) {\r\n    @if is-number($value) and index($lengths, unit($value)) {\r\n        @return true;\r\n    }\r\n\r\n    @if $warn == true {\r\n        @warn '`$value` must be a <length>. #{show-param-value($value)}';\r\n    }\r\n\r\n    @return false;\r\n}\r\n\r\n/// Checks if `$value` is a unitless number.\r\n/// @param {<any>} $value\r\n/// @param {<bool>} $warn [false]\r\n@function is-unitless-number($value, $warn: false) {\r\n    @if is-number($value) and unitless($value) {\r\n        @return true;\r\n    }\r\n\r\n    @if $warn == true {\r\n        @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\r\n    }\r\n\r\n    @return false;\r\n}\r\n\r\n/// Checks if `$value` is a nonnegative number.\r\n/// @param {<any>} $value\r\n/// @param {<bool>} $warn [false]\r\n@function is-nonneg-number($value, $warn: false) {\r\n    @if is-number($value) and $value > -1 {\r\n        @return true;\r\n    }\r\n\r\n    @if $warn == true {\r\n        @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\r\n    }\r\n\r\n    @return false;\r\n}\r\n\r\n/// Checks if `$value` is a nonnegative number with a unit.\r\n/// @param {<any>} $value\r\n/// @param {<bool>} $warn [false]\r\n@function is-nonneg-unit-number($value, $warn: false) {\r\n    @if is-nonneg-number($value) and index($lengths, unit($value)) {\r\n        @return true;\r\n    }\r\n\r\n    @if $warn == true {\r\n        @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\r\n    }\r\n\r\n    @return false;\r\n}\r\n\r\n/// Checks if `$value` is a nonnegative, unitless number.\r\n/// @param {<any>} $value\r\n/// @param {<bool>} $warn [false]\r\n@function is-nonneg-unitless-number($value, $warn: false) {\r\n    @if is-nonneg-number($value) and unitless($value) {\r\n        @return true;\r\n    }\r\n\r\n    @if $warn == true {\r\n        @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\r\n    }\r\n\r\n    @return false;\r\n}\r\n\r\n/// Checks if `$value` is a map.\r\n/// @param {<any>} $value\r\n@function is-map($value) {\r\n    @return type-of($value) == map;\r\n}\r\n\r\n/// Checks if `$value` is a list.\r\n/// @param {<any>} $value\r\n@function is-list($value) {\r\n    @return type-of($value) == list;\r\n}\r\n\r\n/// Checks if `$needle` is found in `$haystack`.\r\n/// @param {<any>|number} $needle\r\n/// @param {<list>} $haystack\r\n/// @param {<bool>} $warn [false]\r\n@function is-in-list($needle, $haystack, $warn: false) {\r\n    @if index($haystack, $needle) {\r\n        @return true;\r\n    }\r\n\r\n    @if $warn == true {\r\n        @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\r\n    }\r\n\r\n    @return false;\r\n}\r\n\r\n//\r\n// Utilities\r\n//\r\n//\r\n\r\n/// Returns a formatted string containing `$value` and its type.\r\n/// @param {<any>} $value\r\n/// @access private\r\n@function show-param-value($value) {\r\n    $value:if(type-of($value) == string, '\"#{$value}\"', $value);\r\n\r\n    @return 'Received: <#{type-of($value)}: #{$value}>.';\r\n}\r\n\r\n/// Returns a formatted string of valid `$values`.\r\n/// @param {<list>} $values\r\n/// @access private\r\n@function format-valid-values($values) {\r\n    @return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\r\n}\r\n\r\n/// @param {<number>} $multiplier\r\n@function space($multiplier: 1) {\r\n    $m: if(is-unitless-number($multiplier), $multiplier, 1);\r\n\r\n    @return if($m != 1, calc(var(--space) * #{$m}), var(--space));\r\n}\r\n\r\n/// @param {<number>} $multiplier\r\n@function alley($multiplier: 1) {\r\n    $m: if(is-unitless-number($multiplier), $multiplier, 1);\r\n\r\n    @return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\r\n}\r\n","pre[class*=language-] {\r\n    color:var(--color-contrast);\r\n    font-weight:var(--font-weight-normal);\r\n}\r\n\r\n.token.comment,\r\n.token.prolog,\r\n.token.doctype,\r\n.token.cdata {\r\n    color:slategray;\r\n}\r\n\r\n.token.punctuation {\r\n    color:var(--color-contrast);\r\n}\r\n\r\n.namespace {\r\n    opacity:0.7;\r\n}\r\n\r\n.token.property,\r\n.token.tag,\r\n.token.boolean,\r\n.token.number,\r\n.token.constant,\r\n.token.symbol,\r\n.token.deleted {\r\n    color:#990055;\r\n}\r\n\r\n.token.selector,\r\n.token.attr-name,\r\n.token.string,\r\n.token.char,\r\n.token.builtin,\r\n.token.inserted {\r\n    color:#669900;\r\n}\r\n\r\n.token.operator,\r\n.token.entity,\r\n.token.url,\r\n.language-css .token.string,\r\n.style .token.string {\r\n    background:hsla(0, 0%, 100%, 0.5);\r\n    color:#9a6e3a;\r\n}\r\n\r\n.token.atrule,\r\n.token.attr-value,\r\n.token.keyword {\r\n    color:#0077aa;\r\n}\r\n\r\n.token.function,\r\n.token.class-name {\r\n    color:#dd4a68;\r\n}\r\n\r\n.token.regex,\r\n.token.important,\r\n.token.variable {\r\n    color:#ee9900;\r\n}\r\n\r\n.token.important,\r\n.token.bold {\r\n    font-weight:bold;\r\n}\r\n\r\n.token.italic {\r\n    font-style:italic;\r\n}\r\n\r\n.token.entity {\r\n    cursor:help;\r\n}\r\n"]}