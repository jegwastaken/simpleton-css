{"version":3,"sources":["_gen.scss","docs.css","../../scss/_mixins.scss","../../scss/_funcs.scss","../../scss/_vars.scss","_prism.scss"],"names":[],"mappings":"AAAA;EACI,sBAAgB;ACCpB;;ACkHQ;EACI,gBAAgB;AD/G5B;;ADYA;EAbI,qCG0V8C;EHzV9C,oCGyV8C;EH1U9C,aAAa;EACb,sBAAsB;EACtB,cAAc;EACd,iBAAiB;EACjB,gBAA+B;EAA/B,+BAA+B;EAC/B,WAAW;ACTf;;ACeI;EFdJ;IATQ,2BGsVwD;IHrVxD,0BGqVwD;EFxU9D;AACF;;ADKA;EACI,qBAAqB;EACrB,UAAU;EACV,WAAW;EACX,2BAA2B;EAC3B,6BAA6B;EAC7B,eAAe;ACFnB;;ADKA;EACI,eAAe;EACf,MAAM;EACN,OAAO;EACP,gBAAgB;EAChB,uEG6S8C;EH5S9C,YAAY;EACZ,YAAY;EACZ,yCAAyC;ACF7C;;ACZI;EFMJ;IAYY,uCAAmD;IAAnD,sDAAmD;ECD7D;AACF;;ADZA;EAgBY,yBAAyB;EACzB,iCAAiC;ACA7C;;ADjBA;EAsBQ,qCG4R0C;EH3R1C,sCAAsC;EACtC,uCAAuC;ACD/C;;ADvBA;EA4BQ,cAAc;EACd,qBAAqB;ACD7B;;ADKA;EACI,OAAO;EACP,gCG+Q8C;EH9Q9C,mCG8Q8C;AFhRlD;;ADDA;EAMQ,uCG2Q0C;AF5QlD;;ADLA;EAWY,kCAAkC;EAClC,uCAAuC;EACvC,sCAAsC;EACtC,sCGmQsC;EHlQtC,uCGkQsC;EHjQtC,yDAAyD;ACFrE;;ADOA;EACI,mCG2P8C;AF/PlD;;ADGA;EAIQ,yBAAyB;EACzB,sCAAsC;EACtC,mCAAmC;EACnC,uCAAuC;ACH/C;;ADJA;EAUY,YAAY;ACFxB;;ADRA;EAeQ,mBAAmB;ACH3B;;ADZA;;EEqTI,gBAAgB;EAChB,uBAAuB;EACvB,mBAAmB;ADpSvB;;ADnBA;EAuBY,UAAU;EACV,6BAA6B;ACAzC;;ADxBA;EA6BQ,iCAAiC;EACjC,sCAAsC;ACD9C;;ADKA;EACI,aAAa;EACb,mBAAmB;EACnB,cAAc;EACd,+CAA+C;ACFnD;;ADKA;EACI,yBAAyB;EACzB,mCAAmC;ACFvC;;ADKA;EACI,WAAW;EACX,YAAY;EACZ,6CAA6C;EAC7C,kBAAkB;EAClB,mCAAmC;ACFvC;;ADKA;EACI,gBAAgB;EAChB,qGAIC;ACNL;;ADSA;EACI,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;ACNhB;;ADCA;EAQQ,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,iBAAiB;EACjB,kBAAkB;EAClB,gCAAgC;ACLxC;;ADRA;EAiBQ,eAAe;ACLvB;;ADZA;EAqBQ,yBAAyB;EACzB,kBIzIiB;AHoIzB;;AI5KA;EACI,4BAA2B;EAC3B,sCAAqC;AJ+KzC;;AI5KA;;;;EAII,gBAAe;AJ+KnB;;AI5KA;EACI,4BAA2B;AJ+K/B;;AI5KA;EACI,YAAW;AJ+Kf;;AI5KA;;;;;;;EAOI,cAAa;AJ+KjB;;AI5KA;;;;;;EAMI,cAAa;AJ+KjB;;AI5KA;;;;;EAKI,oCAAiC;EACjC,cAAa;AJ+KjB;;AI5KA;;;EAGI,cAAa;AJ+KjB;;AI5KA;;EAEI,cAAa;AJ+KjB;;AI5KA;;;EAGI,cAAa;AJ+KjB;;AI5KA;;EAEI,iBAAgB;AJ+KpB;;AI5KA;EACI,kBAAiB;AJ+KrB;;AI5KA;EACI,YAAW;AJ+Kf","file":"../docs.css","sourcesContent":[":root {\n    --content-width: 800px;\n}\n\n@mixin container-padding-horizontal {\n    padding-right: alley(0.5);\n    padding-left: alley(0.5);\n\n    @include min($breakpoint-s) {\n        padding-right: alley();\n        padding-left: alley();\n    }\n}\n\nhtml body #container#container#container {\n    @include controlled();\n}\n\n#container {\n    @include container-padding-horizontal();\n\n    display: flex;\n    flex-direction: column;\n    margin: 0 auto;\n    min-height: 100vh;\n    max-width: var(--content-width);\n    width: 100%;\n}\n\n.icon {\n    display: inline-block;\n    width: 1em;\n    height: 1em;\n    fill: var(--color-contrast);\n    stroke: var(--color-contrast);\n    stroke-width: 0;\n}\n\n.site-header {\n    position: fixed;\n    top: 0;\n    left: 0;\n    overflow-y: auto;\n    padding: space(3.375) space() space(4.375);\n    width: 180px;\n    height: 100%;\n    background-color: var(--color-background);\n\n    nav {\n        @include min($breakpoint-s) {\n            max-width: calc(var(--content-width) - #{alley(2)});\n        }\n\n        > * {\n            text-transform: uppercase;\n            font-size: var(--font-size-small);\n        }\n    }\n\n    .site-name {\n        margin-bottom: space(1.5);\n        font-weight: var(--font-weight-normal);\n        line-height: var(--line-height-general);\n    }\n\n    ul {\n        margin-left: 0;\n        list-style-type: none;\n    }\n}\n\nmain {\n    flex: 1;\n    margin-top: space(3);\n    margin-bottom: space(4);\n\n    > h1 {\n        margin-bottom: space(2.125);\n    }\n\n    > section {\n        > h2 {\n            font-size: var(--font-size-xsmall);\n            line-height: var(--line-height-general);\n            font-weight: var(--font-weight-normal);\n            margin-bottom: space(1.25);\n            padding-bottom: space(0.25);\n            border-bottom: 0.25rem solid var(--color-contrast-lowest);\n        }\n    }\n}\n\n.doc-block {\n    margin-bottom: space(2);\n\n    h3 {\n        text-transform: uppercase;\n        font-weight: var(--font-weight-normal);\n        font-size: var(--font-size-general);\n        line-height: var(--line-height-general);\n\n        .icon {\n            float: right;\n        }\n    }\n\n    table {\n        table-layout: fixed;\n\n        th,\n        td {\n            @include ellipsis();\n        }\n\n        code {\n            padding: 0;\n            background-color: transparent;\n        }\n    }\n\n    .anchor {\n        padding-top: var(--space-5xlarge);\n        font-weight: var(--font-weight-normal);\n    }\n}\n\n.site-footer {\n    display: flex;\n    align-items: center;\n    height: 4.2rem;\n    border-top: 1px solid var(--color-contrast-low);\n}\n\n.copyright {\n    text-transform: uppercase;\n    font-size: var(--font-size-xxsmall);\n}\n\n.colorbox {\n    width: 42px;\n    height: 42px;\n    border: 1px solid var(--color-contrast-lower);\n    border-radius: 50%;\n    box-shadow: 0 0 0 4px #ffffff inset;\n}\n\n.decoy {\n    min-height: 4rem;\n    background: linear-gradient(\n        90deg,\n        var(--color-contrast-lower) 0%,\n        var(--color-contrast-lowest) 100%\n    );\n}\n\n._404 {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n\n    .inner {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        margin-top: -2rem;\n        text-align: center;\n        transform: translate(-50%, -50%);\n    }\n\n    h1 {\n        font-size: 8rem;\n    }\n\n    p {\n        text-transform: uppercase;\n        font-size: $font-size-small;\n    }\n}\n",":root {\n  --content-width: 800px;\n}\n\nhtml body #container#container#container *:last-child:not(.f-margins) {\n  margin-bottom: 0;\n}\n\n#container {\n  padding-right: calc(var(--alley) * 0.5);\n  padding-left: calc(var(--alley) * 0.5);\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n  min-height: 100vh;\n  max-width: var(--content-width);\n  width: 100%;\n}\n\n@media (min-width: 480px) {\n  #container {\n    padding-right: var(--alley);\n    padding-left: var(--alley);\n  }\n}\n\n.icon {\n  display: inline-block;\n  width: 1em;\n  height: 1em;\n  fill: var(--color-contrast);\n  stroke: var(--color-contrast);\n  stroke-width: 0;\n}\n\n.site-header {\n  position: fixed;\n  top: 0;\n  left: 0;\n  overflow-y: auto;\n  padding: calc(var(--space) * 3.375) var(--space) calc(var(--space) * 4.375);\n  width: 180px;\n  height: 100%;\n  background-color: var(--color-background);\n}\n\n@media (min-width: 480px) {\n  .site-header nav {\n    max-width: calc(var(--content-width) - calc(var(--alley) * 2));\n  }\n}\n\n.site-header nav > * {\n  text-transform: uppercase;\n  font-size: var(--font-size-small);\n}\n\n.site-header .site-name {\n  margin-bottom: calc(var(--space) * 1.5);\n  font-weight: var(--font-weight-normal);\n  line-height: var(--line-height-general);\n}\n\n.site-header ul {\n  margin-left: 0;\n  list-style-type: none;\n}\n\nmain {\n  flex: 1;\n  margin-top: calc(var(--space) * 3);\n  margin-bottom: calc(var(--space) * 4);\n}\n\nmain > h1 {\n  margin-bottom: calc(var(--space) * 2.125);\n}\n\nmain > section > h2 {\n  font-size: var(--font-size-xsmall);\n  line-height: var(--line-height-general);\n  font-weight: var(--font-weight-normal);\n  margin-bottom: calc(var(--space) * 1.25);\n  padding-bottom: calc(var(--space) * 0.25);\n  border-bottom: 0.25rem solid var(--color-contrast-lowest);\n}\n\n.doc-block {\n  margin-bottom: calc(var(--space) * 2);\n}\n\n.doc-block h3 {\n  text-transform: uppercase;\n  font-weight: var(--font-weight-normal);\n  font-size: var(--font-size-general);\n  line-height: var(--line-height-general);\n}\n\n.doc-block h3 .icon {\n  float: right;\n}\n\n.doc-block table {\n  table-layout: fixed;\n}\n\n.doc-block table th,\n.doc-block table td {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.doc-block table code {\n  padding: 0;\n  background-color: transparent;\n}\n\n.doc-block .anchor {\n  padding-top: var(--space-5xlarge);\n  font-weight: var(--font-weight-normal);\n}\n\n.site-footer {\n  display: flex;\n  align-items: center;\n  height: 4.2rem;\n  border-top: 1px solid var(--color-contrast-low);\n}\n\n.copyright {\n  text-transform: uppercase;\n  font-size: var(--font-size-xxsmall);\n}\n\n.colorbox {\n  width: 42px;\n  height: 42px;\n  border: 1px solid var(--color-contrast-lower);\n  border-radius: 50%;\n  box-shadow: 0 0 0 4px #ffffff inset;\n}\n\n.decoy {\n  min-height: 4rem;\n  background: linear-gradient(90deg, var(--color-contrast-lower) 0%, var(--color-contrast-lowest) 100%);\n}\n\n._404 {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n._404 .inner {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-top: -2rem;\n  text-align: center;\n  transform: translate(-50%, -50%);\n}\n\n._404 h1 {\n  font-size: 8rem;\n}\n\n._404 p {\n  text-transform: uppercase;\n  font-size: 0.889em;\n}\n\npre[class*=language-] {\n  color: var(--color-contrast);\n  font-weight: var(--font-weight-normal);\n}\n\n.token.comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n  color: slategray;\n}\n\n.token.punctuation {\n  color: var(--color-contrast);\n}\n\n.namespace {\n  opacity: 0.7;\n}\n\n.token.property,\n.token.tag,\n.token.boolean,\n.token.number,\n.token.constant,\n.token.symbol,\n.token.deleted {\n  color: #990055;\n}\n\n.token.selector,\n.token.attr-name,\n.token.string,\n.token.char,\n.token.builtin,\n.token.inserted {\n  color: #669900;\n}\n\n.token.operator,\n.token.entity,\n.token.url,\n.language-css .token.string,\n.style .token.string {\n  background: rgba(255, 255, 255, 0.5);\n  color: #9a6e3a;\n}\n\n.token.atrule,\n.token.attr-value,\n.token.keyword {\n  color: #0077aa;\n}\n\n.token.function,\n.token.class-name {\n  color: #dd4a68;\n}\n\n.token.regex,\n.token.important,\n.token.variable {\n  color: #ee9900;\n}\n\n.token.important,\n.token.bold {\n  font-weight: bold;\n}\n\n.token.italic {\n  font-style: italic;\n}\n\n.token.entity {\n  cursor: help;\n}\n","/// Converts `$aspect-width` and `$aspect-height` to the appropriate bottom padding.\n/// @param {<number>} $aspect-width [16]\n/// @param {<number>} $aspect-height [9]\n/// @access private\n@mixin aspect-ratio-to-padding($aspect-width: 16, $aspect-height: 9) {\n    padding-bottom: percentage($aspect-height / $aspect-width);\n}\n\n/// Adds styles for a responsive video container.\n/// @param {<number>} $aspect-width [16]\n/// @param {<number>} $aspect-height [9]\n@mixin video-container($aspect-width: 16, $aspect-height: 9) {\n    @include aspect-ratio-to-padding($aspect-width, $aspect-height);\n\n    position: relative;\n    display: block;\n    height: 0;\n\n    iframe,\n    object,\n    embed {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n    }\n}\n\n/// Includes `@content` on screens that are at least `$min-width` wide.\n/// @param {<number>} $min-width\n@mixin min($min-width) {\n    @media (min-width: $min-width) {\n        @content;\n    }\n}\n\n/// Includes `@content` on screens up to `$max-width` wide.\n/// @param {<number>} $max-width\n@mixin max($max-width) {\n    @media (max-width: $max-width) {\n        @content;\n    }\n}\n\n/// @param {<number>} $min-width\n/// @param {<number>} $max-width\n@mixin min-max($min-width, $max-width) {\n    @media (min-width: $min-width) and (max-width: $max-width) {\n        @content;\n    }\n}\n\n///\n@mixin min-small() {\n    @media (min-width: $breakpoint-s) {\n        @content;\n    }\n}\n\n///\n@mixin min-medium() {\n    @media (min-width: $breakpoint-m) {\n        @content;\n    }\n}\n\n///\n@mixin min-large() {\n    @media (min-width: $breakpoint-l) {\n        @content;\n    }\n}\n\n///\n@mixin min-xlarge() {\n    @media (min-width: $breakpoint-xl) {\n        @content;\n    }\n}\n\n/// Includes `@content` for ie9 and above.\n@mixin ie9plus() {\n    // @formatter:off\n    @media (min-width: 0\\0) and (min-resolution: +72dpi) {\n        @content;\n    }\n    // @formatter:on\n}\n\n/// Includes `@content` for ie10 and above.\n@mixin ie10plus() {\n    @media (-ms-high-contrast: none), (-ms-high-contrast: active) {\n        @content;\n    }\n}\n\n/// Removes margins if element is the first and/or last child (depending on `$scope`).\n/// @param {<string>} $scope [all]\n@mixin control-margins($scope: all) {\n    $scope-y: $scope == vertical or $scope == all;\n    $scope-x: $scope == horizontal or $scope == all;\n\n    @if $scope-y or $scope == top {\n        &:first-child:not(.f-margins) {\n            margin-top: 0;\n        }\n    }\n\n    @if $scope-x or $scope == right {\n        &:last-child:not(.f-margins) {\n            margin-right: 0;\n        }\n    }\n\n    @if $scope-y or $scope == bottom {\n        &:last-child:not(.f-margins) {\n            margin-bottom: 0;\n        }\n    }\n\n    @if $scope-x or $scope == left {\n        &:first-child:not(.f-margins) {\n            margin-left: 0;\n        }\n    }\n}\n\n/// Removes bottom margins from last children.\n@mixin controlled($scope: bottom) {\n    * {\n        @include control-margins($scope);\n    }\n}\n\n/// Sets default vertical margins for selected elements\n/// @param {<number>|false} $multiplier [false]\n@mixin vertical-margins($multiplier: false) {\n    $m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\n    hr {\n        margin-top: if($m, space($m), space());\n        margin-bottom: if($m, space($m), space());\n    }\n\n    caption {\n        margin-bottom: if(\n            $m,\n            calc(#{space($m)} * 0.25),\n            calc(#{space()} * 0.25)\n        );\n    }\n\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6 {\n        @include control-margins(top);\n\n        margin-top: if(\n            $m,\n            calc(var(--space-top-h) * #{$m}),\n            var(--space-top-h)\n        );\n        margin-bottom: if(\n            $m,\n            calc(var(--space-bottom-h) * #{$m}),\n            var(--space-bottom-h)\n        );\n    }\n\n    address,\n    blockquote,\n    canvas,\n    dl,\n    fieldset,\n    figure,\n    form,\n    hr,\n    noscript,\n    ol,\n    p,\n    pre,\n    table,\n    ul,\n    video {\n        margin-bottom: if($m, space($m), space());\n    }\n}\n\n/// @param {1|2|3|4|5} $type\n/// @param {<number>|false} $margins-multiplier [false]\n@mixin h($type: 1, $margins-multiplier: false) {\n    font-weight: var(--font-weight-heading);\n    font-size: var(--font-size-h#{$type});\n    font-family: var(--font-stack-heading);\n    line-height: var(--line-height-h#{$type});\n\n    @if is-nonneg-unitless-number($margins-multiplier) {\n        $m: $margins-multiplier;\n\n        @include control-margins(top);\n\n        margin-top: if(\n            $m,\n            calc(var(--space-top-h) * #{$m}),\n            var(--space-top-h)\n        );\n        margin-bottom: if(\n            $m,\n            calc(var(--space-bottom-h) * #{$m}),\n            var(--space-bottom-h)\n        );\n    }\n}\n\n///\n@mixin big() {\n    font-size: var(--font-size-big);\n    line-height: var(--line-height-big);\n}\n\n///\n@mixin xbig() {\n    font-size: var(--font-size-xbig);\n    line-height: var(--line-height-xbig);\n}\n\n///\n@mixin xxbig() {\n    font-size: var(--font-size-xxbig);\n    line-height: var(--line-height-xxbig);\n}\n\n///\n@mixin small() {\n    font-size: var(--font-size-small);\n    line-height: var(--line-height-small);\n}\n\n///\n@mixin xsmall() {\n    font-size: var(--font-size-xsmall);\n    line-height: var(--line-height-xsmall);\n}\n\n///\n@mixin xxsmall() {\n    font-size: var(--font-size-xxsmall);\n    line-height: var(--line-height-xxsmall);\n}\n\n/// Hides element when viewport is as wide or wider than `$breakpoint`\n@mixin hide($breakpoint: s) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            display: none;\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            display: none;\n        }\n    }\n}\n\n/// @param {<number>} $multiplier [1]\n/// @param {<bool>} $important [false]\n@mixin mgbch($multiplier: 1, $important: false) {\n    $m: if(is-unitless-number($multiplier), $multiplier, 1);\n    $i: if($important == true, $important, false);\n\n    margin-top: space(-$m) if($i, !important, null);\n\n    > * {\n        margin-top: space($m) if($i, !important, null);\n    }\n}\n\n/// @param {row|col} $type [row]\n/// @param {<number>|false} $multiplier [false]\n@mixin row-alleys($type: row, $multiplier: false) {\n    $m: false;\n\n    @if index(map-keys($alley-sizes), $multiplier) {\n        $m: map-get($alley-sizes, $multiplier);\n    } @else if is-nonneg-unitless-number($multiplier) {\n        $m: $multiplier;\n    }\n\n    @if $type == row {\n        margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n        margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    } @else if $type == col {\n        padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n        padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    }\n}\n\n///\n@mixin row($alley-multiplier: false) {\n    @include row-alleys(row, $alley-multiplier);\n\n    display: flex;\n    flex-wrap: wrap;\n\n    > * {\n        @include row-alleys(col, $alley-multiplier);\n    }\n}\n\n/// @access private\n@mixin row-alley-styles($alley-multiplier) {\n    @include row-alleys(row, $alley-multiplier);\n\n    > * {\n        @include row-alleys(col, $alley-multiplier);\n    }\n}\n\n///\n@mixin row-alley($alley-multiplier, $breakpoint: false) {\n    $m: false;\n\n    @if index(map-keys($alley-sizes), $alley-multiplier) {\n        $m: map-get($alley-sizes, $alley-multiplier);\n    } @else if is-nonneg-unitless-number($alley-multiplier) {\n        $m: $alley-multiplier;\n    }\n\n    @if $m {\n        @if index(map-keys($breakpoints), $breakpoint) {\n            @include min(map-get($breakpoints, $breakpoint)) {\n                @include row-alley-styles($m);\n            }\n        } @else if is-nonneg-unit-number($breakpoint) {\n            @include min($breakpoint) {\n                @include row-alley-styles($m);\n            }\n        } @else {\n            @include row-alley-styles($m);\n        }\n    }\n}\n\n///\n@mixin col-width($column-width, $breakpoint: false) {\n    @if index(map-keys($columns), $column-width) {\n        @if index(map-keys($breakpoints), $breakpoint) {\n            @include min(map-get($breakpoints, $breakpoint)) {\n                width: map-get($columns, $column-width);\n            }\n        } @else if is-nonneg-unit-number($breakpoint) {\n            @include min($breakpoint) {\n                width: map-get($columns, $column-width);\n            }\n        } @else {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unitless-number($column-width) {\n        @if index(map-keys($breakpoints), $breakpoint) {\n            @include min(map-get($breakpoints, $breakpoint)) {\n                width: percentage($column-width);\n            }\n        } @else if is-nonneg-unit-number($breakpoint) {\n            @include min($breakpoint) {\n                width: percentage($column-width);\n            }\n        } @else {\n            width: percentage($column-width);\n        }\n    }\n}\n\n/// Utility to clear floats\n@mixin clearfix() {\n    &:before,\n    &:after {\n        display: table;\n        clear: both;\n        width: 100%;\n        content: '';\n    }\n}\n\n///\n@mixin figcaption() {\n    padding-top: space(0.375);\n    color: var(--color-contrast-medium);\n    text-align: center;\n    font-size: var(--font-size-xsmall);\n}\n\n/// Unsets border radius\n@mixin sq() {\n    border-radius: unset;\n}\n\n///\n@mixin ellipsis() {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n","//\n// Strings\n//\n//\n\n/// Joins `$list` items into a `$glue` separated string and uses an optional `$closer` before the final item.\n/// @param {<list>} $list\n/// @param {<any>} $glue ['']\n/// @param {<any>} $closer [null]\n/// @param {<bool>} $quote-strings [false]\n@function list-to-string(\n    $list,\n    $glue: '',\n    $closer: null,\n    $quote-strings: true\n) {\n    $output: null;\n    $last-item: null;\n    $last-item-quoted: false;\n\n    @if type-of($list) != list {\n        @error '`#{$list}` is not a valid list.';\n    }\n\n    @for $i from 1 through length($list) {\n        $item: nth($list, $i);\n\n        @if type-of($item) == list {\n            @if $i == length($list) {\n                $last-item: nth($item, -1);\n                $is-nested-list: type-of($last-item) == list;\n\n                @while $is-nested-list {\n                    $last-item: nth($last-item, -1);\n\n                    @if type-of($last-item) != list {\n                        $is-nested-list: false;\n                        $last-item-quoted: type-of($last-item) ==\n                            string and\n                            $quote-strings;\n                    }\n                }\n\n                $output: #{$output}#{list-to-string(\n                        $item,\n                        $glue,\n                        null,\n                        $quote-strings\n                    )};\n            } @else {\n                $output: #{$output}#{list-to-string(\n                        $item,\n                        $glue,\n                        null,\n                        $quote-strings\n                    )}#{$glue};\n            }\n        } @else {\n            $item: if(\n                type-of($item) == string and $quote-strings,\n                '\"#{$item}\"',\n                $item\n            );\n\n            @if $i == length($list) {\n                $last-item: $item;\n                $last-item-quoted: type-of($last-item) ==\n                    string and\n                    $quote-strings;\n\n                $output: #{$output}#{$item};\n            } @else {\n                $output: #{$output}#{$item}#{$glue};\n            }\n        }\n    }\n\n    @if $closer != null {\n        $offset: if($last-item-quoted, 2, 0);\n        $find: #{$glue}#{$last-item};\n        $slice-1: str-slice($output, 1, -(str-length(#{$find}) + 1 + $offset));\n        $slice-2: str-slice($output, -(str-length(#{$last-item}) + $offset));\n        $output: #{$slice-1}#{$closer}#{$slice-2};\n    }\n\n    @return $output;\n}\n\n//\n// Colors\n//\n//\n\n/// Returns a `$dark` or `$light` color depending on the lightness `$threshold` of the `$bg-color`.\n/// @param {<color>} $bg-color\n/// @param {<number>} $threshold [60]\n/// @param {<color>} $dark [black]\n/// @param {<color>} $light [white]\n@function auto-color-contrast(\n    $bg-color,\n    $threshold: 84,\n    $dark: black,\n    $light: white\n) {\n    @if type-of($bg-color) != color {\n        @error '`#{$bg-color}` is not a valid color.';\n    }\n\n    @if not is-nonneg-number($threshold) {\n        @error '`#{$threshold}` is not a nonnegative number.';\n    }\n\n    @if lightness($bg-color) > $threshold {\n        @return $dark;\n    } @else {\n        @return $light;\n    }\n}\n\n//\n// Numbers\n//\n//\n\n/// Ceils `$number` to given decimal `$places`.\n/// @param {<number>} $number\n/// @param {<number>} $places\n@function decimal-ceil($number, $places: 3) {\n    @return decimal-round($number, $places, ceil);\n}\n\n/// Floors `$number` to given decimal `$places`.\n/// @param {<number>} $number\n/// @param {<number>} $places\n@function decimal-floor($number, $places: 3) {\n    @return decimal-round($number, $places, floor);\n}\n\n/// Rounds, ceils or floors `$number` to given decimal `$places`.\n/// @param {<number>} $number\n/// @param {<number>} $places\n/// @param {<any> (round, ceil, floor)} $mode [round]\n@function decimal-round($number, $places: 3, $mode: round) {\n    $n: 1;\n\n    @if not is-number($number) {\n        @return $number;\n    }\n\n    @if not is-number($places) {\n        @return $number;\n    }\n\n    @if $places > 0 and $places < 20 {\n        @for $i from 1 through $places {\n            $n: $n * 10;\n        }\n    }\n\n    @if $mode == round {\n        @return round($number * $n) / $n;\n    } @else if $mode == ceil {\n        @return ceil($number * $n) / $n;\n    } @else if $mode == floor {\n        @return floor($number * $n) / $n;\n    } @else {\n        @return $number;\n    }\n}\n\n/// Removes the unit from `$number`.\n/// @param {<number>} $number\n@function strip-unit($number) {\n    @if type-of($number) == 'number' and not unitless($number) {\n        @return $number / ($number * 0 + 1);\n    }\n\n    @return $number;\n}\n\n/// Converts `$size-in-rem` to pixels based on `$font-size-base`.\n/// @param {<number>} $size-in-rem\n/// @param {<number>} $font-size-base\n@function rem-to-pixels($size-in-rem, $font-size-base) {\n    @return strip-unit($size-in-rem) * $font-size-base;\n}\n\n//\n// Conditionals\n//\n//\n\n/// Checks if `$value` is a boolean.\n/// @param {<any>} $value\n@function is-bool($value) {\n    @return type-of($value) == bool;\n}\n\n/// Checks if `$value` is a color.\n/// @param {<any>} $value\n@function is-color($value) {\n    @return type-of($value) == color;\n}\n\n/// Checks if `$value` is a string.\n/// @param {<any>} $value\n@function is-string($value) {\n    @return type-of($value) == string;\n}\n\n/// Checks if `$value` is a number.\n/// @param {<any>} $value\n@function is-number($value) {\n    @return type-of($value) == number;\n}\n\n/// Checks if `$value` is a number with a unit.\n/// @param {<any>} $value\n/// @param {<bool>} $warn [false]\n@function is-unit-number($value, $warn: false) {\n    @if is-number($value) and index($lengths, unit($value)) {\n        @return true;\n    }\n\n    @if $warn == true {\n        @warn '`$value` must be a <length>. #{show-param-value($value)}';\n    }\n\n    @return false;\n}\n\n/// Checks if `$value` is a unitless number.\n/// @param {<any>} $value\n/// @param {<bool>} $warn [false]\n@function is-unitless-number($value, $warn: false) {\n    @if is-number($value) and unitless($value) {\n        @return true;\n    }\n\n    @if $warn == true {\n        @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n    }\n\n    @return false;\n}\n\n/// Checks if `$value` is a nonnegative number.\n/// @param {<any>} $value\n/// @param {<bool>} $warn [false]\n@function is-nonneg-number($value, $warn: false) {\n    @if is-number($value) and $value > -1 {\n        @return true;\n    }\n\n    @if $warn == true {\n        @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n    }\n\n    @return false;\n}\n\n/// Checks if `$value` is a nonnegative number with a unit.\n/// @param {<any>} $value\n/// @param {<bool>} $warn [false]\n@function is-nonneg-unit-number($value, $warn: false) {\n    @if is-nonneg-number($value) and index($lengths, unit($value)) {\n        @return true;\n    }\n\n    @if $warn == true {\n        @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n    }\n\n    @return false;\n}\n\n/// Checks if `$value` is a nonnegative, unitless number.\n/// @param {<any>} $value\n/// @param {<bool>} $warn [false]\n@function is-nonneg-unitless-number($value, $warn: false) {\n    @if is-nonneg-number($value) and unitless($value) {\n        @return true;\n    }\n\n    @if $warn == true {\n        @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n    }\n\n    @return false;\n}\n\n/// Checks if `$value` is a map.\n/// @param {<any>} $value\n@function is-map($value) {\n    @return type-of($value) == map;\n}\n\n/// Checks if `$value` is a list.\n/// @param {<any>} $value\n@function is-list($value) {\n    @return type-of($value) == list;\n}\n\n/// Checks if `$needle` is found in `$haystack`.\n/// @param {<any>|number} $needle\n/// @param {<list>} $haystack\n/// @param {<bool>} $warn [false]\n@function is-in-list($needle, $haystack, $warn: false) {\n    @if index($haystack, $needle) {\n        @return true;\n    }\n\n    @if $warn == true {\n        @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n    }\n\n    @return false;\n}\n\n//\n// Utilities\n//\n//\n\n/// Returns a formatted string containing `$value` and its type.\n/// @param {<any>} $value\n/// @access private\n@function show-param-value($value) {\n    $value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n    @return 'Received: <#{type-of($value)}: #{$value}>.';\n}\n\n/// Returns a formatted string of valid `$values`.\n/// @param {<list>} $values\n/// @access private\n@function format-valid-values($values) {\n    @return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n}\n\n/// @param {<number>} $multiplier\n@function space($multiplier: 1) {\n    $m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n    @return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n}\n\n/// @param {<number>} $multiplier\n@function alley($multiplier: 1) {\n    $m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n    @return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n}\n","//\n// Fonts\n//\n//\n\n///\n$font-stack-serif: Constantia, 'Lucida Bright', Lucidabright, Georgia, serif !default;\n///\n$font-stack-sansserif: 'Helvetica Neue', Helvetica, Arial, sans-serif !default;\n///\n$font-stack-general: $font-stack-sansserif !default;\n///\n$font-stack-heading: $font-stack-general !default;\n///\n$font-stack-monospace: Consolas, 'Ubuntu Mono', 'Lucida Console', 'Courier New',\n    Courier, monospace !default;\n///\n$font-stacks: () !default;\n///\n$font-stacks: map-merge(\n    (\n        serif: $font-stack-serif,\n        sansserif: $font-stack-sansserif,\n        general: $font-stack-general,\n        heading: $font-stack-heading,\n        monospace: $font-stack-monospace,\n    ),\n    $font-stacks\n);\n///\n$font-size-base: 16px !default; // must be in px\n///\n$font-size-general: 1rem !default;\n///\n$font-size-big: 1.125em !default;\n///\n$font-size-xbig: 1.266em !default;\n///\n$font-size-xxbig: 1.424em !default;\n///\n$font-size-small: 0.889em !default;\n///\n$font-size-xsmall: 0.79em !default;\n///\n$font-size-xxsmall: 0.702em !default;\n///\n$font-size-h1: 1.802em !default;\n///\n$font-size-h2: 1.602em !default;\n///\n$font-size-h3: 1.424em !default;\n///\n$font-size-h4: 1.266em !default;\n///\n$font-size-h5: 1.125em !default;\n///\n$font-sizes: () !default;\n///\n$font-sizes: map-merge(\n    (\n        base: $font-size-base,\n        general: $font-size-general,\n        big: $font-size-big,\n        xbig: $font-size-xbig,\n        xxbig: $font-size-xxbig,\n        small: $font-size-small,\n        xsmall: $font-size-xsmall,\n        xxsmall: $font-size-xxsmall,\n        h1: $font-size-h1,\n        h2: $font-size-h2,\n        h3: $font-size-h3,\n        h4: $font-size-h4,\n        h5: $font-size-h5,\n    ),\n    $font-sizes\n);\n///\n$font-weight-normal: 400 !default;\n///\n$font-weight-bold: 700 !default;\n///\n$font-weight-heading: $font-weight-bold !default;\n///\n$font-weights: () !default;\n///\n$font-weights: map-merge(\n    (\n        normal: $font-weight-normal,\n        bold: $font-weight-bold,\n        heading: $font-weight-heading,\n    ),\n    $font-weights\n);\n///\n$line-height-general: 1.5 !default;\n///\n$line-height-big: 1.45 !default;\n///\n$line-height-xbig: 1.4 !default;\n///\n$line-height-xxbig: 1.35 !default;\n///\n$line-height-small: 1.55 !default;\n///\n$line-height-xsmall: 1.6 !default;\n///\n$line-height-xxsmall: 1.65 !default;\n///\n$line-height-h1: 1.25 !default;\n///\n$line-height-h2: 1.3 !default;\n///\n$line-height-h3: 1.35 !default;\n///\n$line-height-h4: 1.4 !default;\n///\n$line-height-h5: 1.45 !default;\n///\n$line-height-general-in-rem: $line-height-general * 1rem !default;\n///\n$line-height-h1-in-rem: $line-height-h1 * 1rem !default;\n///\n$line-height-h2-in-rem: $line-height-h2 * 1rem !default;\n///\n$line-height-h3-in-rem: $line-height-h3 * 1rem !default;\n///\n$line-height-h4-in-rem: $line-height-h4 * 1rem !default;\n///\n$line-height-h5-in-rem: $line-height-h5 * 1rem !default;\n///\n$line-height-big-in-rem: $line-height-big * 1rem !default;\n///\n$line-height-xbig-in-rem: $line-height-xbig * 1rem !default;\n///\n$line-height-xxbig-in-rem: $line-height-xxbig * 1rem !default;\n///\n$line-height-small-in-rem: $line-height-small * 1rem !default;\n///\n$line-height-xsmall-in-rem: $line-height-xsmall * 1rem !default;\n///\n$line-height-xxsmall-in-rem: $line-height-xxsmall * 1rem !default;\n///\n$line-heights: () !default;\n///\n$line-heights: map-merge(\n    (\n        general: $line-height-general,\n        big: $line-height-big,\n        xbig: $line-height-xbig,\n        xxbig: $line-height-xxbig,\n        small: $line-height-small,\n        xsmall: $line-height-xsmall,\n        xxsmall: $line-height-xxsmall,\n        h1: $line-height-h1,\n        h2: $line-height-h2,\n        h3: $line-height-h3,\n        h4: $line-height-h4,\n        h5: $line-height-h5,\n        general-in-rem: $line-height-general-in-rem,\n        big-in-rem: $line-height-big-in-rem,\n        xbig-in-rem: $line-height-xbig-in-rem,\n        xxbig-in-rem: $line-height-xxbig-in-rem,\n        small-in-rem: $line-height-small-in-rem,\n        xsmall-in-rem: $line-height-xsmall-in-rem,\n        xxsmall-in-rem: $line-height-xxsmall-in-rem,\n        h1-in-rem: $line-height-h1-in-rem,\n        h2-in-rem: $line-height-h2-in-rem,\n        h3-in-rem: $line-height-h3-in-rem,\n        h4-in-rem: $line-height-h4-in-rem,\n        h5-in-rem: $line-height-h5-in-rem,\n    ),\n    $line-heights\n);\n\n//\n// Colors\n//\n//\n\n///\n$color-primary: #209ed5 !default;\n///\n$color-dark-accent: #002f5b !default;\n///\n$color-light-accent: #e6f4f1 !default;\n///\n$color-background: #ffffff !default;\n///\n$color-contrast: #252428 !default;\n///\n$color-contrast-medium: #8c8c8c !default;\n///\n$color-contrast-low: #bfbfbf !default;\n///\n$color-contrast-lower: #d9d9d9 !default;\n///\n$color-contrast-lowest: #f2f2f2 !default;\n///\n$color-contrast-high: #737373 !default;\n///\n$color-contrast-higher: #595959 !default;\n///\n$color-contrast-highest: #404040 !default;\n///\n$color-success: #27ae60 !default;\n///\n$color-alert: #c0392b !default;\n///\n$color-warning: #d35400 !default;\n///\n$color-highlight: #f1c40f !default;\n///\n$color-dribbble: #ea4c89 !default;\n///\n$color-facebook: #3b5998 !default;\n///\n$color-flickr: #ff0084 !default;\n///\n$color-instagram: #517fa4 !default;\n///\n$color-linkedin: #0077b5 !default;\n///\n$color-medium: #00ab6b !default;\n///\n$color-pinterest: #bd081c !default;\n///\n$color-rss: #f26522 !default;\n///\n$color-tumblr: #35465c !default;\n///\n$color-twitter: #55acee !default;\n///\n$color-youtube: #b31217 !default;\n///\n$colors: () !default;\n///\n$colors: map-merge(\n    (\n        primary: $color-primary,\n        dark-accent: $color-dark-accent,\n        light-accent: $color-light-accent,\n        background: $color-background,\n        contrast: $color-contrast,\n        contrast-medium: $color-contrast-medium,\n        contrast-low: $color-contrast-low,\n        contrast-lower: $color-contrast-lower,\n        contrast-lowest: $color-contrast-lowest,\n        contrast-high: $color-contrast-high,\n        contrast-higher: $color-contrast-higher,\n        contrast-highest: $color-contrast-highest,\n        success: $color-success,\n        alert: $color-alert,\n        warning: $color-warning,\n        highlight: $color-highlight,\n        dribbble: $color-dribbble,\n        facebook: $color-facebook,\n        flickr: $color-flickr,\n        instagram: $color-instagram,\n        linkedin: $color-linkedin,\n        medium: $color-medium,\n        pinterest: $color-pinterest,\n        rss: $color-rss,\n        tumblr: $color-tumblr,\n        twitter: $color-twitter,\n        youtube: $color-youtube,\n    ),\n    $colors\n);\n\n//\n// Spacing\n//\n//\n\n///\n$space: 1rem !default;\n///\n$alley: 30px !default;\n///\n$p-inline-t: 0.125em !default;\n///\n$p-inline-r: 0.25em !default;\n///\n$p-inline-b: 0.125em !default;\n///\n$p-inline-l: 0.25em !default;\n///\n$p-box-t: 0.75em !default;\n///\n$p-box-r: 1.25em !default;\n///\n$p-box-b: 0.75em !default;\n///\n$p-box-l: 1rem !default;\n///\n$p-message-t: 0.75em !default;\n///\n$p-message-r: 3.25em !default;\n///\n$p-message-b: 0.75em !default;\n///\n$p-message-l: 1em !default;\n///\n$p-table-t: 0.5em !default;\n///\n$p-table-r: 2em !default;\n///\n$p-table-b: 0.5em !default;\n///\n$p-table-l: 0 !default;\n///\n$p-button-t: 0.375em !default;\n///\n$p-button-r: 1em !default;\n///\n$p-button-b: 0.375em !default;\n///\n$p-button-l: 1em !default;\n///\n$p-input-t: 0.375em !default;\n///\n$p-input-r: 0.75em !default;\n///\n$p-input-b: 0.375em !default;\n///\n$p-input-l: 0.75em !default;\n///\n$alley-sizes: () !default;\n///\n$alley-sizes: map-merge(\n    (\n        noalley: 0,\n        tightest: 0.25,\n        tighter: 0.5,\n        tight: 0.75,\n        comfy: 1,\n        loose: 1.25,\n        looser: 1.5,\n        loosest: 1.75,\n    ),\n    $alley-sizes\n);\n\n//\n// Transitions and Animations\n//\n//\n\n///\n$ease-in-out-expo: cubic-bezier(1, 0, 0, 1);\n///\n$ease-in-out-quart: cubic-bezier(0.77, 0, 0.175, 1);\n///\n$default-easing: $ease-in-out-expo !default;\n\n//\n// Etcetera\n//\n//\n\n///\n$border-size: 1px !default;\n///\n$max-site-width: 1200px !default;\n\n//\n// Breakpoints\n//\n//\n\n///\n$breakpoint-s: 480px !default;\n///\n$breakpoint-m: 768px !default;\n///\n$breakpoint-l: 960px !default;\n///\n$breakpoint-xl: 1200px !default;\n///\n$breakpoints: () !default;\n///\n$breakpoints: map-merge(\n    (\n        s: $breakpoint-s,\n        m: $breakpoint-m,\n        l: $breakpoint-l,\n        xl: $breakpoint-xl,\n    ),\n    $breakpoints\n);\n///\n$columns: () !default;\n///\n$columns: map-merge(\n    (\n        1: percentage(1/12),\n        2: percentage(2/12),\n        3: percentage(3/12),\n        4: percentage(4/12),\n        5: percentage(5/12),\n        6: percentage(6/12),\n        7: percentage(7/12),\n        8: percentage(8/12),\n        9: percentage(9/12),\n        10: percentage(10/12),\n        11: percentage(11/12),\n        12: percentage(12/12),\n        p5: 5%,\n        p10: 10%,\n        p15: 15%,\n        p20: 20%,\n        p25: 25%,\n        p30: 30%,\n        p35: 35%,\n        p40: 40%,\n        p45: 45%,\n        p50: 50%,\n        p55: 55%,\n        p60: 60%,\n        p65: 65%,\n        p70: 70%,\n        p75: 75%,\n        p80: 80%,\n        p85: 85%,\n        p90: 90%,\n        p95: 95%,\n        p100: 100%,\n    ),\n    $columns\n);\n\n//\n// Internals\n//\n//\n\n///\n$lengths-absolute: (cm, mm, in, px, pt, pc);\n///\n$lengths-relative: (em, ex, ch, rem, vw, vh, vmin, vmax, '%');\n///\n$lengths: join($lengths-absolute, $lengths-relative);\n","pre[class*=language-] {\r\n    color:var(--color-contrast);\r\n    font-weight:var(--font-weight-normal);\r\n}\r\n\r\n.token.comment,\r\n.token.prolog,\r\n.token.doctype,\r\n.token.cdata {\r\n    color:slategray;\r\n}\r\n\r\n.token.punctuation {\r\n    color:var(--color-contrast);\r\n}\r\n\r\n.namespace {\r\n    opacity:0.7;\r\n}\r\n\r\n.token.property,\r\n.token.tag,\r\n.token.boolean,\r\n.token.number,\r\n.token.constant,\r\n.token.symbol,\r\n.token.deleted {\r\n    color:#990055;\r\n}\r\n\r\n.token.selector,\r\n.token.attr-name,\r\n.token.string,\r\n.token.char,\r\n.token.builtin,\r\n.token.inserted {\r\n    color:#669900;\r\n}\r\n\r\n.token.operator,\r\n.token.entity,\r\n.token.url,\r\n.language-css .token.string,\r\n.style .token.string {\r\n    background:hsla(0, 0%, 100%, 0.5);\r\n    color:#9a6e3a;\r\n}\r\n\r\n.token.atrule,\r\n.token.attr-value,\r\n.token.keyword {\r\n    color:#0077aa;\r\n}\r\n\r\n.token.function,\r\n.token.class-name {\r\n    color:#dd4a68;\r\n}\r\n\r\n.token.regex,\r\n.token.important,\r\n.token.variable {\r\n    color:#ee9900;\r\n}\r\n\r\n.token.important,\r\n.token.bold {\r\n    font-weight:bold;\r\n}\r\n\r\n.token.italic {\r\n    font-style:italic;\r\n}\r\n\r\n.token.entity {\r\n    cursor:help;\r\n}\r\n"]}