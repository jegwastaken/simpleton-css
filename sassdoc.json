{
  "mixins": [
    {
      "description": "",
      "commentRange": {
        "start": 1,
        "end": 1
      },
      "context": {
        "type": "mixin",
        "name": "button-styles",
        "code": "@include ellipsis();\n\ndisplay: inline-block;\npadding: var(--padding-button);\nmin-height: calc(var(--min-input-height) + (var(--border-size) * 2));\nborder: none;\nborder-radius: var(--border-radius);\nbackground-color: var(--color-contrast);\ncolor: var(--color-background);\ncursor: pointer;\ntransition: box-shadow 0.25s, color 0.25s;\n\n&[disabled] {\n    cursor: not-allowed;\n    box-shadow: inset 0 0 0 100vh rgba(white, 0.375);\n}\n\na {\n    color: inherit;\n}\n",
        "line": {
          "start": 2,
          "end": 23
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "ellipsis",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 358,
              "end": 358
            },
            "context": {
              "type": "mixin",
              "name": "ellipsis",
              "code": "overflow: hidden;\ntext-overflow: ellipsis;\nwhite-space: nowrap;\n",
              "line": {
                "start": 359,
                "end": 363
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "button-styles",
                  "code": "@include ellipsis();\n\ndisplay: inline-block;\npadding: var(--padding-button);\nmin-height: calc(var(--min-input-height) + (var(--border-size) * 2));\nborder: none;\nborder-radius: var(--border-radius);\nbackground-color: var(--color-contrast);\ncolor: var(--color-background);\ncursor: pointer;\ntransition: box-shadow 0.25s, color 0.25s;\n\n&[disabled] {\n    cursor: not-allowed;\n    box-shadow: inset 0 0 0 100vh rgba(white, 0.375);\n}\n\na {\n    color: inherit;\n}\n",
                  "line": {
                    "start": 2,
                    "end": 23
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_forms.scss",
        "name": "_forms.scss"
      }
    },
    {
      "description": "Converts <code>$aspect-width</code> and <code>$aspect-height</code> to the appropriate bottom padding.\n",
      "commentRange": {
        "start": 1,
        "end": 4
      },
      "context": {
        "type": "mixin",
        "name": "aspect-ratio-to-padding",
        "code": "padding-bottom: percentage($aspect-height / $aspect-width);\n",
        "line": {
          "start": 5,
          "end": 7
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "aspect-width",
          "default": "16"
        },
        {
          "type": "<number>",
          "name": "aspect-height",
          "default": "9"
        }
      ],
      "access": "private",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "Adds styles for a responsive video container.\n",
          "context": {
            "type": "mixin",
            "name": "video-container",
            "code": "@include aspect-ratio-to-padding($aspect-width, $aspect-height);\n\nposition: relative;\ndisplay: block;\nheight: 0;\n\niframe,\nobject,\nembed {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n",
            "line": {
              "start": 12,
              "end": 28
            }
          }
        }
      ]
    },
    {
      "description": "Adds styles for a responsive video container.\n",
      "commentRange": {
        "start": 9,
        "end": 11
      },
      "context": {
        "type": "mixin",
        "name": "video-container",
        "code": "@include aspect-ratio-to-padding($aspect-width, $aspect-height);\n\nposition: relative;\ndisplay: block;\nheight: 0;\n\niframe,\nobject,\nembed {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n",
        "line": {
          "start": 12,
          "end": 28
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "aspect-width",
          "default": "16"
        },
        {
          "type": "<number>",
          "name": "aspect-height",
          "default": "9"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "aspect-ratio-to-padding",
          "autofill": true,
          "item": {
            "description": "Converts <code>$aspect-width</code> and <code>$aspect-height</code> to the appropriate bottom padding.\n",
            "commentRange": {
              "start": 1,
              "end": 4
            },
            "context": {
              "type": "mixin",
              "name": "aspect-ratio-to-padding",
              "code": "padding-bottom: percentage($aspect-height / $aspect-width);\n",
              "line": {
                "start": 5,
                "end": 7
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "aspect-width",
                "default": "16"
              },
              {
                "type": "<number>",
                "name": "aspect-height",
                "default": "9"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Adds styles for a responsive video container.\n",
                "context": {
                  "type": "mixin",
                  "name": "video-container",
                  "code": "@include aspect-ratio-to-padding($aspect-width, $aspect-height);\n\nposition: relative;\ndisplay: block;\nheight: 0;\n\niframe,\nobject,\nembed {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n",
                  "line": {
                    "start": 12,
                    "end": 28
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Includes <code>@content</code> on screens at least <code>$min-width</code> wide.\n",
      "commentRange": {
        "start": 30,
        "end": 31
      },
      "context": {
        "type": "mixin",
        "name": "min",
        "code": "@media (min-width: $min-width) {\n    @content;\n}\n",
        "line": {
          "start": 32,
          "end": 36
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "min-width"
        }
      ],
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
          "context": {
            "type": "mixin",
            "name": "hide",
            "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
            "line": {
              "start": 214,
              "end": 224
            }
          }
        },
        {
          "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
          "context": {
            "type": "mixin",
            "name": "hide",
            "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
            "line": {
              "start": 214,
              "end": 224
            }
          }
        }
      ]
    },
    {
      "description": "Includes <code>@content</code> on screens up to <code>$max-width</code> wide.\n",
      "commentRange": {
        "start": 38,
        "end": 39
      },
      "context": {
        "type": "mixin",
        "name": "max",
        "code": "@media (max-width: $max-width) {\n    @content;\n}\n",
        "line": {
          "start": 40,
          "end": 44
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "max-width"
        }
      ],
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Includes <code>@content</code> on screens <code>mix-width</code> to <code>$max-width</code> wide.\n",
      "commentRange": {
        "start": 46,
        "end": 48
      },
      "context": {
        "type": "mixin",
        "name": "min-max",
        "code": "@media (min-width: $min-width) and (max-width: $max-width) {\n    @content;\n}\n",
        "line": {
          "start": 49,
          "end": 53
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "min-width"
        },
        {
          "type": "<number>",
          "name": "max-width"
        }
      ],
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Includes <code>@content</code> for ie9 and above.\n",
      "commentRange": {
        "start": 55,
        "end": 55
      },
      "context": {
        "type": "mixin",
        "name": "ie9plus",
        "code": "// @formatter:off\n@media (min-width: 0\\0) and (min-resolution: +72dpi) {\n    @content;\n}\n// @formatter:on\n",
        "line": {
          "start": 56,
          "end": 62
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Includes <code>@content</code> for ie10 and above.\n",
      "commentRange": {
        "start": 64,
        "end": 64
      },
      "context": {
        "type": "mixin",
        "name": "ie10plus",
        "code": "@media (-ms-high-contrast: none), (-ms-high-contrast: active) {\n    @content;\n}\n",
        "line": {
          "start": 65,
          "end": 69
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Removes margins if element is the first and/or last child (depending on <code>$scope</code>).\n",
      "commentRange": {
        "start": 71,
        "end": 72
      },
      "context": {
        "type": "mixin",
        "name": "control-margins",
        "code": "$scope-y: $scope == vertical or $scope == all;\n$scope-x: $scope == horizontal or $scope == all;\n\n@if $scope-y or $scope == top {\n    &:first-child:not(.f-margins) {\n        margin-top: 0;\n    }\n}\n\n@if $scope-x or $scope == right {\n    &:last-child:not(.f-margins) {\n        margin-right: 0;\n    }\n}\n\n@if $scope-y or $scope == bottom {\n    &:last-child:not(.f-margins) {\n        margin-bottom: 0;\n    }\n}\n\n@if $scope-x or $scope == left {\n    &:first-child:not(.f-margins) {\n        margin-left: 0;\n    }\n}\n",
        "line": {
          "start": 73,
          "end": 100
        }
      },
      "parameter": [
        {
          "type": "<string>",
          "name": "scope",
          "default": "all"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "Removes bottom margins from last children.\n",
          "context": {
            "type": "mixin",
            "name": "controlled",
            "code": "* {\n    @include control-margins(bottom);\n}\n",
            "line": {
              "start": 103,
              "end": 107
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
            "line": {
              "start": 111,
              "end": 157
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
            "line": {
              "start": 111,
              "end": 157
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "h",
            "code": "font-weight: var(--font-weight-heading);\nfont-size: var(--font-size-h#{$type});\nfont-family: var(--font-stack-heading);\nline-height: var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m: $margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
            "line": {
              "start": 161,
              "end": 175
            }
          }
        }
      ]
    },
    {
      "description": "Removes bottom margins from last children.\n",
      "commentRange": {
        "start": 102,
        "end": 102
      },
      "context": {
        "type": "mixin",
        "name": "controlled",
        "code": "* {\n    @include control-margins(bottom);\n}\n",
        "line": {
          "start": 103,
          "end": 107
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "control-margins",
          "autofill": true,
          "item": {
            "description": "Removes margins if element is the first and/or last child (depending on <code>$scope</code>).\n",
            "commentRange": {
              "start": 71,
              "end": 72
            },
            "context": {
              "type": "mixin",
              "name": "control-margins",
              "code": "$scope-y: $scope == vertical or $scope == all;\n$scope-x: $scope == horizontal or $scope == all;\n\n@if $scope-y or $scope == top {\n    &:first-child:not(.f-margins) {\n        margin-top: 0;\n    }\n}\n\n@if $scope-x or $scope == right {\n    &:last-child:not(.f-margins) {\n        margin-right: 0;\n    }\n}\n\n@if $scope-y or $scope == bottom {\n    &:last-child:not(.f-margins) {\n        margin-bottom: 0;\n    }\n}\n\n@if $scope-x or $scope == left {\n    &:first-child:not(.f-margins) {\n        margin-left: 0;\n    }\n}\n",
              "line": {
                "start": 73,
                "end": 100
              }
            },
            "parameter": [
              {
                "type": "<string>",
                "name": "scope",
                "default": "all"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Removes bottom margins from last children.\n",
                "context": {
                  "type": "mixin",
                  "name": "controlled",
                  "code": "* {\n    @include control-margins(bottom);\n}\n",
                  "line": {
                    "start": 103,
                    "end": 107
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight: var(--font-weight-heading);\nfont-size: var(--font-size-h#{$type});\nfont-family: var(--font-stack-heading);\nline-height: var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m: $margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                  "line": {
                    "start": 161,
                    "end": 175
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Sets default vertical margins for selected elements\n",
      "commentRange": {
        "start": 109,
        "end": 110
      },
      "context": {
        "type": "mixin",
        "name": "vertical-margins",
        "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
        "line": {
          "start": 111,
          "end": 157
        }
      },
      "parameter": [
        {
          "type": "<number>|false",
          "name": "multiplier",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "control-margins",
          "autofill": true,
          "item": {
            "description": "Removes margins if element is the first and/or last child (depending on <code>$scope</code>).\n",
            "commentRange": {
              "start": 71,
              "end": 72
            },
            "context": {
              "type": "mixin",
              "name": "control-margins",
              "code": "$scope-y: $scope == vertical or $scope == all;\n$scope-x: $scope == horizontal or $scope == all;\n\n@if $scope-y or $scope == top {\n    &:first-child:not(.f-margins) {\n        margin-top: 0;\n    }\n}\n\n@if $scope-x or $scope == right {\n    &:last-child:not(.f-margins) {\n        margin-right: 0;\n    }\n}\n\n@if $scope-y or $scope == bottom {\n    &:last-child:not(.f-margins) {\n        margin-bottom: 0;\n    }\n}\n\n@if $scope-x or $scope == left {\n    &:first-child:not(.f-margins) {\n        margin-left: 0;\n    }\n}\n",
              "line": {
                "start": 73,
                "end": 100
              }
            },
            "parameter": [
              {
                "type": "<string>",
                "name": "scope",
                "default": "all"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Removes bottom margins from last children.\n",
                "context": {
                  "type": "mixin",
                  "name": "controlled",
                  "code": "* {\n    @include control-margins(bottom);\n}\n",
                  "line": {
                    "start": 103,
                    "end": 107
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight: var(--font-weight-heading);\nfont-size: var(--font-size-h#{$type});\nfont-family: var(--font-stack-heading);\nline-height: var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m: $margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                  "line": {
                    "start": 161,
                    "end": 175
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
            "commentRange": {
              "start": 277,
              "end": 279
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unitless-number",
              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
              "line": {
                "start": 280,
                "end": 290
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 247,
                    "end": 249
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 250,
                      "end": 260
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 211,
                          "end": 212
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 213,
                            "end": 215
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 325,
                          "end": 327
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 328,
                            "end": 332
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 308,
                                "end": 318
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color-contrast",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 99,
                          "end": 118
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 325,
                    "end": 327
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 328,
                      "end": 332
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 308,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight: var(--font-weight-heading);\nfont-size: var(--font-size-h#{$type});\nfont-family: var(--font-stack-heading);\nline-height: var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m: $margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                  "line": {
                    "start": 161,
                    "end": 175
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 241,
                    "end": 255
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "space",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 341,
              "end": 341
            },
            "context": {
              "type": "function",
              "name": "space",
              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
              "line": {
                "start": 342,
                "end": 346
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "multiplier"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-unitless-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                  "commentRange": {
                    "start": 232,
                    "end": 234
                  },
                  "context": {
                    "type": "function",
                    "name": "is-unitless-number",
                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 235,
                      "end": 245
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 211,
                          "end": 212
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 213,
                            "end": 215
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 325,
                          "end": 327
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 328,
                            "end": 332
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 308,
                                "end": 318
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "function",
                        "name": "space",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                        "line": {
                          "start": 342,
                          "end": 346
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "function",
                        "name": "alley",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                        "line": {
                          "start": 349,
                          "end": 353
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-vertical-margins",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                        "line": {
                          "start": 228,
                          "end": 237
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-vertical-margins",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 228,
                    "end": 237
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-vertical-margins",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 228,
                    "end": 237
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "figcaption",
                  "code": "@include xsmall();\n\npadding-top: space(0.5);\ncolor: var(--color-contrast-medium);\ntext-align: center;\ntext-transform: uppercase;\n",
                  "line": {
                    "start": 344,
                    "end": 351
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 159,
        "end": 160
      },
      "context": {
        "type": "mixin",
        "name": "h",
        "code": "font-weight: var(--font-weight-heading);\nfont-size: var(--font-size-h#{$type});\nfont-family: var(--font-stack-heading);\nline-height: var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m: $margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
        "line": {
          "start": 161,
          "end": 175
        }
      },
      "parameter": [
        {
          "type": "1|2|3|4|5",
          "name": "type"
        },
        {
          "type": "<number>|false",
          "name": "margins-multiplier",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "control-margins",
          "autofill": true,
          "item": {
            "description": "Removes margins if element is the first and/or last child (depending on <code>$scope</code>).\n",
            "commentRange": {
              "start": 71,
              "end": 72
            },
            "context": {
              "type": "mixin",
              "name": "control-margins",
              "code": "$scope-y: $scope == vertical or $scope == all;\n$scope-x: $scope == horizontal or $scope == all;\n\n@if $scope-y or $scope == top {\n    &:first-child:not(.f-margins) {\n        margin-top: 0;\n    }\n}\n\n@if $scope-x or $scope == right {\n    &:last-child:not(.f-margins) {\n        margin-right: 0;\n    }\n}\n\n@if $scope-y or $scope == bottom {\n    &:last-child:not(.f-margins) {\n        margin-bottom: 0;\n    }\n}\n\n@if $scope-x or $scope == left {\n    &:first-child:not(.f-margins) {\n        margin-left: 0;\n    }\n}\n",
              "line": {
                "start": 73,
                "end": 100
              }
            },
            "parameter": [
              {
                "type": "<string>",
                "name": "scope",
                "default": "all"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Removes bottom margins from last children.\n",
                "context": {
                  "type": "mixin",
                  "name": "controlled",
                  "code": "* {\n    @include control-margins(bottom);\n}\n",
                  "line": {
                    "start": 103,
                    "end": 107
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight: var(--font-weight-heading);\nfont-size: var(--font-size-h#{$type});\nfont-family: var(--font-stack-heading);\nline-height: var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m: $margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                  "line": {
                    "start": 161,
                    "end": 175
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
            "commentRange": {
              "start": 277,
              "end": 279
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unitless-number",
              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
              "line": {
                "start": 280,
                "end": 290
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 247,
                    "end": 249
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 250,
                      "end": 260
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 211,
                          "end": 212
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 213,
                            "end": 215
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 325,
                          "end": 327
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 328,
                            "end": 332
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 308,
                                "end": 318
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color-contrast",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 99,
                          "end": 118
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 325,
                    "end": 327
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 328,
                      "end": 332
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 308,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight: var(--font-weight-heading);\nfont-size: var(--font-size-h#{$type});\nfont-family: var(--font-stack-heading);\nline-height: var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m: $margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                  "line": {
                    "start": 161,
                    "end": 175
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 241,
                    "end": 255
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 177,
        "end": 177
      },
      "context": {
        "type": "mixin",
        "name": "big",
        "code": "font-size: var(--font-size-big);\nline-height: var(--line-height-big);\n",
        "line": {
          "start": 178,
          "end": 181
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 183,
        "end": 183
      },
      "context": {
        "type": "mixin",
        "name": "xbig",
        "code": "font-size: var(--font-size-xbig);\nline-height: var(--line-height-xbig);\n",
        "line": {
          "start": 184,
          "end": 187
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 189,
        "end": 189
      },
      "context": {
        "type": "mixin",
        "name": "xxbig",
        "code": "font-size: var(--font-size-xxbig);\nline-height: var(--line-height-xxbig);\n",
        "line": {
          "start": 190,
          "end": 193
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 195,
        "end": 195
      },
      "context": {
        "type": "mixin",
        "name": "small",
        "code": "font-size: var(--font-size-small);\nline-height: var(--line-height-small);\n",
        "line": {
          "start": 196,
          "end": 199
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 201,
        "end": 201
      },
      "context": {
        "type": "mixin",
        "name": "xsmall",
        "code": "font-size: var(--font-size-xsmall);\nline-height: var(--line-height-xsmall);\n",
        "line": {
          "start": 202,
          "end": 205
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "figcaption",
            "code": "@include xsmall();\n\npadding-top: space(0.5);\ncolor: var(--color-contrast-medium);\ntext-align: center;\ntext-transform: uppercase;\n",
            "line": {
              "start": 344,
              "end": 351
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 207,
        "end": 207
      },
      "context": {
        "type": "mixin",
        "name": "xxsmall",
        "code": "font-size: var(--font-size-xxsmall);\nline-height: var(--line-height-xxsmall);\n",
        "line": {
          "start": 208,
          "end": 211
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
      "commentRange": {
        "start": 213,
        "end": 213
      },
      "context": {
        "type": "mixin",
        "name": "hide",
        "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
        "line": {
          "start": 214,
          "end": 224
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "min",
          "autofill": true,
          "item": {
            "description": "Includes <code>@content</code> on screens at least <code>$min-width</code> wide.\n",
            "commentRange": {
              "start": 30,
              "end": 31
            },
            "context": {
              "type": "mixin",
              "name": "min",
              "code": "@media (min-width: $min-width) {\n    @content;\n}\n",
              "line": {
                "start": 32,
                "end": 36
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "min-width"
              }
            ],
            "access": "public",
            "content": "",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
                  "line": {
                    "start": 214,
                    "end": 224
                  }
                }
              },
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
                  "line": {
                    "start": 214,
                    "end": 224
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unit-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
            "commentRange": {
              "start": 262,
              "end": 264
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unit-number",
              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 265,
                "end": 275
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 247,
                    "end": 249
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 250,
                      "end": 260
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 211,
                          "end": 212
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 213,
                            "end": 215
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 325,
                          "end": 327
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 328,
                            "end": 332
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 308,
                                "end": 318
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color-contrast",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 99,
                          "end": 118
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 325,
                    "end": 327
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 328,
                      "end": 332
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 308,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
                  "line": {
                    "start": 214,
                    "end": 224
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 226,
        "end": 227
      },
      "context": {
        "type": "mixin",
        "name": "row-vertical-margins",
        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
        "line": {
          "start": 228,
          "end": 237
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "multiplier",
          "default": "1"
        },
        {
          "type": "<bool>",
          "name": "important",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a unitless number.\n",
            "commentRange": {
              "start": 232,
              "end": 234
            },
            "context": {
              "type": "function",
              "name": "is-unitless-number",
              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 235,
                "end": 245
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 211,
                    "end": 212
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 213,
                      "end": 215
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 325,
                    "end": 327
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 328,
                      "end": 332
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 308,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "function",
                  "name": "space",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                  "line": {
                    "start": 342,
                    "end": 346
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "function",
                  "name": "alley",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                  "line": {
                    "start": 349,
                    "end": 353
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-vertical-margins",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 228,
                    "end": 237
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "space",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 341,
              "end": 341
            },
            "context": {
              "type": "function",
              "name": "space",
              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
              "line": {
                "start": 342,
                "end": 346
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "multiplier"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-unitless-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                  "commentRange": {
                    "start": 232,
                    "end": 234
                  },
                  "context": {
                    "type": "function",
                    "name": "is-unitless-number",
                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 235,
                      "end": 245
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 211,
                          "end": 212
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 213,
                            "end": 215
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 325,
                          "end": 327
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 328,
                            "end": 332
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 308,
                                "end": 318
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "function",
                        "name": "space",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                        "line": {
                          "start": 342,
                          "end": 346
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "function",
                        "name": "alley",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                        "line": {
                          "start": 349,
                          "end": 353
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-vertical-margins",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                        "line": {
                          "start": 228,
                          "end": 237
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-vertical-margins",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 228,
                    "end": 237
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-vertical-margins",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 228,
                    "end": 237
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "figcaption",
                  "code": "@include xsmall();\n\npadding-top: space(0.5);\ncolor: var(--color-contrast-medium);\ntext-align: center;\ntext-transform: uppercase;\n",
                  "line": {
                    "start": 344,
                    "end": 351
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 239,
        "end": 240
      },
      "context": {
        "type": "mixin",
        "name": "row-alleys",
        "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
        "line": {
          "start": 241,
          "end": 255
        }
      },
      "parameter": [
        {
          "type": "row|col",
          "name": "type",
          "default": "row"
        },
        {
          "type": "<number>|false",
          "name": "multiplier",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-nonneg-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
            "commentRange": {
              "start": 277,
              "end": 279
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unitless-number",
              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
              "line": {
                "start": 280,
                "end": 290
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 247,
                    "end": 249
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 250,
                      "end": 260
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 211,
                          "end": 212
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 213,
                            "end": 215
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 325,
                          "end": 327
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 328,
                            "end": 332
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 308,
                                "end": 318
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color-contrast",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 99,
                          "end": 118
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 325,
                    "end": 327
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 328,
                      "end": 332
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 308,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight: var(--font-weight-heading);\nfont-size: var(--font-size-h#{$type});\nfont-family: var(--font-stack-heading);\nline-height: var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m: $margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                  "line": {
                    "start": 161,
                    "end": 175
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 241,
                    "end": 255
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "alley",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 348,
              "end": 348
            },
            "context": {
              "type": "function",
              "name": "alley",
              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
              "line": {
                "start": 349,
                "end": 353
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "multiplier"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-unitless-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                  "commentRange": {
                    "start": 232,
                    "end": 234
                  },
                  "context": {
                    "type": "function",
                    "name": "is-unitless-number",
                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 235,
                      "end": 245
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 211,
                          "end": 212
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 213,
                            "end": 215
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 325,
                          "end": 327
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 328,
                            "end": 332
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 308,
                                "end": 318
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "function",
                        "name": "space",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                        "line": {
                          "start": 342,
                          "end": 346
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "function",
                        "name": "alley",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                        "line": {
                          "start": 349,
                          "end": 353
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-vertical-margins",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                        "line": {
                          "start": 228,
                          "end": 237
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 241,
                    "end": 255
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 241,
                    "end": 255
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 241,
                    "end": 255
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 241,
                    "end": 255
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 241,
                    "end": 255
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 241,
                    "end": 255
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 241,
                    "end": 255
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 241,
                    "end": 255
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row",
            "code": "@include row-alleys(row, $alley-multiplier);\n\ndisplay: flex;\nflex-wrap: wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
            "line": {
              "start": 258,
              "end": 267
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row",
            "code": "@include row-alleys(row, $alley-multiplier);\n\ndisplay: flex;\nflex-wrap: wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
            "line": {
              "start": 258,
              "end": 267
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley-styles",
            "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
            "line": {
              "start": 270,
              "end": 276
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley-styles",
            "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
            "line": {
              "start": 270,
              "end": 276
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 257,
        "end": 257
      },
      "context": {
        "type": "mixin",
        "name": "row",
        "code": "@include row-alleys(row, $alley-multiplier);\n\ndisplay: flex;\nflex-wrap: wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
        "line": {
          "start": 258,
          "end": 267
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "row-alleys",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 239,
              "end": 240
            },
            "context": {
              "type": "mixin",
              "name": "row-alleys",
              "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
              "line": {
                "start": 241,
                "end": 255
              }
            },
            "parameter": [
              {
                "type": "row|col",
                "name": "type",
                "default": "row"
              },
              {
                "type": "<number>|false",
                "name": "multiplier",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-unitless-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                  "commentRange": {
                    "start": 277,
                    "end": 279
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-unitless-number",
                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 280,
                      "end": 290
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-nonneg-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                        "commentRange": {
                          "start": 247,
                          "end": 249
                        },
                        "context": {
                          "type": "function",
                          "name": "is-nonneg-number",
                          "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                          "line": {
                            "start": 250,
                            "end": 260
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          },
                          {
                            "type": "<bool>",
                            "name": "warn",
                            "default": "false"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [
                          {
                            "type": "function",
                            "name": "is-number",
                            "autofill": true,
                            "item": {
                              "description": "Checks if <code>$value</code> is a number.\n",
                              "commentRange": {
                                "start": 211,
                                "end": 212
                              },
                              "context": {
                                "type": "function",
                                "name": "is-number",
                                "code": "@return type-of($value) == number;\n",
                                "line": {
                                  "start": 213,
                                  "end": 215
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "public",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 143,
                                      "end": 169
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 143,
                                      "end": 169
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 220,
                                      "end": 230
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 235,
                                      "end": 245
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 250,
                                      "end": 260
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "function",
                            "name": "show-param-value",
                            "autofill": true,
                            "item": {
                              "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                              "commentRange": {
                                "start": 325,
                                "end": 327
                              },
                              "context": {
                                "type": "function",
                                "name": "show-param-value",
                                "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                "line": {
                                  "start": 328,
                                  "end": 332
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "private",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 220,
                                      "end": 230
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 235,
                                      "end": 245
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 250,
                                      "end": 260
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 265,
                                      "end": 275
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 280,
                                      "end": 290
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-in-list",
                                    "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 308,
                                      "end": 318
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "auto-color-contrast",
                              "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                              "line": {
                                "start": 99,
                                "end": 118
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 325,
                          "end": 327
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 328,
                            "end": 332
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 308,
                                "end": 318
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Sets default vertical margins for selected elements\n",
                      "context": {
                        "type": "mixin",
                        "name": "vertical-margins",
                        "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                        "line": {
                          "start": 111,
                          "end": 157
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "h",
                        "code": "font-weight: var(--font-weight-heading);\nfont-size: var(--font-size-h#{$type});\nfont-family: var(--font-stack-heading);\nline-height: var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m: $margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                        "line": {
                          "start": 161,
                          "end": 175
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 241,
                          "end": 255
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "alley",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 348,
                    "end": 348
                  },
                  "context": {
                    "type": "function",
                    "name": "alley",
                    "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                    "line": {
                      "start": 349,
                      "end": 353
                    }
                  },
                  "parameter": [
                    {
                      "type": "<number>",
                      "name": "multiplier"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-unitless-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a unitless number.\n",
                        "commentRange": {
                          "start": 232,
                          "end": 234
                        },
                        "context": {
                          "type": "function",
                          "name": "is-unitless-number",
                          "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                          "line": {
                            "start": 235,
                            "end": 245
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          },
                          {
                            "type": "<bool>",
                            "name": "warn",
                            "default": "false"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [
                          {
                            "type": "function",
                            "name": "is-number",
                            "autofill": true,
                            "item": {
                              "description": "Checks if <code>$value</code> is a number.\n",
                              "commentRange": {
                                "start": 211,
                                "end": 212
                              },
                              "context": {
                                "type": "function",
                                "name": "is-number",
                                "code": "@return type-of($value) == number;\n",
                                "line": {
                                  "start": 213,
                                  "end": 215
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "public",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 143,
                                      "end": 169
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 143,
                                      "end": 169
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 220,
                                      "end": 230
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 235,
                                      "end": 245
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 250,
                                      "end": 260
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "function",
                            "name": "show-param-value",
                            "autofill": true,
                            "item": {
                              "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                              "commentRange": {
                                "start": 325,
                                "end": 327
                              },
                              "context": {
                                "type": "function",
                                "name": "show-param-value",
                                "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                "line": {
                                  "start": 328,
                                  "end": 332
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "private",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 220,
                                      "end": 230
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 235,
                                      "end": 245
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 250,
                                      "end": 260
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 265,
                                      "end": 275
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 280,
                                      "end": 290
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-in-list",
                                    "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 308,
                                      "end": 318
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "",
                            "context": {
                              "type": "function",
                              "name": "space",
                              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                              "line": {
                                "start": 342,
                                "end": 346
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "function",
                              "name": "alley",
                              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                              "line": {
                                "start": 349,
                                "end": 353
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-vertical-margins",
                              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                              "line": {
                                "start": 228,
                                "end": 237
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 241,
                          "end": 255
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 241,
                          "end": 255
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 241,
                          "end": 255
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 241,
                          "end": 255
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 241,
                          "end": 255
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 241,
                          "end": 255
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 241,
                          "end": 255
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 241,
                          "end": 255
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\ndisplay: flex;\nflex-wrap: wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 258,
                    "end": 267
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\ndisplay: flex;\nflex-wrap: wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 258,
                    "end": 267
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley-styles",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 270,
                    "end": 276
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley-styles",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 270,
                    "end": 276
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 269,
        "end": 269
      },
      "context": {
        "type": "mixin",
        "name": "row-alley-styles",
        "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
        "line": {
          "start": 270,
          "end": 276
        }
      },
      "access": "private",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "row-alleys",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 239,
              "end": 240
            },
            "context": {
              "type": "mixin",
              "name": "row-alleys",
              "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
              "line": {
                "start": 241,
                "end": 255
              }
            },
            "parameter": [
              {
                "type": "row|col",
                "name": "type",
                "default": "row"
              },
              {
                "type": "<number>|false",
                "name": "multiplier",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-unitless-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                  "commentRange": {
                    "start": 277,
                    "end": 279
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-unitless-number",
                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 280,
                      "end": 290
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-nonneg-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                        "commentRange": {
                          "start": 247,
                          "end": 249
                        },
                        "context": {
                          "type": "function",
                          "name": "is-nonneg-number",
                          "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                          "line": {
                            "start": 250,
                            "end": 260
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          },
                          {
                            "type": "<bool>",
                            "name": "warn",
                            "default": "false"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [
                          {
                            "type": "function",
                            "name": "is-number",
                            "autofill": true,
                            "item": {
                              "description": "Checks if <code>$value</code> is a number.\n",
                              "commentRange": {
                                "start": 211,
                                "end": 212
                              },
                              "context": {
                                "type": "function",
                                "name": "is-number",
                                "code": "@return type-of($value) == number;\n",
                                "line": {
                                  "start": 213,
                                  "end": 215
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "public",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 143,
                                      "end": 169
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 143,
                                      "end": 169
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 220,
                                      "end": 230
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 235,
                                      "end": 245
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 250,
                                      "end": 260
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "function",
                            "name": "show-param-value",
                            "autofill": true,
                            "item": {
                              "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                              "commentRange": {
                                "start": 325,
                                "end": 327
                              },
                              "context": {
                                "type": "function",
                                "name": "show-param-value",
                                "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                "line": {
                                  "start": 328,
                                  "end": 332
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "private",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 220,
                                      "end": 230
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 235,
                                      "end": 245
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 250,
                                      "end": 260
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 265,
                                      "end": 275
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 280,
                                      "end": 290
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-in-list",
                                    "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 308,
                                      "end": 318
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "auto-color-contrast",
                              "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                              "line": {
                                "start": 99,
                                "end": 118
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 325,
                          "end": 327
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 328,
                            "end": 332
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 308,
                                "end": 318
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Sets default vertical margins for selected elements\n",
                      "context": {
                        "type": "mixin",
                        "name": "vertical-margins",
                        "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                        "line": {
                          "start": 111,
                          "end": 157
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "h",
                        "code": "font-weight: var(--font-weight-heading);\nfont-size: var(--font-size-h#{$type});\nfont-family: var(--font-stack-heading);\nline-height: var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m: $margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                        "line": {
                          "start": 161,
                          "end": 175
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 241,
                          "end": 255
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "alley",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 348,
                    "end": 348
                  },
                  "context": {
                    "type": "function",
                    "name": "alley",
                    "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                    "line": {
                      "start": 349,
                      "end": 353
                    }
                  },
                  "parameter": [
                    {
                      "type": "<number>",
                      "name": "multiplier"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-unitless-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a unitless number.\n",
                        "commentRange": {
                          "start": 232,
                          "end": 234
                        },
                        "context": {
                          "type": "function",
                          "name": "is-unitless-number",
                          "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                          "line": {
                            "start": 235,
                            "end": 245
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          },
                          {
                            "type": "<bool>",
                            "name": "warn",
                            "default": "false"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [
                          {
                            "type": "function",
                            "name": "is-number",
                            "autofill": true,
                            "item": {
                              "description": "Checks if <code>$value</code> is a number.\n",
                              "commentRange": {
                                "start": 211,
                                "end": 212
                              },
                              "context": {
                                "type": "function",
                                "name": "is-number",
                                "code": "@return type-of($value) == number;\n",
                                "line": {
                                  "start": 213,
                                  "end": 215
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "public",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 143,
                                      "end": 169
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 143,
                                      "end": 169
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 220,
                                      "end": 230
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 235,
                                      "end": 245
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 250,
                                      "end": 260
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "function",
                            "name": "show-param-value",
                            "autofill": true,
                            "item": {
                              "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                              "commentRange": {
                                "start": 325,
                                "end": 327
                              },
                              "context": {
                                "type": "function",
                                "name": "show-param-value",
                                "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                "line": {
                                  "start": 328,
                                  "end": 332
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "private",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 220,
                                      "end": 230
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 235,
                                      "end": 245
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 250,
                                      "end": 260
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 265,
                                      "end": 275
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 280,
                                      "end": 290
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-in-list",
                                    "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 308,
                                      "end": 318
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "",
                            "context": {
                              "type": "function",
                              "name": "space",
                              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                              "line": {
                                "start": 342,
                                "end": 346
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "function",
                              "name": "alley",
                              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                              "line": {
                                "start": 349,
                                "end": 353
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-vertical-margins",
                              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                              "line": {
                                "start": 228,
                                "end": 237
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 241,
                          "end": 255
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 241,
                          "end": 255
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 241,
                          "end": 255
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 241,
                          "end": 255
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 241,
                          "end": 255
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 241,
                          "end": 255
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 241,
                          "end": 255
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 241,
                          "end": 255
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\ndisplay: flex;\nflex-wrap: wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 258,
                    "end": 267
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\ndisplay: flex;\nflex-wrap: wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 258,
                    "end": 267
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley-styles",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 270,
                    "end": 276
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley-styles",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 270,
                    "end": 276
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Utility to clear floats\n",
      "commentRange": {
        "start": 332,
        "end": 332
      },
      "context": {
        "type": "mixin",
        "name": "clearfix",
        "code": "&:before,\n&:after {\n    display: table;\n    clear: both;\n    width: 100%;\n    content: '';\n}\n",
        "line": {
          "start": 333,
          "end": 341
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 343,
        "end": 343
      },
      "context": {
        "type": "mixin",
        "name": "figcaption",
        "code": "@include xsmall();\n\npadding-top: space(0.5);\ncolor: var(--color-contrast-medium);\ntext-align: center;\ntext-transform: uppercase;\n",
        "line": {
          "start": 344,
          "end": 351
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "xsmall",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 201,
              "end": 201
            },
            "context": {
              "type": "mixin",
              "name": "xsmall",
              "code": "font-size: var(--font-size-xsmall);\nline-height: var(--line-height-xsmall);\n",
              "line": {
                "start": 202,
                "end": 205
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "figcaption",
                  "code": "@include xsmall();\n\npadding-top: space(0.5);\ncolor: var(--color-contrast-medium);\ntext-align: center;\ntext-transform: uppercase;\n",
                  "line": {
                    "start": 344,
                    "end": 351
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "space",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 341,
              "end": 341
            },
            "context": {
              "type": "function",
              "name": "space",
              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
              "line": {
                "start": 342,
                "end": 346
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "multiplier"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-unitless-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                  "commentRange": {
                    "start": 232,
                    "end": 234
                  },
                  "context": {
                    "type": "function",
                    "name": "is-unitless-number",
                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 235,
                      "end": 245
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 211,
                          "end": 212
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 213,
                            "end": 215
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 325,
                          "end": 327
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 328,
                            "end": 332
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 308,
                                "end": 318
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "function",
                        "name": "space",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                        "line": {
                          "start": 342,
                          "end": 346
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "function",
                        "name": "alley",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                        "line": {
                          "start": 349,
                          "end": 353
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-vertical-margins",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                        "line": {
                          "start": 228,
                          "end": 237
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 111,
                    "end": 157
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-vertical-margins",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 228,
                    "end": 237
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-vertical-margins",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 228,
                    "end": 237
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "figcaption",
                  "code": "@include xsmall();\n\npadding-top: space(0.5);\ncolor: var(--color-contrast-medium);\ntext-align: center;\ntext-transform: uppercase;\n",
                  "line": {
                    "start": 344,
                    "end": 351
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Unsets border radius\n",
      "commentRange": {
        "start": 353,
        "end": 353
      },
      "context": {
        "type": "mixin",
        "name": "sq",
        "code": "border-radius: unset;\n",
        "line": {
          "start": 354,
          "end": 356
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 358,
        "end": 358
      },
      "context": {
        "type": "mixin",
        "name": "ellipsis",
        "code": "overflow: hidden;\ntext-overflow: ellipsis;\nwhite-space: nowrap;\n",
        "line": {
          "start": 359,
          "end": 363
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "button-styles",
            "code": "@include ellipsis();\n\ndisplay: inline-block;\npadding: var(--padding-button);\nmin-height: calc(var(--min-input-height) + (var(--border-size) * 2));\nborder: none;\nborder-radius: var(--border-radius);\nbackground-color: var(--color-contrast);\ncolor: var(--color-background);\ncursor: pointer;\ntransition: box-shadow 0.25s, color 0.25s;\n\n&[disabled] {\n    cursor: not-allowed;\n    box-shadow: inset 0 0 0 100vh rgba(white, 0.375);\n}\n\na {\n    color: inherit;\n}\n",
            "line": {
              "start": 2,
              "end": 23
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 365,
        "end": 365
      },
      "context": {
        "type": "mixin",
        "name": "flex-column",
        "code": "display: flex;\nflex-direction: column;\n",
        "line": {
          "start": 366,
          "end": 369
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 371,
        "end": 371
      },
      "context": {
        "type": "mixin",
        "name": "screen-reader-only",
        "code": "position: absolute;\noverflow: hidden;\nclip: rect(1px, 1px, 1px, 1px);\nmargin: -1px;\npadding: 0;\nwidth: 1px;\nheight: 1px;\nborder: 0;\nword-wrap: normal;\nclip-path: inset(50%);\n",
        "line": {
          "start": 372,
          "end": 383
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    }
  ],
  "functions": [
    {
      "description": "Joins <code>$list</code> items into a <code>$glue</code> separated string and uses an optional <code>$closer</code> before the final item.\n",
      "commentRange": {
        "start": 6,
        "end": 10
      },
      "context": {
        "type": "function",
        "name": "list-to-string",
        "code": "$output: null;\n$last-item: null;\n$last-item-quoted: false;\n\n@if type-of($list) != list {\n    @error '`#{$list}` is not a valid list.';\n}\n\n@for $i from 1 through length($list) {\n    $item: nth($list, $i);\n\n    @if type-of($item) == list {\n        @if $i == length($list) {\n            $last-item: nth($item, -1);\n            $is-nested-list: type-of($last-item) == list;\n\n            @while $is-nested-list {\n                $last-item: nth($last-item, -1);\n\n                @if type-of($last-item) != list {\n                    $is-nested-list: false;\n                    $last-item-quoted: type-of($last-item) ==\n                        string and\n                        $quote-strings;\n                }\n            }\n\n            $output: #{$output}#{list-to-string(\n                    $item,\n                    $glue,\n                    null,\n                    $quote-strings\n                )};\n        } @else {\n            $output: #{$output}#{list-to-string(\n                    $item,\n                    $glue,\n                    null,\n                    $quote-strings\n                )}#{$glue};\n        }\n    } @else {\n        $item: if(\n            type-of($item) == string and $quote-strings,\n            '\"#{$item}\"',\n            $item\n        );\n\n        @if $i == length($list) {\n            $last-item: $item;\n            $last-item-quoted: type-of($last-item) ==\n                string and\n                $quote-strings;\n\n            $output: #{$output}#{$item};\n        } @else {\n            $output: #{$output}#{$item}#{$glue};\n        }\n    }\n}\n\n@if $closer != null {\n    $offset: if($last-item-quoted, 2, 0);\n    $find: #{$glue}#{$last-item};\n    $slice-1: str-slice($output, 1, -(str-length(#{$find}) + 1 + $offset));\n    $slice-2: str-slice($output, -(str-length(#{$last-item}) + $offset));\n    $output: #{$slice-1}#{$closer}#{$slice-2};\n}\n\n@return $output;\n",
        "line": {
          "start": 11,
          "end": 87
        }
      },
      "parameter": [
        {
          "type": "<list>",
          "name": "list"
        },
        {
          "type": "<any>",
          "name": "glue",
          "default": "''"
        },
        {
          "type": "<any>",
          "name": "closer",
          "default": "null"
        },
        {
          "type": "<bool>",
          "name": "quote-strings",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "throw": [
        "`#{$list}` is not a valid list."
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Returns a formatted string of valid <code>$values</code>.\n",
          "context": {
            "type": "function",
            "name": "format-valid-values",
            "code": "@return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n",
            "line": {
              "start": 337,
              "end": 339
            }
          }
        }
      ]
    },
    {
      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
      "commentRange": {
        "start": 94,
        "end": 98
      },
      "context": {
        "type": "function",
        "name": "auto-color-contrast",
        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
        "line": {
          "start": 99,
          "end": 118
        }
      },
      "parameter": [
        {
          "type": "<color>",
          "name": "bg-color"
        },
        {
          "type": "<number>",
          "name": "threshold",
          "default": "60"
        },
        {
          "type": "<color>",
          "name": "dark",
          "default": "black"
        },
        {
          "type": "<color>",
          "name": "light",
          "default": "white"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-nonneg-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
            "commentRange": {
              "start": 247,
              "end": 249
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-number",
              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 250,
                "end": 260
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 211,
                    "end": 212
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 213,
                      "end": 215
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 325,
                    "end": 327
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 328,
                      "end": 332
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 308,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                "context": {
                  "type": "function",
                  "name": "auto-color-contrast",
                  "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                  "line": {
                    "start": 99,
                    "end": 118
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 265,
                    "end": 275
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 280,
                    "end": 290
                  }
                }
              }
            ]
          }
        }
      ],
      "throw": [
        "`#{$bg-color}` is not a valid color.",
        "`#{$threshold}` is not a nonnegative number."
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Ceils <code>$number</code> to given decimal <code>$places</code>.\n",
      "commentRange": {
        "start": 125,
        "end": 127
      },
      "context": {
        "type": "function",
        "name": "decimal-ceil",
        "code": "@return decimal-round($number, $places, ceil);\n",
        "line": {
          "start": 128,
          "end": 130
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "number"
        },
        {
          "type": "<number>",
          "name": "places"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "decimal-round",
          "autofill": true,
          "item": {
            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
            "commentRange": {
              "start": 139,
              "end": 142
            },
            "context": {
              "type": "function",
              "name": "decimal-round",
              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
              "line": {
                "start": 143,
                "end": 169
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "number"
              },
              {
                "type": "<number>",
                "name": "places"
              },
              {
                "type": "<any> (round, ceil, floor)",
                "name": "mode",
                "default": "round"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 211,
                    "end": 212
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 213,
                      "end": 215
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Ceils <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-ceil",
                  "code": "@return decimal-round($number, $places, ceil);\n",
                  "line": {
                    "start": 128,
                    "end": 130
                  }
                }
              },
              {
                "description": "Floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-floor",
                  "code": "@return decimal-round($number, $places, floor);\n",
                  "line": {
                    "start": 135,
                    "end": 137
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Floors <code>$number</code> to given decimal <code>$places</code>.\n",
      "commentRange": {
        "start": 132,
        "end": 134
      },
      "context": {
        "type": "function",
        "name": "decimal-floor",
        "code": "@return decimal-round($number, $places, floor);\n",
        "line": {
          "start": 135,
          "end": 137
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "number"
        },
        {
          "type": "<number>",
          "name": "places"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "decimal-round",
          "autofill": true,
          "item": {
            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
            "commentRange": {
              "start": 139,
              "end": 142
            },
            "context": {
              "type": "function",
              "name": "decimal-round",
              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
              "line": {
                "start": 143,
                "end": 169
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "number"
              },
              {
                "type": "<number>",
                "name": "places"
              },
              {
                "type": "<any> (round, ceil, floor)",
                "name": "mode",
                "default": "round"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 211,
                    "end": 212
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 213,
                      "end": 215
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Ceils <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-ceil",
                  "code": "@return decimal-round($number, $places, ceil);\n",
                  "line": {
                    "start": 128,
                    "end": 130
                  }
                }
              },
              {
                "description": "Floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-floor",
                  "code": "@return decimal-round($number, $places, floor);\n",
                  "line": {
                    "start": 135,
                    "end": 137
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
      "commentRange": {
        "start": 139,
        "end": 142
      },
      "context": {
        "type": "function",
        "name": "decimal-round",
        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
        "line": {
          "start": 143,
          "end": 169
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "number"
        },
        {
          "type": "<number>",
          "name": "places"
        },
        {
          "type": "<any> (round, ceil, floor)",
          "name": "mode",
          "default": "round"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a number.\n",
            "commentRange": {
              "start": 211,
              "end": 212
            },
            "context": {
              "type": "function",
              "name": "is-number",
              "code": "@return type-of($value) == number;\n",
              "line": {
                "start": 213,
                "end": 215
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 143,
                    "end": 169
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 143,
                    "end": 169
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 235,
                    "end": 245
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 250,
                    "end": 260
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Ceils <code>$number</code> to given decimal <code>$places</code>.\n",
          "context": {
            "type": "function",
            "name": "decimal-ceil",
            "code": "@return decimal-round($number, $places, ceil);\n",
            "line": {
              "start": 128,
              "end": 130
            }
          }
        },
        {
          "description": "Floors <code>$number</code> to given decimal <code>$places</code>.\n",
          "context": {
            "type": "function",
            "name": "decimal-floor",
            "code": "@return decimal-round($number, $places, floor);\n",
            "line": {
              "start": 135,
              "end": 137
            }
          }
        }
      ]
    },
    {
      "description": "Removes the unit from <code>$number</code>.\n",
      "commentRange": {
        "start": 171,
        "end": 172
      },
      "context": {
        "type": "function",
        "name": "strip-unit",
        "code": "@if type-of($number) == 'number' and not unitless($number) {\n    @return $number / ($number * 0 + 1);\n}\n\n@return $number;\n",
        "line": {
          "start": 173,
          "end": 179
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "number"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Converts <code>$size-in-rem</code> to pixels based on <code>$font-size-base</code>.\n",
          "context": {
            "type": "function",
            "name": "rem-to-pixels",
            "code": "@return strip-unit($size-in-rem) * $font-size-base;\n",
            "line": {
              "start": 184,
              "end": 186
            }
          }
        }
      ]
    },
    {
      "description": "Converts <code>$size-in-rem</code> to pixels based on <code>$font-size-base</code>.\n",
      "commentRange": {
        "start": 181,
        "end": 183
      },
      "context": {
        "type": "function",
        "name": "rem-to-pixels",
        "code": "@return strip-unit($size-in-rem) * $font-size-base;\n",
        "line": {
          "start": 184,
          "end": 186
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "size-in-rem"
        },
        {
          "type": "<number>",
          "name": "font-size-base"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "strip-unit",
          "autofill": true,
          "item": {
            "description": "Removes the unit from <code>$number</code>.\n",
            "commentRange": {
              "start": 171,
              "end": 172
            },
            "context": {
              "type": "function",
              "name": "strip-unit",
              "code": "@if type-of($number) == 'number' and not unitless($number) {\n    @return $number / ($number * 0 + 1);\n}\n\n@return $number;\n",
              "line": {
                "start": 173,
                "end": 179
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "number"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Converts <code>$size-in-rem</code> to pixels based on <code>$font-size-base</code>.\n",
                "context": {
                  "type": "function",
                  "name": "rem-to-pixels",
                  "code": "@return strip-unit($size-in-rem) * $font-size-base;\n",
                  "line": {
                    "start": 184,
                    "end": 186
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a boolean.\n",
      "commentRange": {
        "start": 193,
        "end": 194
      },
      "context": {
        "type": "function",
        "name": "is-bool",
        "code": "@return type-of($value) == bool;\n",
        "line": {
          "start": 195,
          "end": 197
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a color.\n",
      "commentRange": {
        "start": 199,
        "end": 200
      },
      "context": {
        "type": "function",
        "name": "is-color",
        "code": "@return type-of($value) == color;\n",
        "line": {
          "start": 201,
          "end": 203
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a string.\n",
      "commentRange": {
        "start": 205,
        "end": 206
      },
      "context": {
        "type": "function",
        "name": "is-string",
        "code": "@return type-of($value) == string;\n",
        "line": {
          "start": 207,
          "end": 209
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a number.\n",
      "commentRange": {
        "start": 211,
        "end": 212
      },
      "context": {
        "type": "function",
        "name": "is-number",
        "code": "@return type-of($value) == number;\n",
        "line": {
          "start": 213,
          "end": 215
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
          "context": {
            "type": "function",
            "name": "decimal-round",
            "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
            "line": {
              "start": 143,
              "end": 169
            }
          }
        },
        {
          "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
          "context": {
            "type": "function",
            "name": "decimal-round",
            "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
            "line": {
              "start": 143,
              "end": 169
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-unit-number",
            "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 220,
              "end": 230
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a unitless number.\n",
          "context": {
            "type": "function",
            "name": "is-unitless-number",
            "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 235,
              "end": 245
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative number.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-number",
            "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 250,
              "end": 260
            }
          }
        }
      ]
    },
    {
      "description": "Checks if <code>$value</code> is a number with a unit.\n",
      "commentRange": {
        "start": 217,
        "end": 219
      },
      "context": {
        "type": "function",
        "name": "is-unit-number",
        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
        "line": {
          "start": 220,
          "end": 230
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        },
        {
          "type": "<bool>",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a number.\n",
            "commentRange": {
              "start": 211,
              "end": 212
            },
            "context": {
              "type": "function",
              "name": "is-number",
              "code": "@return type-of($value) == number;\n",
              "line": {
                "start": 213,
                "end": 215
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 143,
                    "end": 169
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 143,
                    "end": 169
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 235,
                    "end": 245
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 250,
                    "end": 260
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 325,
              "end": 327
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 328,
                "end": 332
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 235,
                    "end": 245
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 250,
                    "end": 260
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 265,
                    "end": 275
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 280,
                    "end": 290
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 308,
                    "end": 318
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a unitless number.\n",
      "commentRange": {
        "start": 232,
        "end": 234
      },
      "context": {
        "type": "function",
        "name": "is-unitless-number",
        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
        "line": {
          "start": 235,
          "end": 245
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        },
        {
          "type": "<bool>",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a number.\n",
            "commentRange": {
              "start": 211,
              "end": 212
            },
            "context": {
              "type": "function",
              "name": "is-number",
              "code": "@return type-of($value) == number;\n",
              "line": {
                "start": 213,
                "end": 215
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 143,
                    "end": 169
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 143,
                    "end": 169
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 235,
                    "end": 245
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 250,
                    "end": 260
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 325,
              "end": 327
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 328,
                "end": 332
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 235,
                    "end": 245
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 250,
                    "end": 260
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 265,
                    "end": 275
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 280,
                    "end": 290
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 308,
                    "end": 318
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "function",
            "name": "space",
            "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
            "line": {
              "start": 342,
              "end": 346
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "function",
            "name": "alley",
            "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
            "line": {
              "start": 349,
              "end": 353
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-vertical-margins",
            "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
            "line": {
              "start": 228,
              "end": 237
            }
          }
        }
      ]
    },
    {
      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
      "commentRange": {
        "start": 247,
        "end": 249
      },
      "context": {
        "type": "function",
        "name": "is-nonneg-number",
        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
        "line": {
          "start": 250,
          "end": 260
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        },
        {
          "type": "<bool>",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a number.\n",
            "commentRange": {
              "start": 211,
              "end": 212
            },
            "context": {
              "type": "function",
              "name": "is-number",
              "code": "@return type-of($value) == number;\n",
              "line": {
                "start": 213,
                "end": 215
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 143,
                    "end": 169
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 143,
                    "end": 169
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 235,
                    "end": 245
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 250,
                    "end": 260
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 325,
              "end": 327
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 328,
                "end": 332
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 235,
                    "end": 245
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 250,
                    "end": 260
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 265,
                    "end": 275
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 280,
                    "end": 290
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 308,
                    "end": 318
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
          "context": {
            "type": "function",
            "name": "auto-color-contrast",
            "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
            "line": {
              "start": 99,
              "end": 118
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-unit-number",
            "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 265,
              "end": 275
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-unitless-number",
            "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
            "line": {
              "start": 280,
              "end": 290
            }
          }
        }
      ]
    },
    {
      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
      "commentRange": {
        "start": 262,
        "end": 264
      },
      "context": {
        "type": "function",
        "name": "is-nonneg-unit-number",
        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
        "line": {
          "start": 265,
          "end": 275
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        },
        {
          "type": "<bool>",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-nonneg-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
            "commentRange": {
              "start": 247,
              "end": 249
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-number",
              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 250,
                "end": 260
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 211,
                    "end": 212
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 213,
                      "end": 215
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 325,
                    "end": 327
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 328,
                      "end": 332
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 308,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                "context": {
                  "type": "function",
                  "name": "auto-color-contrast",
                  "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                  "line": {
                    "start": 99,
                    "end": 118
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 265,
                    "end": 275
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 280,
                    "end": 290
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 325,
              "end": 327
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 328,
                "end": 332
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 235,
                    "end": 245
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 250,
                    "end": 260
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 265,
                    "end": 275
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 280,
                    "end": 290
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 308,
                    "end": 318
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
          "context": {
            "type": "mixin",
            "name": "hide",
            "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
            "line": {
              "start": 214,
              "end": 224
            }
          }
        }
      ]
    },
    {
      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
      "commentRange": {
        "start": 277,
        "end": 279
      },
      "context": {
        "type": "function",
        "name": "is-nonneg-unitless-number",
        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
        "line": {
          "start": 280,
          "end": 290
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        },
        {
          "type": "<bool>",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-nonneg-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
            "commentRange": {
              "start": 247,
              "end": 249
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-number",
              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 250,
                "end": 260
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 211,
                    "end": 212
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 213,
                      "end": 215
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 325,
                    "end": 327
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 328,
                      "end": 332
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 308,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                "context": {
                  "type": "function",
                  "name": "auto-color-contrast",
                  "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                  "line": {
                    "start": 99,
                    "end": 118
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 265,
                    "end": 275
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 280,
                    "end": 290
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 325,
              "end": 327
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 328,
                "end": 332
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 235,
                    "end": 245
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 250,
                    "end": 260
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 265,
                    "end": 275
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 280,
                    "end": 290
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 308,
                    "end": 318
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
            "line": {
              "start": 111,
              "end": 157
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "h",
            "code": "font-weight: var(--font-weight-heading);\nfont-size: var(--font-size-h#{$type});\nfont-family: var(--font-stack-heading);\nline-height: var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m: $margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
            "line": {
              "start": 161,
              "end": 175
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 241,
              "end": 255
            }
          }
        }
      ]
    },
    {
      "description": "Checks if <code>$value</code> is a map.\n",
      "commentRange": {
        "start": 292,
        "end": 293
      },
      "context": {
        "type": "function",
        "name": "is-map",
        "code": "@return type-of($value) == map;\n",
        "line": {
          "start": 294,
          "end": 296
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a list.\n",
      "commentRange": {
        "start": 298,
        "end": 299
      },
      "context": {
        "type": "function",
        "name": "is-list",
        "code": "@return type-of($value) == list;\n",
        "line": {
          "start": 300,
          "end": 302
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
      "commentRange": {
        "start": 304,
        "end": 307
      },
      "context": {
        "type": "function",
        "name": "is-in-list",
        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
        "line": {
          "start": 308,
          "end": 318
        }
      },
      "parameter": [
        {
          "type": "<any>|number",
          "name": "needle"
        },
        {
          "type": "<list>",
          "name": "haystack"
        },
        {
          "type": "<bool>",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 325,
              "end": 327
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 328,
                "end": 332
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 235,
                    "end": 245
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 250,
                    "end": 260
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 265,
                    "end": 275
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 280,
                    "end": 290
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 308,
                    "end": 318
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "format-valid-values",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string of valid <code>$values</code>.\n",
            "commentRange": {
              "start": 334,
              "end": 336
            },
            "context": {
              "type": "function",
              "name": "format-valid-values",
              "code": "@return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n",
              "line": {
                "start": 337,
                "end": 339
              }
            },
            "parameter": [
              {
                "type": "<list>",
                "name": "values"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "list-to-string",
                "autofill": true,
                "item": {
                  "description": "Joins <code>$list</code> items into a <code>$glue</code> separated string and uses an optional <code>$closer</code> before the final item.\n",
                  "commentRange": {
                    "start": 6,
                    "end": 10
                  },
                  "context": {
                    "type": "function",
                    "name": "list-to-string",
                    "code": "$output: null;\n$last-item: null;\n$last-item-quoted: false;\n\n@if type-of($list) != list {\n    @error '`#{$list}` is not a valid list.';\n}\n\n@for $i from 1 through length($list) {\n    $item: nth($list, $i);\n\n    @if type-of($item) == list {\n        @if $i == length($list) {\n            $last-item: nth($item, -1);\n            $is-nested-list: type-of($last-item) == list;\n\n            @while $is-nested-list {\n                $last-item: nth($last-item, -1);\n\n                @if type-of($last-item) != list {\n                    $is-nested-list: false;\n                    $last-item-quoted: type-of($last-item) ==\n                        string and\n                        $quote-strings;\n                }\n            }\n\n            $output: #{$output}#{list-to-string(\n                    $item,\n                    $glue,\n                    null,\n                    $quote-strings\n                )};\n        } @else {\n            $output: #{$output}#{list-to-string(\n                    $item,\n                    $glue,\n                    null,\n                    $quote-strings\n                )}#{$glue};\n        }\n    } @else {\n        $item: if(\n            type-of($item) == string and $quote-strings,\n            '\"#{$item}\"',\n            $item\n        );\n\n        @if $i == length($list) {\n            $last-item: $item;\n            $last-item-quoted: type-of($last-item) ==\n                string and\n                $quote-strings;\n\n            $output: #{$output}#{$item};\n        } @else {\n            $output: #{$output}#{$item}#{$glue};\n        }\n    }\n}\n\n@if $closer != null {\n    $offset: if($last-item-quoted, 2, 0);\n    $find: #{$glue}#{$last-item};\n    $slice-1: str-slice($output, 1, -(str-length(#{$find}) + 1 + $offset));\n    $slice-2: str-slice($output, -(str-length(#{$last-item}) + $offset));\n    $output: #{$slice-1}#{$closer}#{$slice-2};\n}\n\n@return $output;\n",
                    "line": {
                      "start": 11,
                      "end": 87
                    }
                  },
                  "parameter": [
                    {
                      "type": "<list>",
                      "name": "list"
                    },
                    {
                      "type": "<any>",
                      "name": "glue",
                      "default": "''"
                    },
                    {
                      "type": "<any>",
                      "name": "closer",
                      "default": "null"
                    },
                    {
                      "type": "<bool>",
                      "name": "quote-strings",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "throw": [
                    "`#{$list}` is not a valid list."
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Returns a formatted string of valid <code>$values</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "format-valid-values",
                        "code": "@return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n",
                        "line": {
                          "start": 337,
                          "end": 339
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 308,
                    "end": 318
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
      "commentRange": {
        "start": 325,
        "end": 327
      },
      "context": {
        "type": "function",
        "name": "show-param-value",
        "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
        "line": {
          "start": 328,
          "end": 332
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "private",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Checks if <code>$value</code> is a number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-unit-number",
            "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 220,
              "end": 230
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a unitless number.\n",
          "context": {
            "type": "function",
            "name": "is-unitless-number",
            "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 235,
              "end": 245
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative number.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-number",
            "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 250,
              "end": 260
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-unit-number",
            "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 265,
              "end": 275
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-unitless-number",
            "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
            "line": {
              "start": 280,
              "end": 290
            }
          }
        },
        {
          "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
          "context": {
            "type": "function",
            "name": "is-in-list",
            "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
            "line": {
              "start": 308,
              "end": 318
            }
          }
        }
      ]
    },
    {
      "description": "Returns a formatted string of valid <code>$values</code>.\n",
      "commentRange": {
        "start": 334,
        "end": 336
      },
      "context": {
        "type": "function",
        "name": "format-valid-values",
        "code": "@return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n",
        "line": {
          "start": 337,
          "end": 339
        }
      },
      "parameter": [
        {
          "type": "<list>",
          "name": "values"
        }
      ],
      "access": "private",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "list-to-string",
          "autofill": true,
          "item": {
            "description": "Joins <code>$list</code> items into a <code>$glue</code> separated string and uses an optional <code>$closer</code> before the final item.\n",
            "commentRange": {
              "start": 6,
              "end": 10
            },
            "context": {
              "type": "function",
              "name": "list-to-string",
              "code": "$output: null;\n$last-item: null;\n$last-item-quoted: false;\n\n@if type-of($list) != list {\n    @error '`#{$list}` is not a valid list.';\n}\n\n@for $i from 1 through length($list) {\n    $item: nth($list, $i);\n\n    @if type-of($item) == list {\n        @if $i == length($list) {\n            $last-item: nth($item, -1);\n            $is-nested-list: type-of($last-item) == list;\n\n            @while $is-nested-list {\n                $last-item: nth($last-item, -1);\n\n                @if type-of($last-item) != list {\n                    $is-nested-list: false;\n                    $last-item-quoted: type-of($last-item) ==\n                        string and\n                        $quote-strings;\n                }\n            }\n\n            $output: #{$output}#{list-to-string(\n                    $item,\n                    $glue,\n                    null,\n                    $quote-strings\n                )};\n        } @else {\n            $output: #{$output}#{list-to-string(\n                    $item,\n                    $glue,\n                    null,\n                    $quote-strings\n                )}#{$glue};\n        }\n    } @else {\n        $item: if(\n            type-of($item) == string and $quote-strings,\n            '\"#{$item}\"',\n            $item\n        );\n\n        @if $i == length($list) {\n            $last-item: $item;\n            $last-item-quoted: type-of($last-item) ==\n                string and\n                $quote-strings;\n\n            $output: #{$output}#{$item};\n        } @else {\n            $output: #{$output}#{$item}#{$glue};\n        }\n    }\n}\n\n@if $closer != null {\n    $offset: if($last-item-quoted, 2, 0);\n    $find: #{$glue}#{$last-item};\n    $slice-1: str-slice($output, 1, -(str-length(#{$find}) + 1 + $offset));\n    $slice-2: str-slice($output, -(str-length(#{$last-item}) + $offset));\n    $output: #{$slice-1}#{$closer}#{$slice-2};\n}\n\n@return $output;\n",
              "line": {
                "start": 11,
                "end": 87
              }
            },
            "parameter": [
              {
                "type": "<list>",
                "name": "list"
              },
              {
                "type": "<any>",
                "name": "glue",
                "default": "''"
              },
              {
                "type": "<any>",
                "name": "closer",
                "default": "null"
              },
              {
                "type": "<bool>",
                "name": "quote-strings",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "throw": [
              "`#{$list}` is not a valid list."
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Returns a formatted string of valid <code>$values</code>.\n",
                "context": {
                  "type": "function",
                  "name": "format-valid-values",
                  "code": "@return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n",
                  "line": {
                    "start": 337,
                    "end": 339
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
          "context": {
            "type": "function",
            "name": "is-in-list",
            "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
            "line": {
              "start": 308,
              "end": 318
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 341,
        "end": 341
      },
      "context": {
        "type": "function",
        "name": "space",
        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
        "line": {
          "start": 342,
          "end": 346
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "multiplier"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a unitless number.\n",
            "commentRange": {
              "start": 232,
              "end": 234
            },
            "context": {
              "type": "function",
              "name": "is-unitless-number",
              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 235,
                "end": 245
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 211,
                    "end": 212
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 213,
                      "end": 215
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 325,
                    "end": 327
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 328,
                      "end": 332
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 308,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "function",
                  "name": "space",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                  "line": {
                    "start": 342,
                    "end": 346
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "function",
                  "name": "alley",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                  "line": {
                    "start": 349,
                    "end": 353
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-vertical-margins",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 228,
                    "end": 237
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
            "line": {
              "start": 111,
              "end": 157
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
            "line": {
              "start": 111,
              "end": 157
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
            "line": {
              "start": 111,
              "end": 157
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
            "line": {
              "start": 111,
              "end": 157
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
            "line": {
              "start": 111,
              "end": 157
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n}\n\ncaption {\n    margin-bottom: if($m, calc(#{space($m)} * 0.5), space(0.5));\n}\n\nh1 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, space($m), space());\n}\n\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom: if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
            "line": {
              "start": 111,
              "end": 157
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-vertical-margins",
            "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
            "line": {
              "start": 228,
              "end": 237
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-vertical-margins",
            "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
            "line": {
              "start": 228,
              "end": 237
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "figcaption",
            "code": "@include xsmall();\n\npadding-top: space(0.5);\ncolor: var(--color-contrast-medium);\ntext-align: center;\ntext-transform: uppercase;\n",
            "line": {
              "start": 344,
              "end": 351
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 348,
        "end": 348
      },
      "context": {
        "type": "function",
        "name": "alley",
        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
        "line": {
          "start": 349,
          "end": 353
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "multiplier"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a unitless number.\n",
            "commentRange": {
              "start": 232,
              "end": 234
            },
            "context": {
              "type": "function",
              "name": "is-unitless-number",
              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 235,
                "end": 245
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 211,
                    "end": 212
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 213,
                      "end": 215
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 325,
                    "end": 327
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 328,
                      "end": 332
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 308,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "function",
                  "name": "space",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                  "line": {
                    "start": 342,
                    "end": 346
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "function",
                  "name": "alley",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                  "line": {
                    "start": 349,
                    "end": 353
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-vertical-margins",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 228,
                    "end": 237
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 241,
              "end": 255
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 241,
              "end": 255
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 241,
              "end": 255
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 241,
              "end": 255
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 241,
              "end": 255
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 241,
              "end": 255
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 241,
              "end": 255
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m: false;\n\n@if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 241,
              "end": 255
            }
          }
        }
      ]
    }
  ]
}