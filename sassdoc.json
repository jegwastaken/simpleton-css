{
  "functions": [
    {
      "description": "Returns a formatted string of valid <code>$values</code>.\n",
      "commentRange": {
        "start": 6,
        "end": 8
      },
      "context": {
        "type": "function",
        "name": "format-valid-values",
        "code": "@return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n",
        "line": {
          "start": 9,
          "end": 11
        }
      },
      "parameter": [
        {
          "type": "<list>",
          "name": "values"
        }
      ],
      "access": "private",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "list-to-string",
          "autofill": true,
          "item": {
            "description": "Joins <code>$list</code> items into a <code>$glue</code> separated string and uses an optional <code>$closer</code> before the final item.\n",
            "commentRange": {
              "start": 159,
              "end": 163
            },
            "context": {
              "type": "function",
              "name": "list-to-string",
              "code": "$output:null;\n$last-item:null;\n$last-item-quoted:false;\n\n@if type-of($list) != list {\n    @error '`#{$list}` is not a valid list.';\n}\n\n@for $i from 1 through length($list) {\n    $item:nth($list, $i);\n\n    @if type-of($item) == list {\n        @if $i == length($list) {\n            $last-item:nth($item, -1);\n            $is-nested-list:type-of($last-item) == list;\n\n            @while $is-nested-list {\n                $last-item:nth($last-item, -1);\n\n                @if type-of($last-item) != list {\n                    $is-nested-list:false;\n                    $last-item-quoted:type-of($last-item) == string and $quote-strings;\n                }\n            }\n\n            $output:#{$output}#{list-to-string($item, $glue, null, $quote-strings)};\n        } @else {\n            $output:#{$output}#{list-to-string($item, $glue, null, $quote-strings)}#{$glue};\n        }\n    } @else {\n        $item:if(type-of($item) == string and $quote-strings, '\"#{$item}\"', $item);\n\n        @if $i == length($list) {\n            $last-item:$item;\n            $last-item-quoted:type-of($last-item) == string and $quote-strings;\n\n            $output:#{$output}#{$item}\n        } @else {\n            $output:#{$output}#{$item}#{$glue};\n        }\n    }\n}\n\n@if $closer != null {\n    $offset:if($last-item-quoted, 2, 0);\n    $find:#{$glue}#{$last-item};\n    $slice-1:str-slice($output, 1, -(str-length(#{$find}) + 1 + $offset));\n    $slice-2:str-slice($output, -(str-length(#{$last-item}) + $offset));\n    $output:#{$slice-1}#{$closer}#{$slice-2};\n}\n\n@return $output;\n",
              "line": {
                "start": 164,
                "end": 217
              }
            },
            "parameter": [
              {
                "type": "<list>",
                "name": "list"
              },
              {
                "type": "<any>",
                "name": "glue",
                "default": "''"
              },
              {
                "type": "<any>",
                "name": "closer",
                "default": "null"
              },
              {
                "type": "<bool>",
                "name": "quote-strings",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "throw": [
              "`#{$list}` is not a valid list."
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Returns a formatted string of valid <code>$values</code>.\n",
                "context": {
                  "type": "function",
                  "name": "format-valid-values",
                  "code": "@return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n",
                  "line": {
                    "start": 9,
                    "end": 11
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
          "context": {
            "type": "function",
            "name": "is-in-list",
            "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
            "line": {
              "start": 142,
              "end": 152
            }
          }
        }
      ]
    },
    {
      "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
      "commentRange": {
        "start": 13,
        "end": 15
      },
      "context": {
        "type": "function",
        "name": "show-param-value",
        "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
        "line": {
          "start": 16,
          "end": 20
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "private",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Checks if <code>$value</code> is a number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-unit-number",
            "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 66,
              "end": 76
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a unitless number.\n",
          "context": {
            "type": "function",
            "name": "is-unitless-number",
            "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 81,
              "end": 91
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative number.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-number",
            "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 96,
              "end": 106
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-unit-number",
            "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 111,
              "end": 121
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-unitless-number",
            "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
            "line": {
              "start": 126,
              "end": 136
            }
          }
        },
        {
          "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
          "context": {
            "type": "function",
            "name": "is-in-list",
            "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
            "line": {
              "start": 142,
              "end": 152
            }
          }
        }
      ]
    },
    {
      "description": "Checks if <code>$value</code> is a number.\n",
      "commentRange": {
        "start": 27,
        "end": 28
      },
      "context": {
        "type": "function",
        "name": "is-number",
        "code": "@return type-of($value) == number;\n",
        "line": {
          "start": 29,
          "end": 31
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Checks if <code>$value</code> is a number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-unit-number",
            "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 66,
              "end": 76
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a unitless number.\n",
          "context": {
            "type": "function",
            "name": "is-unitless-number",
            "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 81,
              "end": 91
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative number.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-number",
            "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 96,
              "end": 106
            }
          }
        },
        {
          "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
          "context": {
            "type": "function",
            "name": "decimal-round",
            "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
            "line": {
              "start": 254,
              "end": 280
            }
          }
        },
        {
          "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
          "context": {
            "type": "function",
            "name": "decimal-round",
            "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
            "line": {
              "start": 254,
              "end": 280
            }
          }
        }
      ]
    },
    {
      "description": "Checks if <code>$value</code> is a list.\n",
      "commentRange": {
        "start": 33,
        "end": 34
      },
      "context": {
        "type": "function",
        "name": "is-list",
        "code": "@return type-of($value) == list;\n",
        "line": {
          "start": 35,
          "end": 37
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a map.\n",
      "commentRange": {
        "start": 39,
        "end": 40
      },
      "context": {
        "type": "function",
        "name": "is-map",
        "code": "@return type-of($value) == map;\n",
        "line": {
          "start": 41,
          "end": 43
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a string.\n",
      "commentRange": {
        "start": 45,
        "end": 46
      },
      "context": {
        "type": "function",
        "name": "is-string",
        "code": "@return type-of($value) == string;\n",
        "line": {
          "start": 47,
          "end": 49
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a boolean.\n",
      "commentRange": {
        "start": 51,
        "end": 52
      },
      "context": {
        "type": "function",
        "name": "is-bool",
        "code": "@return type-of($value) == bool;\n",
        "line": {
          "start": 53,
          "end": 55
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a color.\n",
      "commentRange": {
        "start": 57,
        "end": 58
      },
      "context": {
        "type": "function",
        "name": "is-color",
        "code": "@return type-of($value) == color;\n",
        "line": {
          "start": 59,
          "end": 61
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a number with a unit.\n",
      "commentRange": {
        "start": 63,
        "end": 65
      },
      "context": {
        "type": "function",
        "name": "is-unit-number",
        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
        "line": {
          "start": 66,
          "end": 76
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        },
        {
          "type": "<bool>",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a number.\n",
            "commentRange": {
              "start": 27,
              "end": 28
            },
            "context": {
              "type": "function",
              "name": "is-number",
              "code": "@return type-of($value) == number;\n",
              "line": {
                "start": 29,
                "end": 31
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 66,
                    "end": 76
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 81,
                    "end": 91
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 96,
                    "end": 106
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 254,
                    "end": 280
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 254,
                    "end": 280
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 13,
              "end": 15
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 16,
                "end": 20
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 66,
                    "end": 76
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 81,
                    "end": 91
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 96,
                    "end": 106
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 111,
                    "end": 121
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 126,
                    "end": 136
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 142,
                    "end": 152
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a unitless number.\n",
      "commentRange": {
        "start": 78,
        "end": 80
      },
      "context": {
        "type": "function",
        "name": "is-unitless-number",
        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
        "line": {
          "start": 81,
          "end": 91
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        },
        {
          "type": "<bool>",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a number.\n",
            "commentRange": {
              "start": 27,
              "end": 28
            },
            "context": {
              "type": "function",
              "name": "is-number",
              "code": "@return type-of($value) == number;\n",
              "line": {
                "start": 29,
                "end": 31
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 66,
                    "end": 76
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 81,
                    "end": 91
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 96,
                    "end": 106
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 254,
                    "end": 280
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 254,
                    "end": 280
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 13,
              "end": 15
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 16,
                "end": 20
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 66,
                    "end": 76
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 81,
                    "end": 91
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 96,
                    "end": 106
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 111,
                    "end": 121
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 126,
                    "end": 136
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 142,
                    "end": 152
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
      "commentRange": {
        "start": 93,
        "end": 95
      },
      "context": {
        "type": "function",
        "name": "is-nonneg-number",
        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
        "line": {
          "start": 96,
          "end": 106
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        },
        {
          "type": "<bool>",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a number.\n",
            "commentRange": {
              "start": 27,
              "end": 28
            },
            "context": {
              "type": "function",
              "name": "is-number",
              "code": "@return type-of($value) == number;\n",
              "line": {
                "start": 29,
                "end": 31
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 66,
                    "end": 76
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 81,
                    "end": 91
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 96,
                    "end": 106
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 254,
                    "end": 280
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 254,
                    "end": 280
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 13,
              "end": 15
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 16,
                "end": 20
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 66,
                    "end": 76
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 81,
                    "end": 91
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 96,
                    "end": 106
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 111,
                    "end": 121
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 126,
                    "end": 136
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 142,
                    "end": 152
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-unit-number",
            "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 111,
              "end": 121
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-unitless-number",
            "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
            "line": {
              "start": 126,
              "end": 136
            }
          }
        },
        {
          "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
          "context": {
            "type": "function",
            "name": "auto-color",
            "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
            "line": {
              "start": 229,
              "end": 243
            }
          }
        }
      ]
    },
    {
      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
      "commentRange": {
        "start": 108,
        "end": 110
      },
      "context": {
        "type": "function",
        "name": "is-nonneg-unit-number",
        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
        "line": {
          "start": 111,
          "end": 121
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        },
        {
          "type": "<bool>",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-nonneg-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
            "commentRange": {
              "start": 93,
              "end": 95
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-number",
              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 96,
                "end": 106
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 27,
                    "end": 28
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 29,
                      "end": 31
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 254,
                          "end": 280
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 254,
                          "end": 280
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 13,
                    "end": 15
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 16,
                      "end": 20
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 142,
                          "end": 152
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 111,
                    "end": 121
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 126,
                    "end": 136
                  }
                }
              },
              {
                "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                "context": {
                  "type": "function",
                  "name": "auto-color",
                  "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                  "line": {
                    "start": 229,
                    "end": 243
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 13,
              "end": 15
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 16,
                "end": 20
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 66,
                    "end": 76
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 81,
                    "end": 91
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 96,
                    "end": 106
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 111,
                    "end": 121
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 126,
                    "end": 136
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 142,
                    "end": 152
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "hide",
            "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
            "line": {
              "start": 231,
              "end": 241
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 325,
              "end": 347
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 350,
              "end": 376
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 350,
              "end": 376
            }
          }
        }
      ]
    },
    {
      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
      "commentRange": {
        "start": 123,
        "end": 125
      },
      "context": {
        "type": "function",
        "name": "is-nonneg-unitless-number",
        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
        "line": {
          "start": 126,
          "end": 136
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        },
        {
          "type": "<bool>",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-nonneg-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
            "commentRange": {
              "start": 93,
              "end": 95
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-number",
              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 96,
                "end": 106
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 27,
                    "end": 28
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 29,
                      "end": 31
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 254,
                          "end": 280
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 254,
                          "end": 280
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 13,
                    "end": 15
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 16,
                      "end": 20
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 142,
                          "end": 152
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 111,
                    "end": 121
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 126,
                    "end": 136
                  }
                }
              },
              {
                "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                "context": {
                  "type": "function",
                  "name": "auto-color",
                  "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                  "line": {
                    "start": 229,
                    "end": 243
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 13,
              "end": 15
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 16,
                "end": 20
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 66,
                    "end": 76
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 81,
                    "end": 91
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 96,
                    "end": 106
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 111,
                    "end": 121
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 126,
                    "end": 136
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 142,
                    "end": 152
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, calc(var(--space) * #{$m}), var(--space));\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n\ncaption {\n    margin-bottom:if($m, calc(var(--space) * .25 * #{$m}), calc(var(--space) * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
            "line": {
              "start": 157,
              "end": 198
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "h",
            "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
            "line": {
              "start": 202,
              "end": 216
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "mgb",
            "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\n@if $important == true {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space)) !important;\n} @else {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
            "line": {
              "start": 245,
              "end": 253
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n    margin-left:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n} @else if $type == col {\n    padding-right:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n    padding-left:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n}\n",
            "line": {
              "start": 284,
              "end": 300
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 325,
              "end": 347
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 350,
              "end": 376
            }
          }
        }
      ]
    },
    {
      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
      "commentRange": {
        "start": 138,
        "end": 141
      },
      "context": {
        "type": "function",
        "name": "is-in-list",
        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
        "line": {
          "start": 142,
          "end": 152
        }
      },
      "parameter": [
        {
          "type": "<any>|number",
          "name": "needle"
        },
        {
          "type": "<list>",
          "name": "haystack"
        },
        {
          "type": "<bool>",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 13,
              "end": 15
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 16,
                "end": 20
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 66,
                    "end": 76
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 81,
                    "end": 91
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 96,
                    "end": 106
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 111,
                    "end": 121
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 126,
                    "end": 136
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 142,
                    "end": 152
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "format-valid-values",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string of valid <code>$values</code>.\n",
            "commentRange": {
              "start": 6,
              "end": 8
            },
            "context": {
              "type": "function",
              "name": "format-valid-values",
              "code": "@return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n",
              "line": {
                "start": 9,
                "end": 11
              }
            },
            "parameter": [
              {
                "type": "<list>",
                "name": "values"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "list-to-string",
                "autofill": true,
                "item": {
                  "description": "Joins <code>$list</code> items into a <code>$glue</code> separated string and uses an optional <code>$closer</code> before the final item.\n",
                  "commentRange": {
                    "start": 159,
                    "end": 163
                  },
                  "context": {
                    "type": "function",
                    "name": "list-to-string",
                    "code": "$output:null;\n$last-item:null;\n$last-item-quoted:false;\n\n@if type-of($list) != list {\n    @error '`#{$list}` is not a valid list.';\n}\n\n@for $i from 1 through length($list) {\n    $item:nth($list, $i);\n\n    @if type-of($item) == list {\n        @if $i == length($list) {\n            $last-item:nth($item, -1);\n            $is-nested-list:type-of($last-item) == list;\n\n            @while $is-nested-list {\n                $last-item:nth($last-item, -1);\n\n                @if type-of($last-item) != list {\n                    $is-nested-list:false;\n                    $last-item-quoted:type-of($last-item) == string and $quote-strings;\n                }\n            }\n\n            $output:#{$output}#{list-to-string($item, $glue, null, $quote-strings)};\n        } @else {\n            $output:#{$output}#{list-to-string($item, $glue, null, $quote-strings)}#{$glue};\n        }\n    } @else {\n        $item:if(type-of($item) == string and $quote-strings, '\"#{$item}\"', $item);\n\n        @if $i == length($list) {\n            $last-item:$item;\n            $last-item-quoted:type-of($last-item) == string and $quote-strings;\n\n            $output:#{$output}#{$item}\n        } @else {\n            $output:#{$output}#{$item}#{$glue};\n        }\n    }\n}\n\n@if $closer != null {\n    $offset:if($last-item-quoted, 2, 0);\n    $find:#{$glue}#{$last-item};\n    $slice-1:str-slice($output, 1, -(str-length(#{$find}) + 1 + $offset));\n    $slice-2:str-slice($output, -(str-length(#{$last-item}) + $offset));\n    $output:#{$slice-1}#{$closer}#{$slice-2};\n}\n\n@return $output;\n",
                    "line": {
                      "start": 164,
                      "end": 217
                    }
                  },
                  "parameter": [
                    {
                      "type": "<list>",
                      "name": "list"
                    },
                    {
                      "type": "<any>",
                      "name": "glue",
                      "default": "''"
                    },
                    {
                      "type": "<any>",
                      "name": "closer",
                      "default": "null"
                    },
                    {
                      "type": "<bool>",
                      "name": "quote-strings",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "throw": [
                    "`#{$list}` is not a valid list."
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Returns a formatted string of valid <code>$values</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "format-valid-values",
                        "code": "@return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n",
                        "line": {
                          "start": 9,
                          "end": 11
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 142,
                    "end": 152
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Joins <code>$list</code> items into a <code>$glue</code> separated string and uses an optional <code>$closer</code> before the final item.\n",
      "commentRange": {
        "start": 159,
        "end": 163
      },
      "context": {
        "type": "function",
        "name": "list-to-string",
        "code": "$output:null;\n$last-item:null;\n$last-item-quoted:false;\n\n@if type-of($list) != list {\n    @error '`#{$list}` is not a valid list.';\n}\n\n@for $i from 1 through length($list) {\n    $item:nth($list, $i);\n\n    @if type-of($item) == list {\n        @if $i == length($list) {\n            $last-item:nth($item, -1);\n            $is-nested-list:type-of($last-item) == list;\n\n            @while $is-nested-list {\n                $last-item:nth($last-item, -1);\n\n                @if type-of($last-item) != list {\n                    $is-nested-list:false;\n                    $last-item-quoted:type-of($last-item) == string and $quote-strings;\n                }\n            }\n\n            $output:#{$output}#{list-to-string($item, $glue, null, $quote-strings)};\n        } @else {\n            $output:#{$output}#{list-to-string($item, $glue, null, $quote-strings)}#{$glue};\n        }\n    } @else {\n        $item:if(type-of($item) == string and $quote-strings, '\"#{$item}\"', $item);\n\n        @if $i == length($list) {\n            $last-item:$item;\n            $last-item-quoted:type-of($last-item) == string and $quote-strings;\n\n            $output:#{$output}#{$item}\n        } @else {\n            $output:#{$output}#{$item}#{$glue};\n        }\n    }\n}\n\n@if $closer != null {\n    $offset:if($last-item-quoted, 2, 0);\n    $find:#{$glue}#{$last-item};\n    $slice-1:str-slice($output, 1, -(str-length(#{$find}) + 1 + $offset));\n    $slice-2:str-slice($output, -(str-length(#{$last-item}) + $offset));\n    $output:#{$slice-1}#{$closer}#{$slice-2};\n}\n\n@return $output;\n",
        "line": {
          "start": 164,
          "end": 217
        }
      },
      "parameter": [
        {
          "type": "<list>",
          "name": "list"
        },
        {
          "type": "<any>",
          "name": "glue",
          "default": "''"
        },
        {
          "type": "<any>",
          "name": "closer",
          "default": "null"
        },
        {
          "type": "<bool>",
          "name": "quote-strings",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "throw": [
        "`#{$list}` is not a valid list."
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Returns a formatted string of valid <code>$values</code>.\n",
          "context": {
            "type": "function",
            "name": "format-valid-values",
            "code": "@return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n",
            "line": {
              "start": 9,
              "end": 11
            }
          }
        }
      ]
    },
    {
      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
      "commentRange": {
        "start": 224,
        "end": 228
      },
      "context": {
        "type": "function",
        "name": "auto-color",
        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
        "line": {
          "start": 229,
          "end": 243
        }
      },
      "parameter": [
        {
          "type": "<color>",
          "name": "bg-color"
        },
        {
          "type": "<number>",
          "name": "threshold",
          "default": "60"
        },
        {
          "type": "<color>",
          "name": "dark",
          "default": "black"
        },
        {
          "type": "<color>",
          "name": "light",
          "default": "white"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-nonneg-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
            "commentRange": {
              "start": 93,
              "end": 95
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-number",
              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 96,
                "end": 106
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 27,
                    "end": 28
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 29,
                      "end": 31
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 254,
                          "end": 280
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 254,
                          "end": 280
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 13,
                    "end": 15
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 16,
                      "end": 20
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 142,
                          "end": 152
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 111,
                    "end": 121
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 126,
                    "end": 136
                  }
                }
              },
              {
                "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                "context": {
                  "type": "function",
                  "name": "auto-color",
                  "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                  "line": {
                    "start": 229,
                    "end": 243
                  }
                }
              }
            ]
          }
        }
      ],
      "throw": [
        "`#{$bg-color}` is not a valid color.",
        "`#{$threshold}` is not a nonnegative number."
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
      "commentRange": {
        "start": 250,
        "end": 253
      },
      "context": {
        "type": "function",
        "name": "decimal-round",
        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
        "line": {
          "start": 254,
          "end": 280
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "number"
        },
        {
          "type": "<number>",
          "name": "places"
        },
        {
          "type": "<any> (round, ceil, floor)",
          "name": "mode",
          "default": "round"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a number.\n",
            "commentRange": {
              "start": 27,
              "end": 28
            },
            "context": {
              "type": "function",
              "name": "is-number",
              "code": "@return type-of($value) == number;\n",
              "line": {
                "start": 29,
                "end": 31
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 66,
                    "end": 76
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 81,
                    "end": 91
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 96,
                    "end": 106
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 254,
                    "end": 280
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 254,
                    "end": 280
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Ceils <code>$number</code> to given decimal <code>$places</code>.\n",
          "context": {
            "type": "function",
            "name": "decimal-ceil",
            "code": "@return decimal-round($number, $places, ceil);\n",
            "line": {
              "start": 285,
              "end": 287
            }
          }
        },
        {
          "description": "Floors <code>$number</code> to given decimal <code>$places</code>.\n",
          "context": {
            "type": "function",
            "name": "decimal-floor",
            "code": "@return decimal-round($number, $places, floor);\n",
            "line": {
              "start": 292,
              "end": 294
            }
          }
        }
      ]
    },
    {
      "description": "Ceils <code>$number</code> to given decimal <code>$places</code>.\n",
      "commentRange": {
        "start": 282,
        "end": 284
      },
      "context": {
        "type": "function",
        "name": "decimal-ceil",
        "code": "@return decimal-round($number, $places, ceil);\n",
        "line": {
          "start": 285,
          "end": 287
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "number"
        },
        {
          "type": "<number>",
          "name": "places"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "decimal-round",
          "autofill": true,
          "item": {
            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
            "commentRange": {
              "start": 250,
              "end": 253
            },
            "context": {
              "type": "function",
              "name": "decimal-round",
              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
              "line": {
                "start": 254,
                "end": 280
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "number"
              },
              {
                "type": "<number>",
                "name": "places"
              },
              {
                "type": "<any> (round, ceil, floor)",
                "name": "mode",
                "default": "round"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 27,
                    "end": 28
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 29,
                      "end": 31
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 254,
                          "end": 280
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 254,
                          "end": 280
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Ceils <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-ceil",
                  "code": "@return decimal-round($number, $places, ceil);\n",
                  "line": {
                    "start": 285,
                    "end": 287
                  }
                }
              },
              {
                "description": "Floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-floor",
                  "code": "@return decimal-round($number, $places, floor);\n",
                  "line": {
                    "start": 292,
                    "end": 294
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Floors <code>$number</code> to given decimal <code>$places</code>.\n",
      "commentRange": {
        "start": 289,
        "end": 291
      },
      "context": {
        "type": "function",
        "name": "decimal-floor",
        "code": "@return decimal-round($number, $places, floor);\n",
        "line": {
          "start": 292,
          "end": 294
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "number"
        },
        {
          "type": "<number>",
          "name": "places"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "decimal-round",
          "autofill": true,
          "item": {
            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
            "commentRange": {
              "start": 250,
              "end": 253
            },
            "context": {
              "type": "function",
              "name": "decimal-round",
              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
              "line": {
                "start": 254,
                "end": 280
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "number"
              },
              {
                "type": "<number>",
                "name": "places"
              },
              {
                "type": "<any> (round, ceil, floor)",
                "name": "mode",
                "default": "round"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 27,
                    "end": 28
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 29,
                      "end": 31
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 254,
                          "end": 280
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 254,
                          "end": 280
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Ceils <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-ceil",
                  "code": "@return decimal-round($number, $places, ceil);\n",
                  "line": {
                    "start": 285,
                    "end": 287
                  }
                }
              },
              {
                "description": "Floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-floor",
                  "code": "@return decimal-round($number, $places, floor);\n",
                  "line": {
                    "start": 292,
                    "end": 294
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Removes the unit from <code>$number</code>.\n",
      "commentRange": {
        "start": 296,
        "end": 297
      },
      "context": {
        "type": "function",
        "name": "strip-unit",
        "code": "@if type-of($number) == 'number' and not unitless($number) {\n    @return $number / ($number * 0 + 1);\n}\n\n@return $number;\n",
        "line": {
          "start": 298,
          "end": 304
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "number"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Converts <code>$size-in-rem</code> to pixels based on <code>$font-size-base</code>.\n",
          "context": {
            "type": "function",
            "name": "rem-to-pixels",
            "code": "@return strip-unit($size-in-rem) * $font-size-base;\n",
            "line": {
              "start": 309,
              "end": 311
            }
          }
        }
      ]
    },
    {
      "description": "Converts <code>$size-in-rem</code> to pixels based on <code>$font-size-base</code>.\n",
      "commentRange": {
        "start": 306,
        "end": 308
      },
      "context": {
        "type": "function",
        "name": "rem-to-pixels",
        "code": "@return strip-unit($size-in-rem) * $font-size-base;\n",
        "line": {
          "start": 309,
          "end": 311
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "size-in-rem"
        },
        {
          "type": "<number>",
          "name": "font-size-base"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "strip-unit",
          "autofill": true,
          "item": {
            "description": "Removes the unit from <code>$number</code>.\n",
            "commentRange": {
              "start": 296,
              "end": 297
            },
            "context": {
              "type": "function",
              "name": "strip-unit",
              "code": "@if type-of($number) == 'number' and not unitless($number) {\n    @return $number / ($number * 0 + 1);\n}\n\n@return $number;\n",
              "line": {
                "start": 298,
                "end": 304
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "number"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Converts <code>$size-in-rem</code> to pixels based on <code>$font-size-base</code>.\n",
                "context": {
                  "type": "function",
                  "name": "rem-to-pixels",
                  "code": "@return strip-unit($size-in-rem) * $font-size-base;\n",
                  "line": {
                    "start": 309,
                    "end": 311
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    }
  ],
  "mixins": [
    {
      "description": "Utility to clear floats\n",
      "commentRange": {
        "start": 1,
        "end": 1
      },
      "context": {
        "type": "mixin",
        "name": "clearfix",
        "code": "&:before,\n&:after {\n    display:table;\n    clear:both;\n    width:100%;\n    content:'';\n}\n",
        "line": {
          "start": 2,
          "end": 10
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row",
            "code": "@include row-alleys(row, $alley-multiplier);\n@include clearfix();\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
            "line": {
              "start": 303,
              "end": 313
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 12,
        "end": 12
      },
      "context": {
        "type": "mixin",
        "name": "figcaption",
        "code": "padding-top:calc(var(--space) * 0.375);\ncolor:var(--color-contrast-medium);\ntext-align:center;\nfont-size:var(--font-size-xsmall);\n",
        "line": {
          "start": 13,
          "end": 18
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Converts <code>$aspect-width</code> and <code>$aspect-height</code> to the appropriate bottom padding.\n",
      "commentRange": {
        "start": 20,
        "end": 23
      },
      "context": {
        "type": "mixin",
        "name": "aspect-ratio-to-padding",
        "code": "padding-bottom:percentage($aspect-height / $aspect-width);\n",
        "line": {
          "start": 24,
          "end": 26
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "aspect-width",
          "default": "16"
        },
        {
          "type": "<number>",
          "name": "aspect-height",
          "default": "9"
        }
      ],
      "access": "private",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "Adds styles for a responsive video container.\n",
          "context": {
            "type": "mixin",
            "name": "video-container",
            "code": "@include aspect-ratio-to-padding($aspect-width, $aspect-height);\n\nposition:relative;\ndisplay:block;\nheight:0;\n\niframe,\nobject,\nembed {\n    position:absolute;\n    top:0;\n    left:0;\n    width:100%;\n    height:100%;\n}\n",
            "line": {
              "start": 31,
              "end": 47
            }
          }
        }
      ]
    },
    {
      "description": "Adds styles for a responsive video container.\n",
      "commentRange": {
        "start": 28,
        "end": 30
      },
      "context": {
        "type": "mixin",
        "name": "video-container",
        "code": "@include aspect-ratio-to-padding($aspect-width, $aspect-height);\n\nposition:relative;\ndisplay:block;\nheight:0;\n\niframe,\nobject,\nembed {\n    position:absolute;\n    top:0;\n    left:0;\n    width:100%;\n    height:100%;\n}\n",
        "line": {
          "start": 31,
          "end": 47
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "aspect-width",
          "default": "16"
        },
        {
          "type": "<number>",
          "name": "aspect-height",
          "default": "9"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "aspect-ratio-to-padding",
          "autofill": true,
          "item": {
            "description": "Converts <code>$aspect-width</code> and <code>$aspect-height</code> to the appropriate bottom padding.\n",
            "commentRange": {
              "start": 20,
              "end": 23
            },
            "context": {
              "type": "mixin",
              "name": "aspect-ratio-to-padding",
              "code": "padding-bottom:percentage($aspect-height / $aspect-width);\n",
              "line": {
                "start": 24,
                "end": 26
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "aspect-width",
                "default": "16"
              },
              {
                "type": "<number>",
                "name": "aspect-height",
                "default": "9"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Adds styles for a responsive video container.\n",
                "context": {
                  "type": "mixin",
                  "name": "video-container",
                  "code": "@include aspect-ratio-to-padding($aspect-width, $aspect-height);\n\nposition:relative;\ndisplay:block;\nheight:0;\n\niframe,\nobject,\nembed {\n    position:absolute;\n    top:0;\n    left:0;\n    width:100%;\n    height:100%;\n}\n",
                  "line": {
                    "start": 31,
                    "end": 47
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Includes <code>@content</code> on screens up to <code>$max-width</code> wide.\n",
      "commentRange": {
        "start": 49,
        "end": 50
      },
      "context": {
        "type": "mixin",
        "name": "max",
        "code": "@media (max-width:$max-width) {\n    @content;\n}\n",
        "line": {
          "start": 51,
          "end": 55
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "max-width"
        }
      ],
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Includes <code>@content</code> on screens that are at least <code>$min-width</code> wide.\n",
      "commentRange": {
        "start": 57,
        "end": 58
      },
      "context": {
        "type": "mixin",
        "name": "min",
        "code": "@media (min-width:$min-width) {\n    @content;\n}\n",
        "line": {
          "start": 59,
          "end": 63
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "min-width"
        }
      ],
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "hide",
            "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
            "line": {
              "start": 231,
              "end": 241
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "hide",
            "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
            "line": {
              "start": 231,
              "end": 241
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 325,
              "end": 347
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 325,
              "end": 347
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 350,
              "end": 376
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 350,
              "end": 376
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 350,
              "end": 376
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 350,
              "end": 376
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 65,
        "end": 66
      },
      "context": {
        "type": "mixin",
        "name": "min-max",
        "code": "@media (min-width:$min-width) and (max-width:$max-width) {\n    @content;\n}\n",
        "line": {
          "start": 67,
          "end": 71
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "min-width"
        },
        {
          "type": "<number>",
          "name": "max-width"
        }
      ],
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 73,
        "end": 73
      },
      "context": {
        "type": "mixin",
        "name": "min-s",
        "code": "@media (min-width:$breakpoint-s) {\n    @content;\n}\n",
        "line": {
          "start": 74,
          "end": 78
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 80,
        "end": 80
      },
      "context": {
        "type": "mixin",
        "name": "min-m",
        "code": "@media (min-width:$breakpoint-m) {\n    @content;\n}\n",
        "line": {
          "start": 81,
          "end": 85
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 87,
        "end": 87
      },
      "context": {
        "type": "mixin",
        "name": "min-l",
        "code": "@media (min-width:$breakpoint-l) {\n    @content;\n}\n",
        "line": {
          "start": 88,
          "end": 92
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 94,
        "end": 94
      },
      "context": {
        "type": "mixin",
        "name": "min-xl",
        "code": "@media (min-width:$breakpoint-xl) {\n    @content;\n}\n",
        "line": {
          "start": 95,
          "end": 99
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Includes <code>@content</code> for ie9 and above.\n",
      "commentRange": {
        "start": 101,
        "end": 101
      },
      "context": {
        "type": "mixin",
        "name": "ie9plus",
        "code": "// @formatter:off\n@media (min-width:0\\0) and (min-resolution:+72dpi) {\n    @content;\n}\n// @formatter:on\n",
        "line": {
          "start": 102,
          "end": 108
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Includes <code>@content</code> for ie10 and above.\n",
      "commentRange": {
        "start": 110,
        "end": 110
      },
      "context": {
        "type": "mixin",
        "name": "ie10plus",
        "code": "@media (-ms-high-contrast:none), (-ms-high-contrast:active) {\n    @content;\n}\n",
        "line": {
          "start": 111,
          "end": 115
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Removes margins if element is first and/or last child (depending on scope).\n",
      "commentRange": {
        "start": 117,
        "end": 118
      },
      "context": {
        "type": "mixin",
        "name": "control-margins",
        "code": "$scope-y:$scope == vertical or $scope == all;\n$scope-x:$scope == horizontal or $scope == all;\n\n@if $scope-y or $scope == top {\n    &:first-child:not(.f-margins) {\n        margin-top:0 !important;\n    }\n}\n\n@if $scope-x or $scope == right {\n    &:last-child:not(.f-margins) {\n        margin-right:0 !important;\n    }\n}\n\n@if $scope-y or $scope == bottom {\n    &:last-child:not(.f-margins) {\n        margin-bottom:0 !important;\n    }\n}\n\n@if $scope-x or $scope == left {\n    &:first-child:not(.f-margins) {\n        margin-left:0 !important;\n    }\n}\n",
        "line": {
          "start": 119,
          "end": 146
        }
      },
      "parameter": [
        {
          "type": "<string>",
          "name": "scope",
          "default": "all"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "Removes bottom margins from last children.\n",
          "context": {
            "type": "mixin",
            "name": "controlled",
            "code": "* {\n    @include control-margins($scope);\n}\n",
            "line": {
              "start": 149,
              "end": 153
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, calc(var(--space) * #{$m}), var(--space));\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n\ncaption {\n    margin-bottom:if($m, calc(var(--space) * .25 * #{$m}), calc(var(--space) * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
            "line": {
              "start": 157,
              "end": 198
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "h",
            "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
            "line": {
              "start": 202,
              "end": 216
            }
          }
        }
      ]
    },
    {
      "description": "Removes bottom margins from last children.\n",
      "commentRange": {
        "start": 148,
        "end": 148
      },
      "context": {
        "type": "mixin",
        "name": "controlled",
        "code": "* {\n    @include control-margins($scope);\n}\n",
        "line": {
          "start": 149,
          "end": 153
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "control-margins",
          "autofill": true,
          "item": {
            "description": "Removes margins if element is first and/or last child (depending on scope).\n",
            "commentRange": {
              "start": 117,
              "end": 118
            },
            "context": {
              "type": "mixin",
              "name": "control-margins",
              "code": "$scope-y:$scope == vertical or $scope == all;\n$scope-x:$scope == horizontal or $scope == all;\n\n@if $scope-y or $scope == top {\n    &:first-child:not(.f-margins) {\n        margin-top:0 !important;\n    }\n}\n\n@if $scope-x or $scope == right {\n    &:last-child:not(.f-margins) {\n        margin-right:0 !important;\n    }\n}\n\n@if $scope-y or $scope == bottom {\n    &:last-child:not(.f-margins) {\n        margin-bottom:0 !important;\n    }\n}\n\n@if $scope-x or $scope == left {\n    &:first-child:not(.f-margins) {\n        margin-left:0 !important;\n    }\n}\n",
              "line": {
                "start": 119,
                "end": 146
              }
            },
            "parameter": [
              {
                "type": "<string>",
                "name": "scope",
                "default": "all"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Removes bottom margins from last children.\n",
                "context": {
                  "type": "mixin",
                  "name": "controlled",
                  "code": "* {\n    @include control-margins($scope);\n}\n",
                  "line": {
                    "start": 149,
                    "end": 153
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, calc(var(--space) * #{$m}), var(--space));\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n\ncaption {\n    margin-bottom:if($m, calc(var(--space) * .25 * #{$m}), calc(var(--space) * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                  "line": {
                    "start": 157,
                    "end": 198
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                  "line": {
                    "start": 202,
                    "end": 216
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Sets default vertical margins for selected elements\n",
      "commentRange": {
        "start": 155,
        "end": 156
      },
      "context": {
        "type": "mixin",
        "name": "vertical-margins",
        "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, calc(var(--space) * #{$m}), var(--space));\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n\ncaption {\n    margin-bottom:if($m, calc(var(--space) * .25 * #{$m}), calc(var(--space) * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
        "line": {
          "start": 157,
          "end": 198
        }
      },
      "parameter": [
        {
          "type": "<number>|false",
          "name": "multiplier",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "control-margins",
          "autofill": true,
          "item": {
            "description": "Removes margins if element is first and/or last child (depending on scope).\n",
            "commentRange": {
              "start": 117,
              "end": 118
            },
            "context": {
              "type": "mixin",
              "name": "control-margins",
              "code": "$scope-y:$scope == vertical or $scope == all;\n$scope-x:$scope == horizontal or $scope == all;\n\n@if $scope-y or $scope == top {\n    &:first-child:not(.f-margins) {\n        margin-top:0 !important;\n    }\n}\n\n@if $scope-x or $scope == right {\n    &:last-child:not(.f-margins) {\n        margin-right:0 !important;\n    }\n}\n\n@if $scope-y or $scope == bottom {\n    &:last-child:not(.f-margins) {\n        margin-bottom:0 !important;\n    }\n}\n\n@if $scope-x or $scope == left {\n    &:first-child:not(.f-margins) {\n        margin-left:0 !important;\n    }\n}\n",
              "line": {
                "start": 119,
                "end": 146
              }
            },
            "parameter": [
              {
                "type": "<string>",
                "name": "scope",
                "default": "all"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Removes bottom margins from last children.\n",
                "context": {
                  "type": "mixin",
                  "name": "controlled",
                  "code": "* {\n    @include control-margins($scope);\n}\n",
                  "line": {
                    "start": 149,
                    "end": 153
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, calc(var(--space) * #{$m}), var(--space));\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n\ncaption {\n    margin-bottom:if($m, calc(var(--space) * .25 * #{$m}), calc(var(--space) * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                  "line": {
                    "start": 157,
                    "end": 198
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                  "line": {
                    "start": 202,
                    "end": 216
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
            "commentRange": {
              "start": 123,
              "end": 125
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unitless-number",
              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
              "line": {
                "start": 126,
                "end": 136
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 93,
                    "end": 95
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 96,
                      "end": 106
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 27,
                          "end": 28
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 29,
                            "end": 31
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 13,
                          "end": 15
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 16,
                            "end": 20
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 142,
                                "end": 152
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 229,
                          "end": 243
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 13,
                    "end": 15
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 16,
                      "end": 20
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 142,
                          "end": 152
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, calc(var(--space) * #{$m}), var(--space));\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n\ncaption {\n    margin-bottom:if($m, calc(var(--space) * .25 * #{$m}), calc(var(--space) * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                  "line": {
                    "start": 157,
                    "end": 198
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                  "line": {
                    "start": 202,
                    "end": 216
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgb",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\n@if $important == true {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space)) !important;\n} @else {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                  "line": {
                    "start": 245,
                    "end": 253
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n    margin-left:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n} @else if $type == col {\n    padding-right:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n    padding-left:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n}\n",
                  "line": {
                    "start": 284,
                    "end": 300
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 347
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 350,
                    "end": 376
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 200,
        "end": 201
      },
      "context": {
        "type": "mixin",
        "name": "h",
        "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
        "line": {
          "start": 202,
          "end": 216
        }
      },
      "parameter": [
        {
          "type": "1|2|3|4",
          "name": "type"
        },
        {
          "type": "<number>|false",
          "name": "margins-multiplier",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "control-margins",
          "autofill": true,
          "item": {
            "description": "Removes margins if element is first and/or last child (depending on scope).\n",
            "commentRange": {
              "start": 117,
              "end": 118
            },
            "context": {
              "type": "mixin",
              "name": "control-margins",
              "code": "$scope-y:$scope == vertical or $scope == all;\n$scope-x:$scope == horizontal or $scope == all;\n\n@if $scope-y or $scope == top {\n    &:first-child:not(.f-margins) {\n        margin-top:0 !important;\n    }\n}\n\n@if $scope-x or $scope == right {\n    &:last-child:not(.f-margins) {\n        margin-right:0 !important;\n    }\n}\n\n@if $scope-y or $scope == bottom {\n    &:last-child:not(.f-margins) {\n        margin-bottom:0 !important;\n    }\n}\n\n@if $scope-x or $scope == left {\n    &:first-child:not(.f-margins) {\n        margin-left:0 !important;\n    }\n}\n",
              "line": {
                "start": 119,
                "end": 146
              }
            },
            "parameter": [
              {
                "type": "<string>",
                "name": "scope",
                "default": "all"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Removes bottom margins from last children.\n",
                "context": {
                  "type": "mixin",
                  "name": "controlled",
                  "code": "* {\n    @include control-margins($scope);\n}\n",
                  "line": {
                    "start": 149,
                    "end": 153
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, calc(var(--space) * #{$m}), var(--space));\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n\ncaption {\n    margin-bottom:if($m, calc(var(--space) * .25 * #{$m}), calc(var(--space) * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                  "line": {
                    "start": 157,
                    "end": 198
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                  "line": {
                    "start": 202,
                    "end": 216
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
            "commentRange": {
              "start": 123,
              "end": 125
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unitless-number",
              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
              "line": {
                "start": 126,
                "end": 136
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 93,
                    "end": 95
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 96,
                      "end": 106
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 27,
                          "end": 28
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 29,
                            "end": 31
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 13,
                          "end": 15
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 16,
                            "end": 20
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 142,
                                "end": 152
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 229,
                          "end": 243
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 13,
                    "end": 15
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 16,
                      "end": 20
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 142,
                          "end": 152
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, calc(var(--space) * #{$m}), var(--space));\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n\ncaption {\n    margin-bottom:if($m, calc(var(--space) * .25 * #{$m}), calc(var(--space) * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                  "line": {
                    "start": 157,
                    "end": 198
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                  "line": {
                    "start": 202,
                    "end": 216
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgb",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\n@if $important == true {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space)) !important;\n} @else {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                  "line": {
                    "start": 245,
                    "end": 253
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n    margin-left:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n} @else if $type == col {\n    padding-right:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n    padding-left:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n}\n",
                  "line": {
                    "start": 284,
                    "end": 300
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 347
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 350,
                    "end": 376
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 218,
        "end": 218
      },
      "context": {
        "type": "mixin",
        "name": "ellipsis",
        "code": "overflow:hidden;\ntext-overflow:ellipsis;\nwhite-space:nowrap;\n",
        "line": {
          "start": 219,
          "end": 223
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Removes border radius\n",
      "commentRange": {
        "start": 225,
        "end": 225
      },
      "context": {
        "type": "mixin",
        "name": "sq",
        "code": "border-radius:0;\n",
        "line": {
          "start": 226,
          "end": 228
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 230,
        "end": 230
      },
      "context": {
        "type": "mixin",
        "name": "hide",
        "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
        "line": {
          "start": 231,
          "end": 241
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "min",
          "autofill": true,
          "item": {
            "description": "Includes <code>@content</code> on screens that are at least <code>$min-width</code> wide.\n",
            "commentRange": {
              "start": 57,
              "end": 58
            },
            "context": {
              "type": "mixin",
              "name": "min",
              "code": "@media (min-width:$min-width) {\n    @content;\n}\n",
              "line": {
                "start": 59,
                "end": 63
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "min-width"
              }
            ],
            "access": "public",
            "content": "",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 231,
                    "end": 241
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 231,
                    "end": 241
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 347
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 347
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 350,
                    "end": 376
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 350,
                    "end": 376
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 350,
                    "end": 376
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 350,
                    "end": 376
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unit-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
            "commentRange": {
              "start": 108,
              "end": 110
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unit-number",
              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 111,
                "end": 121
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 93,
                    "end": 95
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 96,
                      "end": 106
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 27,
                          "end": 28
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 29,
                            "end": 31
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 13,
                          "end": 15
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 16,
                            "end": 20
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 142,
                                "end": 152
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 229,
                          "end": 243
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 13,
                    "end": 15
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 16,
                      "end": 20
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 142,
                          "end": 152
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 231,
                    "end": 241
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 347
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 350,
                    "end": 376
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 350,
                    "end": 376
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 243,
        "end": 244
      },
      "context": {
        "type": "mixin",
        "name": "mgb",
        "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\n@if $important == true {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space)) !important;\n} @else {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
        "line": {
          "start": 245,
          "end": 253
        }
      },
      "parameter": [
        {
          "type": "<number>|false",
          "name": "multiplier",
          "default": "false"
        },
        {
          "type": "<bool>",
          "name": "important",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-nonneg-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
            "commentRange": {
              "start": 123,
              "end": 125
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unitless-number",
              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
              "line": {
                "start": 126,
                "end": 136
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 93,
                    "end": 95
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 96,
                      "end": 106
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 27,
                          "end": 28
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 29,
                            "end": 31
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 13,
                          "end": 15
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 16,
                            "end": 20
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 142,
                                "end": 152
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 229,
                          "end": 243
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 13,
                    "end": 15
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 16,
                      "end": 20
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 142,
                          "end": 152
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, calc(var(--space) * #{$m}), var(--space));\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n\ncaption {\n    margin-bottom:if($m, calc(var(--space) * .25 * #{$m}), calc(var(--space) * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                  "line": {
                    "start": 157,
                    "end": 198
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                  "line": {
                    "start": 202,
                    "end": 216
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgb",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\n@if $important == true {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space)) !important;\n} @else {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                  "line": {
                    "start": 245,
                    "end": 253
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n    margin-left:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n} @else if $type == col {\n    padding-right:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n    padding-left:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n}\n",
                  "line": {
                    "start": 284,
                    "end": 300
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 347
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 350,
                    "end": 376
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "mgbch",
            "code": "> * {\n    @include mgb($multiplier, $important);\n}\n",
            "line": {
              "start": 257,
              "end": 261
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "mgb-row",
            "code": "&:not(:last-child):after,\n&.f-margins:last-child:after {\n    @include mgb($multiplier, $important);\n}\n",
            "line": {
              "start": 265,
              "end": 270
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "mgbch-row",
            "code": "@include mgb(-$multiplier, $important);\n\n> * {\n    @include mgb($multiplier, $important);\n}\n",
            "line": {
              "start": 274,
              "end": 280
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "mgbch-row",
            "code": "@include mgb(-$multiplier, $important);\n\n> * {\n    @include mgb($multiplier, $important);\n}\n",
            "line": {
              "start": 274,
              "end": 280
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 255,
        "end": 256
      },
      "context": {
        "type": "mixin",
        "name": "mgbch",
        "code": "> * {\n    @include mgb($multiplier, $important);\n}\n",
        "line": {
          "start": 257,
          "end": 261
        }
      },
      "parameter": [
        {
          "type": "<number>|false",
          "name": "multiplier",
          "default": "false"
        },
        {
          "type": "<bool>",
          "name": "important",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "mgb",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 243,
              "end": 244
            },
            "context": {
              "type": "mixin",
              "name": "mgb",
              "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\n@if $important == true {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space)) !important;\n} @else {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
              "line": {
                "start": 245,
                "end": 253
              }
            },
            "parameter": [
              {
                "type": "<number>|false",
                "name": "multiplier",
                "default": "false"
              },
              {
                "type": "<bool>",
                "name": "important",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-unitless-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                  "commentRange": {
                    "start": 123,
                    "end": 125
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-unitless-number",
                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 126,
                      "end": 136
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-nonneg-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                        "commentRange": {
                          "start": 93,
                          "end": 95
                        },
                        "context": {
                          "type": "function",
                          "name": "is-nonneg-number",
                          "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                          "line": {
                            "start": 96,
                            "end": 106
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          },
                          {
                            "type": "<bool>",
                            "name": "warn",
                            "default": "false"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [
                          {
                            "type": "function",
                            "name": "is-number",
                            "autofill": true,
                            "item": {
                              "description": "Checks if <code>$value</code> is a number.\n",
                              "commentRange": {
                                "start": 27,
                                "end": 28
                              },
                              "context": {
                                "type": "function",
                                "name": "is-number",
                                "code": "@return type-of($value) == number;\n",
                                "line": {
                                  "start": 29,
                                  "end": 31
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "public",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 66,
                                      "end": 76
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 81,
                                      "end": 91
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 96,
                                      "end": 106
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 254,
                                      "end": 280
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 254,
                                      "end": 280
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "function",
                            "name": "show-param-value",
                            "autofill": true,
                            "item": {
                              "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                              "commentRange": {
                                "start": 13,
                                "end": 15
                              },
                              "context": {
                                "type": "function",
                                "name": "show-param-value",
                                "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                "line": {
                                  "start": 16,
                                  "end": 20
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "private",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 66,
                                      "end": 76
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 81,
                                      "end": 91
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 96,
                                      "end": 106
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 111,
                                      "end": 121
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 126,
                                      "end": 136
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-in-list",
                                    "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 142,
                                      "end": 152
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "auto-color",
                              "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                              "line": {
                                "start": 229,
                                "end": 243
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 13,
                          "end": 15
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 16,
                            "end": 20
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 142,
                                "end": 152
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Sets default vertical margins for selected elements\n",
                      "context": {
                        "type": "mixin",
                        "name": "vertical-margins",
                        "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, calc(var(--space) * #{$m}), var(--space));\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n\ncaption {\n    margin-bottom:if($m, calc(var(--space) * .25 * #{$m}), calc(var(--space) * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                        "line": {
                          "start": 157,
                          "end": 198
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "h",
                        "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                        "line": {
                          "start": 202,
                          "end": 216
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "mgb",
                        "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\n@if $important == true {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space)) !important;\n} @else {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                        "line": {
                          "start": 245,
                          "end": 253
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n    margin-left:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n} @else if $type == col {\n    padding-right:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n    padding-left:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n}\n",
                        "line": {
                          "start": 284,
                          "end": 300
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley",
                        "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                        "line": {
                          "start": 325,
                          "end": 347
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "col-width",
                        "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                        "line": {
                          "start": 350,
                          "end": 376
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch",
                  "code": "> * {\n    @include mgb($multiplier, $important);\n}\n",
                  "line": {
                    "start": 257,
                    "end": 261
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgb-row",
                  "code": "&:not(:last-child):after,\n&.f-margins:last-child:after {\n    @include mgb($multiplier, $important);\n}\n",
                  "line": {
                    "start": 265,
                    "end": 270
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch-row",
                  "code": "@include mgb(-$multiplier, $important);\n\n> * {\n    @include mgb($multiplier, $important);\n}\n",
                  "line": {
                    "start": 274,
                    "end": 280
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch-row",
                  "code": "@include mgb(-$multiplier, $important);\n\n> * {\n    @include mgb($multiplier, $important);\n}\n",
                  "line": {
                    "start": 274,
                    "end": 280
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 263,
        "end": 264
      },
      "context": {
        "type": "mixin",
        "name": "mgb-row",
        "code": "&:not(:last-child):after,\n&.f-margins:last-child:after {\n    @include mgb($multiplier, $important);\n}\n",
        "line": {
          "start": 265,
          "end": 270
        }
      },
      "parameter": [
        {
          "type": "<number>|false",
          "name": "multiplier",
          "default": "false"
        },
        {
          "type": "<bool>",
          "name": "important",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "mgb",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 243,
              "end": 244
            },
            "context": {
              "type": "mixin",
              "name": "mgb",
              "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\n@if $important == true {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space)) !important;\n} @else {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
              "line": {
                "start": 245,
                "end": 253
              }
            },
            "parameter": [
              {
                "type": "<number>|false",
                "name": "multiplier",
                "default": "false"
              },
              {
                "type": "<bool>",
                "name": "important",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-unitless-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                  "commentRange": {
                    "start": 123,
                    "end": 125
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-unitless-number",
                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 126,
                      "end": 136
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-nonneg-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                        "commentRange": {
                          "start": 93,
                          "end": 95
                        },
                        "context": {
                          "type": "function",
                          "name": "is-nonneg-number",
                          "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                          "line": {
                            "start": 96,
                            "end": 106
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          },
                          {
                            "type": "<bool>",
                            "name": "warn",
                            "default": "false"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [
                          {
                            "type": "function",
                            "name": "is-number",
                            "autofill": true,
                            "item": {
                              "description": "Checks if <code>$value</code> is a number.\n",
                              "commentRange": {
                                "start": 27,
                                "end": 28
                              },
                              "context": {
                                "type": "function",
                                "name": "is-number",
                                "code": "@return type-of($value) == number;\n",
                                "line": {
                                  "start": 29,
                                  "end": 31
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "public",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 66,
                                      "end": 76
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 81,
                                      "end": 91
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 96,
                                      "end": 106
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 254,
                                      "end": 280
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 254,
                                      "end": 280
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "function",
                            "name": "show-param-value",
                            "autofill": true,
                            "item": {
                              "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                              "commentRange": {
                                "start": 13,
                                "end": 15
                              },
                              "context": {
                                "type": "function",
                                "name": "show-param-value",
                                "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                "line": {
                                  "start": 16,
                                  "end": 20
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "private",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 66,
                                      "end": 76
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 81,
                                      "end": 91
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 96,
                                      "end": 106
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 111,
                                      "end": 121
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 126,
                                      "end": 136
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-in-list",
                                    "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 142,
                                      "end": 152
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "auto-color",
                              "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                              "line": {
                                "start": 229,
                                "end": 243
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 13,
                          "end": 15
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 16,
                            "end": 20
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 142,
                                "end": 152
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Sets default vertical margins for selected elements\n",
                      "context": {
                        "type": "mixin",
                        "name": "vertical-margins",
                        "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, calc(var(--space) * #{$m}), var(--space));\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n\ncaption {\n    margin-bottom:if($m, calc(var(--space) * .25 * #{$m}), calc(var(--space) * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                        "line": {
                          "start": 157,
                          "end": 198
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "h",
                        "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                        "line": {
                          "start": 202,
                          "end": 216
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "mgb",
                        "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\n@if $important == true {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space)) !important;\n} @else {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                        "line": {
                          "start": 245,
                          "end": 253
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n    margin-left:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n} @else if $type == col {\n    padding-right:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n    padding-left:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n}\n",
                        "line": {
                          "start": 284,
                          "end": 300
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley",
                        "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                        "line": {
                          "start": 325,
                          "end": 347
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "col-width",
                        "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                        "line": {
                          "start": 350,
                          "end": 376
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch",
                  "code": "> * {\n    @include mgb($multiplier, $important);\n}\n",
                  "line": {
                    "start": 257,
                    "end": 261
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgb-row",
                  "code": "&:not(:last-child):after,\n&.f-margins:last-child:after {\n    @include mgb($multiplier, $important);\n}\n",
                  "line": {
                    "start": 265,
                    "end": 270
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch-row",
                  "code": "@include mgb(-$multiplier, $important);\n\n> * {\n    @include mgb($multiplier, $important);\n}\n",
                  "line": {
                    "start": 274,
                    "end": 280
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch-row",
                  "code": "@include mgb(-$multiplier, $important);\n\n> * {\n    @include mgb($multiplier, $important);\n}\n",
                  "line": {
                    "start": 274,
                    "end": 280
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 272,
        "end": 273
      },
      "context": {
        "type": "mixin",
        "name": "mgbch-row",
        "code": "@include mgb(-$multiplier, $important);\n\n> * {\n    @include mgb($multiplier, $important);\n}\n",
        "line": {
          "start": 274,
          "end": 280
        }
      },
      "parameter": [
        {
          "type": "<number>|false",
          "name": "multiplier",
          "default": "false"
        },
        {
          "type": "<bool>",
          "name": "important",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "mgb",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 243,
              "end": 244
            },
            "context": {
              "type": "mixin",
              "name": "mgb",
              "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\n@if $important == true {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space)) !important;\n} @else {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
              "line": {
                "start": 245,
                "end": 253
              }
            },
            "parameter": [
              {
                "type": "<number>|false",
                "name": "multiplier",
                "default": "false"
              },
              {
                "type": "<bool>",
                "name": "important",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-unitless-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                  "commentRange": {
                    "start": 123,
                    "end": 125
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-unitless-number",
                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 126,
                      "end": 136
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-nonneg-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                        "commentRange": {
                          "start": 93,
                          "end": 95
                        },
                        "context": {
                          "type": "function",
                          "name": "is-nonneg-number",
                          "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                          "line": {
                            "start": 96,
                            "end": 106
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          },
                          {
                            "type": "<bool>",
                            "name": "warn",
                            "default": "false"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [
                          {
                            "type": "function",
                            "name": "is-number",
                            "autofill": true,
                            "item": {
                              "description": "Checks if <code>$value</code> is a number.\n",
                              "commentRange": {
                                "start": 27,
                                "end": 28
                              },
                              "context": {
                                "type": "function",
                                "name": "is-number",
                                "code": "@return type-of($value) == number;\n",
                                "line": {
                                  "start": 29,
                                  "end": 31
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "public",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 66,
                                      "end": 76
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 81,
                                      "end": 91
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 96,
                                      "end": 106
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 254,
                                      "end": 280
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 254,
                                      "end": 280
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "function",
                            "name": "show-param-value",
                            "autofill": true,
                            "item": {
                              "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                              "commentRange": {
                                "start": 13,
                                "end": 15
                              },
                              "context": {
                                "type": "function",
                                "name": "show-param-value",
                                "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                "line": {
                                  "start": 16,
                                  "end": 20
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "private",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 66,
                                      "end": 76
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 81,
                                      "end": 91
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 96,
                                      "end": 106
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 111,
                                      "end": 121
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 126,
                                      "end": 136
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-in-list",
                                    "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 142,
                                      "end": 152
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "auto-color",
                              "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                              "line": {
                                "start": 229,
                                "end": 243
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 13,
                          "end": 15
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 16,
                            "end": 20
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 142,
                                "end": 152
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Sets default vertical margins for selected elements\n",
                      "context": {
                        "type": "mixin",
                        "name": "vertical-margins",
                        "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, calc(var(--space) * #{$m}), var(--space));\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n\ncaption {\n    margin-bottom:if($m, calc(var(--space) * .25 * #{$m}), calc(var(--space) * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                        "line": {
                          "start": 157,
                          "end": 198
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "h",
                        "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                        "line": {
                          "start": 202,
                          "end": 216
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "mgb",
                        "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\n@if $important == true {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space)) !important;\n} @else {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                        "line": {
                          "start": 245,
                          "end": 253
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n    margin-left:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n} @else if $type == col {\n    padding-right:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n    padding-left:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n}\n",
                        "line": {
                          "start": 284,
                          "end": 300
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley",
                        "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                        "line": {
                          "start": 325,
                          "end": 347
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "col-width",
                        "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                        "line": {
                          "start": 350,
                          "end": 376
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch",
                  "code": "> * {\n    @include mgb($multiplier, $important);\n}\n",
                  "line": {
                    "start": 257,
                    "end": 261
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgb-row",
                  "code": "&:not(:last-child):after,\n&.f-margins:last-child:after {\n    @include mgb($multiplier, $important);\n}\n",
                  "line": {
                    "start": 265,
                    "end": 270
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch-row",
                  "code": "@include mgb(-$multiplier, $important);\n\n> * {\n    @include mgb($multiplier, $important);\n}\n",
                  "line": {
                    "start": 274,
                    "end": 280
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch-row",
                  "code": "@include mgb(-$multiplier, $important);\n\n> * {\n    @include mgb($multiplier, $important);\n}\n",
                  "line": {
                    "start": 274,
                    "end": 280
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 282,
        "end": 283
      },
      "context": {
        "type": "mixin",
        "name": "row-alleys",
        "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n    margin-left:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n} @else if $type == col {\n    padding-right:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n    padding-left:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n}\n",
        "line": {
          "start": 284,
          "end": 300
        }
      },
      "parameter": [
        {
          "type": "row|col",
          "name": "type",
          "default": "row"
        },
        {
          "type": "<number>|false",
          "name": "multiplier",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-nonneg-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
            "commentRange": {
              "start": 123,
              "end": 125
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unitless-number",
              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
              "line": {
                "start": 126,
                "end": 136
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 93,
                    "end": 95
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 96,
                      "end": 106
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 27,
                          "end": 28
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 29,
                            "end": 31
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 13,
                          "end": 15
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 16,
                            "end": 20
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 142,
                                "end": 152
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 229,
                          "end": 243
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 13,
                    "end": 15
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 16,
                      "end": 20
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 142,
                          "end": 152
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, calc(var(--space) * #{$m}), var(--space));\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n\ncaption {\n    margin-bottom:if($m, calc(var(--space) * .25 * #{$m}), calc(var(--space) * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                  "line": {
                    "start": 157,
                    "end": 198
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                  "line": {
                    "start": 202,
                    "end": 216
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgb",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\n@if $important == true {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space)) !important;\n} @else {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                  "line": {
                    "start": 245,
                    "end": 253
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n    margin-left:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n} @else if $type == col {\n    padding-right:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n    padding-left:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n}\n",
                  "line": {
                    "start": 284,
                    "end": 300
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 347
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 350,
                    "end": 376
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row",
            "code": "@include row-alleys(row, $alley-multiplier);\n@include clearfix();\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
            "line": {
              "start": 303,
              "end": 313
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row",
            "code": "@include row-alleys(row, $alley-multiplier);\n@include clearfix();\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
            "line": {
              "start": 303,
              "end": 313
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley-styles",
            "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
            "line": {
              "start": 316,
              "end": 322
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley-styles",
            "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
            "line": {
              "start": 316,
              "end": 322
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 302,
        "end": 302
      },
      "context": {
        "type": "mixin",
        "name": "row",
        "code": "@include row-alleys(row, $alley-multiplier);\n@include clearfix();\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
        "line": {
          "start": 303,
          "end": 313
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "row-alleys",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 282,
              "end": 283
            },
            "context": {
              "type": "mixin",
              "name": "row-alleys",
              "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n    margin-left:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n} @else if $type == col {\n    padding-right:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n    padding-left:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n}\n",
              "line": {
                "start": 284,
                "end": 300
              }
            },
            "parameter": [
              {
                "type": "row|col",
                "name": "type",
                "default": "row"
              },
              {
                "type": "<number>|false",
                "name": "multiplier",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-unitless-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                  "commentRange": {
                    "start": 123,
                    "end": 125
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-unitless-number",
                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 126,
                      "end": 136
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-nonneg-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                        "commentRange": {
                          "start": 93,
                          "end": 95
                        },
                        "context": {
                          "type": "function",
                          "name": "is-nonneg-number",
                          "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                          "line": {
                            "start": 96,
                            "end": 106
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          },
                          {
                            "type": "<bool>",
                            "name": "warn",
                            "default": "false"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [
                          {
                            "type": "function",
                            "name": "is-number",
                            "autofill": true,
                            "item": {
                              "description": "Checks if <code>$value</code> is a number.\n",
                              "commentRange": {
                                "start": 27,
                                "end": 28
                              },
                              "context": {
                                "type": "function",
                                "name": "is-number",
                                "code": "@return type-of($value) == number;\n",
                                "line": {
                                  "start": 29,
                                  "end": 31
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "public",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 66,
                                      "end": 76
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 81,
                                      "end": 91
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 96,
                                      "end": 106
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 254,
                                      "end": 280
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 254,
                                      "end": 280
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "function",
                            "name": "show-param-value",
                            "autofill": true,
                            "item": {
                              "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                              "commentRange": {
                                "start": 13,
                                "end": 15
                              },
                              "context": {
                                "type": "function",
                                "name": "show-param-value",
                                "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                "line": {
                                  "start": 16,
                                  "end": 20
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "private",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 66,
                                      "end": 76
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 81,
                                      "end": 91
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 96,
                                      "end": 106
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 111,
                                      "end": 121
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 126,
                                      "end": 136
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-in-list",
                                    "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 142,
                                      "end": 152
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "auto-color",
                              "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                              "line": {
                                "start": 229,
                                "end": 243
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 13,
                          "end": 15
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 16,
                            "end": 20
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 142,
                                "end": 152
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Sets default vertical margins for selected elements\n",
                      "context": {
                        "type": "mixin",
                        "name": "vertical-margins",
                        "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, calc(var(--space) * #{$m}), var(--space));\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n\ncaption {\n    margin-bottom:if($m, calc(var(--space) * .25 * #{$m}), calc(var(--space) * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                        "line": {
                          "start": 157,
                          "end": 198
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "h",
                        "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                        "line": {
                          "start": 202,
                          "end": 216
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "mgb",
                        "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\n@if $important == true {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space)) !important;\n} @else {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                        "line": {
                          "start": 245,
                          "end": 253
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n    margin-left:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n} @else if $type == col {\n    padding-right:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n    padding-left:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n}\n",
                        "line": {
                          "start": 284,
                          "end": 300
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley",
                        "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                        "line": {
                          "start": 325,
                          "end": 347
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "col-width",
                        "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                        "line": {
                          "start": 350,
                          "end": 376
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row",
                  "code": "@include row-alleys(row, $alley-multiplier);\n@include clearfix();\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 303,
                    "end": 313
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row",
                  "code": "@include row-alleys(row, $alley-multiplier);\n@include clearfix();\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 303,
                    "end": 313
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley-styles",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 316,
                    "end": 322
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley-styles",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 316,
                    "end": 322
                  }
                }
              }
            ]
          }
        },
        {
          "type": "mixin",
          "name": "clearfix",
          "autofill": true,
          "item": {
            "description": "Utility to clear floats\n",
            "commentRange": {
              "start": 1,
              "end": 1
            },
            "context": {
              "type": "mixin",
              "name": "clearfix",
              "code": "&:before,\n&:after {\n    display:table;\n    clear:both;\n    width:100%;\n    content:'';\n}\n",
              "line": {
                "start": 2,
                "end": 10
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row",
                  "code": "@include row-alleys(row, $alley-multiplier);\n@include clearfix();\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 303,
                    "end": 313
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 315,
        "end": 315
      },
      "context": {
        "type": "mixin",
        "name": "row-alley-styles",
        "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
        "line": {
          "start": 316,
          "end": 322
        }
      },
      "access": "private",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "row-alleys",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 282,
              "end": 283
            },
            "context": {
              "type": "mixin",
              "name": "row-alleys",
              "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n    margin-left:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n} @else if $type == col {\n    padding-right:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n    padding-left:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n}\n",
              "line": {
                "start": 284,
                "end": 300
              }
            },
            "parameter": [
              {
                "type": "row|col",
                "name": "type",
                "default": "row"
              },
              {
                "type": "<number>|false",
                "name": "multiplier",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-unitless-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                  "commentRange": {
                    "start": 123,
                    "end": 125
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-unitless-number",
                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 126,
                      "end": 136
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-nonneg-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                        "commentRange": {
                          "start": 93,
                          "end": 95
                        },
                        "context": {
                          "type": "function",
                          "name": "is-nonneg-number",
                          "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                          "line": {
                            "start": 96,
                            "end": 106
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          },
                          {
                            "type": "<bool>",
                            "name": "warn",
                            "default": "false"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [
                          {
                            "type": "function",
                            "name": "is-number",
                            "autofill": true,
                            "item": {
                              "description": "Checks if <code>$value</code> is a number.\n",
                              "commentRange": {
                                "start": 27,
                                "end": 28
                              },
                              "context": {
                                "type": "function",
                                "name": "is-number",
                                "code": "@return type-of($value) == number;\n",
                                "line": {
                                  "start": 29,
                                  "end": 31
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "public",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 66,
                                      "end": 76
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 81,
                                      "end": 91
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 96,
                                      "end": 106
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 254,
                                      "end": 280
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 254,
                                      "end": 280
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "function",
                            "name": "show-param-value",
                            "autofill": true,
                            "item": {
                              "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                              "commentRange": {
                                "start": 13,
                                "end": 15
                              },
                              "context": {
                                "type": "function",
                                "name": "show-param-value",
                                "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                "line": {
                                  "start": 16,
                                  "end": 20
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "private",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 66,
                                      "end": 76
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 81,
                                      "end": 91
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 96,
                                      "end": 106
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 111,
                                      "end": 121
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 126,
                                      "end": 136
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-in-list",
                                    "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 142,
                                      "end": 152
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "auto-color",
                              "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                              "line": {
                                "start": 229,
                                "end": 243
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 13,
                          "end": 15
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 16,
                            "end": 20
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 142,
                                "end": 152
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Sets default vertical margins for selected elements\n",
                      "context": {
                        "type": "mixin",
                        "name": "vertical-margins",
                        "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, calc(var(--space) * #{$m}), var(--space));\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n\ncaption {\n    margin-bottom:if($m, calc(var(--space) * .25 * #{$m}), calc(var(--space) * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                        "line": {
                          "start": 157,
                          "end": 198
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "h",
                        "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                        "line": {
                          "start": 202,
                          "end": 216
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "mgb",
                        "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\n@if $important == true {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space)) !important;\n} @else {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                        "line": {
                          "start": 245,
                          "end": 253
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n    margin-left:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n} @else if $type == col {\n    padding-right:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n    padding-left:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n}\n",
                        "line": {
                          "start": 284,
                          "end": 300
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley",
                        "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                        "line": {
                          "start": 325,
                          "end": 347
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "col-width",
                        "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                        "line": {
                          "start": 350,
                          "end": 376
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row",
                  "code": "@include row-alleys(row, $alley-multiplier);\n@include clearfix();\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 303,
                    "end": 313
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row",
                  "code": "@include row-alleys(row, $alley-multiplier);\n@include clearfix();\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 303,
                    "end": 313
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley-styles",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 316,
                    "end": 322
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley-styles",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 316,
                    "end": 322
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 325,
              "end": 347
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 325,
              "end": 347
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 325,
              "end": 347
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 324,
        "end": 324
      },
      "context": {
        "type": "mixin",
        "name": "row-alley",
        "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
        "line": {
          "start": 325,
          "end": 347
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "min",
          "autofill": true,
          "item": {
            "description": "Includes <code>@content</code> on screens that are at least <code>$min-width</code> wide.\n",
            "commentRange": {
              "start": 57,
              "end": 58
            },
            "context": {
              "type": "mixin",
              "name": "min",
              "code": "@media (min-width:$min-width) {\n    @content;\n}\n",
              "line": {
                "start": 59,
                "end": 63
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "min-width"
              }
            ],
            "access": "public",
            "content": "",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 231,
                    "end": 241
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 231,
                    "end": 241
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 347
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 347
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 350,
                    "end": 376
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 350,
                    "end": 376
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 350,
                    "end": 376
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 350,
                    "end": 376
                  }
                }
              }
            ]
          }
        },
        {
          "type": "mixin",
          "name": "row-alley-styles",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 315,
              "end": 315
            },
            "context": {
              "type": "mixin",
              "name": "row-alley-styles",
              "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
              "line": {
                "start": 316,
                "end": 322
              }
            },
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "mixin",
                "name": "row-alleys",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 282,
                    "end": 283
                  },
                  "context": {
                    "type": "mixin",
                    "name": "row-alleys",
                    "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n    margin-left:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n} @else if $type == col {\n    padding-right:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n    padding-left:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n}\n",
                    "line": {
                      "start": 284,
                      "end": 300
                    }
                  },
                  "parameter": [
                    {
                      "type": "row|col",
                      "name": "type",
                      "default": "row"
                    },
                    {
                      "type": "<number>|false",
                      "name": "multiplier",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-nonneg-unitless-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                        "commentRange": {
                          "start": 123,
                          "end": 125
                        },
                        "context": {
                          "type": "function",
                          "name": "is-nonneg-unitless-number",
                          "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                          "line": {
                            "start": 126,
                            "end": 136
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          },
                          {
                            "type": "<bool>",
                            "name": "warn",
                            "default": "false"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [
                          {
                            "type": "function",
                            "name": "is-nonneg-number",
                            "autofill": true,
                            "item": {
                              "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                              "commentRange": {
                                "start": 93,
                                "end": 95
                              },
                              "context": {
                                "type": "function",
                                "name": "is-nonneg-number",
                                "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                "line": {
                                  "start": 96,
                                  "end": 106
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                },
                                {
                                  "type": "<bool>",
                                  "name": "warn",
                                  "default": "false"
                                }
                              ],
                              "access": "public",
                              "group": [
                                "undefined"
                              ],
                              "require": [
                                {
                                  "type": "function",
                                  "name": "is-number",
                                  "autofill": true,
                                  "item": {
                                    "description": "Checks if <code>$value</code> is a number.\n",
                                    "commentRange": {
                                      "start": 27,
                                      "end": 28
                                    },
                                    "context": {
                                      "type": "function",
                                      "name": "is-number",
                                      "code": "@return type-of($value) == number;\n",
                                      "line": {
                                        "start": 29,
                                        "end": 31
                                      }
                                    },
                                    "parameter": [
                                      {
                                        "type": "<any>",
                                        "name": "value"
                                      }
                                    ],
                                    "access": "public",
                                    "group": [
                                      "undefined"
                                    ],
                                    "require": [],
                                    "file": {
                                      "path": "_funcs.scss",
                                      "name": "_funcs.scss"
                                    },
                                    "usedBy": [
                                      {
                                        "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-unit-number",
                                          "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 66,
                                            "end": 76
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a unitless number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-unitless-number",
                                          "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 81,
                                            "end": 91
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-nonneg-number",
                                          "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 96,
                                            "end": 106
                                          }
                                        }
                                      },
                                      {
                                        "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "decimal-round",
                                          "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                          "line": {
                                            "start": 254,
                                            "end": 280
                                          }
                                        }
                                      },
                                      {
                                        "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "decimal-round",
                                          "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                          "line": {
                                            "start": 254,
                                            "end": 280
                                          }
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "function",
                                  "name": "show-param-value",
                                  "autofill": true,
                                  "item": {
                                    "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                                    "commentRange": {
                                      "start": 13,
                                      "end": 15
                                    },
                                    "context": {
                                      "type": "function",
                                      "name": "show-param-value",
                                      "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                      "line": {
                                        "start": 16,
                                        "end": 20
                                      }
                                    },
                                    "parameter": [
                                      {
                                        "type": "<any>",
                                        "name": "value"
                                      }
                                    ],
                                    "access": "private",
                                    "group": [
                                      "undefined"
                                    ],
                                    "require": [],
                                    "file": {
                                      "path": "_funcs.scss",
                                      "name": "_funcs.scss"
                                    },
                                    "usedBy": [
                                      {
                                        "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-unit-number",
                                          "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 66,
                                            "end": 76
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a unitless number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-unitless-number",
                                          "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 81,
                                            "end": 91
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-nonneg-number",
                                          "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 96,
                                            "end": 106
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-nonneg-unit-number",
                                          "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 111,
                                            "end": 121
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-nonneg-unitless-number",
                                          "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 126,
                                            "end": 136
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-in-list",
                                          "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 142,
                                            "end": 152
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 111,
                                      "end": 121
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 126,
                                      "end": 136
                                    }
                                  }
                                },
                                {
                                  "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "auto-color",
                                    "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                                    "line": {
                                      "start": 229,
                                      "end": 243
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "function",
                            "name": "show-param-value",
                            "autofill": true,
                            "item": {
                              "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                              "commentRange": {
                                "start": 13,
                                "end": 15
                              },
                              "context": {
                                "type": "function",
                                "name": "show-param-value",
                                "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                "line": {
                                  "start": 16,
                                  "end": 20
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "private",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 66,
                                      "end": 76
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 81,
                                      "end": 91
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 96,
                                      "end": 106
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 111,
                                      "end": 121
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 126,
                                      "end": 136
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-in-list",
                                    "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 142,
                                      "end": 152
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Sets default vertical margins for selected elements\n",
                            "context": {
                              "type": "mixin",
                              "name": "vertical-margins",
                              "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, calc(var(--space) * #{$m}), var(--space));\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n\ncaption {\n    margin-bottom:if($m, calc(var(--space) * .25 * #{$m}), calc(var(--space) * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                              "line": {
                                "start": 157,
                                "end": 198
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "h",
                              "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                              "line": {
                                "start": 202,
                                "end": 216
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "mgb",
                              "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\n@if $important == true {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space)) !important;\n} @else {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                              "line": {
                                "start": 245,
                                "end": 253
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n    margin-left:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n} @else if $type == col {\n    padding-right:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n    padding-left:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n}\n",
                              "line": {
                                "start": 284,
                                "end": 300
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alley",
                              "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                              "line": {
                                "start": 325,
                                "end": 347
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "col-width",
                              "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                              "line": {
                                "start": 350,
                                "end": 376
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_mixins.scss",
                    "name": "_mixins.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row",
                        "code": "@include row-alleys(row, $alley-multiplier);\n@include clearfix();\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                        "line": {
                          "start": 303,
                          "end": 313
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row",
                        "code": "@include row-alleys(row, $alley-multiplier);\n@include clearfix();\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                        "line": {
                          "start": 303,
                          "end": 313
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley-styles",
                        "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                        "line": {
                          "start": 316,
                          "end": 322
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley-styles",
                        "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                        "line": {
                          "start": 316,
                          "end": 322
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 347
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 347
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 347
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
            "commentRange": {
              "start": 123,
              "end": 125
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unitless-number",
              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
              "line": {
                "start": 126,
                "end": 136
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 93,
                    "end": 95
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 96,
                      "end": 106
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 27,
                          "end": 28
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 29,
                            "end": 31
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 13,
                          "end": 15
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 16,
                            "end": 20
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 142,
                                "end": 152
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 229,
                          "end": 243
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 13,
                    "end": 15
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 16,
                      "end": 20
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 142,
                          "end": 152
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, calc(var(--space) * #{$m}), var(--space));\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n\ncaption {\n    margin-bottom:if($m, calc(var(--space) * .25 * #{$m}), calc(var(--space) * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                  "line": {
                    "start": 157,
                    "end": 198
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                  "line": {
                    "start": 202,
                    "end": 216
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgb",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\n@if $important == true {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space)) !important;\n} @else {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                  "line": {
                    "start": 245,
                    "end": 253
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n    margin-left:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n} @else if $type == col {\n    padding-right:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n    padding-left:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n}\n",
                  "line": {
                    "start": 284,
                    "end": 300
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 347
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 350,
                    "end": 376
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unit-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
            "commentRange": {
              "start": 108,
              "end": 110
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unit-number",
              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 111,
                "end": 121
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 93,
                    "end": 95
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 96,
                      "end": 106
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 27,
                          "end": 28
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 29,
                            "end": 31
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 13,
                          "end": 15
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 16,
                            "end": 20
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 142,
                                "end": 152
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 229,
                          "end": 243
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 13,
                    "end": 15
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 16,
                      "end": 20
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 142,
                          "end": 152
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 231,
                    "end": 241
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 347
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 350,
                    "end": 376
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 350,
                    "end": 376
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 349,
        "end": 349
      },
      "context": {
        "type": "mixin",
        "name": "col-width",
        "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
        "line": {
          "start": 350,
          "end": 376
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "min",
          "autofill": true,
          "item": {
            "description": "Includes <code>@content</code> on screens that are at least <code>$min-width</code> wide.\n",
            "commentRange": {
              "start": 57,
              "end": 58
            },
            "context": {
              "type": "mixin",
              "name": "min",
              "code": "@media (min-width:$min-width) {\n    @content;\n}\n",
              "line": {
                "start": 59,
                "end": 63
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "min-width"
              }
            ],
            "access": "public",
            "content": "",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 231,
                    "end": 241
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 231,
                    "end": 241
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 347
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 347
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 350,
                    "end": 376
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 350,
                    "end": 376
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 350,
                    "end": 376
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 350,
                    "end": 376
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unit-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
            "commentRange": {
              "start": 108,
              "end": 110
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unit-number",
              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 111,
                "end": 121
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 93,
                    "end": 95
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 96,
                      "end": 106
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 27,
                          "end": 28
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 29,
                            "end": 31
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 13,
                          "end": 15
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 16,
                            "end": 20
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 142,
                                "end": 152
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 229,
                          "end": 243
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 13,
                    "end": 15
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 16,
                      "end": 20
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 142,
                          "end": 152
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 231,
                    "end": 241
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 347
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 350,
                    "end": 376
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 350,
                    "end": 376
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
            "commentRange": {
              "start": 123,
              "end": 125
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unitless-number",
              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
              "line": {
                "start": 126,
                "end": 136
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 93,
                    "end": 95
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 96,
                      "end": 106
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 27,
                          "end": 28
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 29,
                            "end": 31
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 13,
                          "end": 15
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 16,
                            "end": 20
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 142,
                                "end": 152
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 229,
                          "end": 243
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 13,
                    "end": 15
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 16,
                      "end": 20
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 142,
                          "end": 152
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, calc(var(--space) * #{$m}), var(--space));\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n\ncaption {\n    margin-bottom:if($m, calc(var(--space) * .25 * #{$m}), calc(var(--space) * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                  "line": {
                    "start": 157,
                    "end": 198
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                  "line": {
                    "start": 202,
                    "end": 216
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgb",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\n@if $important == true {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space)) !important;\n} @else {\n    margin-bottom:if($m, calc(var(--space) * #{$m}), var(--space));\n}\n",
                  "line": {
                    "start": 245,
                    "end": 253
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n    margin-left:if($m, calc(var(--alley) / 2 * #{-$m}), calc(var(--alley) / 2 * -1));\n} @else if $type == col {\n    padding-right:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n    padding-left:if($m, calc(var(--alley) / 2 * #{$m}), calc(var(--alley) / 2));\n}\n",
                  "line": {
                    "start": 284,
                    "end": 300
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $m:map_get($alley_sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 347
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 350,
                    "end": 376
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    }
  ]
}