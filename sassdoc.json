{
  "mixins": [
    {
      "description": "",
      "commentRange": {
        "start": 1,
        "end": 1
      },
      "context": {
        "type": "mixin",
        "name": "button-styles",
        "code": "display:inline-block;\nmargin-bottom:calc(var(--space) * 0.25);\npadding:var(--padding-button);\nmin-height:2.5rem;\nborder:none;\nborder-radius:4px;\nbackground-color:var(--color-contrast);\ncolor:var(--color-background);\ncursor:pointer;\ntransition:box-shadow 0.2s, color 0.2s;\n\n&:hover {\n    box-shadow:inset 0 0 0 100vh rgba(black, 0.1);\n}\n",
        "line": {
          "start": 2,
          "end": 17
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_forms.scss",
        "name": "_forms.scss"
      }
    },
    {
      "description": "Converts <code>$aspect-width</code> and <code>$aspect-height</code> to the appropriate bottom padding.\n",
      "commentRange": {
        "start": 1,
        "end": 4
      },
      "context": {
        "type": "mixin",
        "name": "aspect-ratio-to-padding",
        "code": "padding-bottom:percentage($aspect-height / $aspect-width);\n",
        "line": {
          "start": 5,
          "end": 7
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "aspect-width",
          "default": "16"
        },
        {
          "type": "<number>",
          "name": "aspect-height",
          "default": "9"
        }
      ],
      "access": "private",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "Adds styles for a responsive video container.\n",
          "context": {
            "type": "mixin",
            "name": "video-container",
            "code": "@include aspect-ratio-to-padding($aspect-width, $aspect-height);\n\nposition:relative;\ndisplay:block;\nheight:0;\n\niframe,\nobject,\nembed {\n    position:absolute;\n    top:0;\n    left:0;\n    width:100%;\n    height:100%;\n}\n",
            "line": {
              "start": 12,
              "end": 28
            }
          }
        }
      ]
    },
    {
      "description": "Adds styles for a responsive video container.\n",
      "commentRange": {
        "start": 9,
        "end": 11
      },
      "context": {
        "type": "mixin",
        "name": "video-container",
        "code": "@include aspect-ratio-to-padding($aspect-width, $aspect-height);\n\nposition:relative;\ndisplay:block;\nheight:0;\n\niframe,\nobject,\nembed {\n    position:absolute;\n    top:0;\n    left:0;\n    width:100%;\n    height:100%;\n}\n",
        "line": {
          "start": 12,
          "end": 28
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "aspect-width",
          "default": "16"
        },
        {
          "type": "<number>",
          "name": "aspect-height",
          "default": "9"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "aspect-ratio-to-padding",
          "autofill": true,
          "item": {
            "description": "Converts <code>$aspect-width</code> and <code>$aspect-height</code> to the appropriate bottom padding.\n",
            "commentRange": {
              "start": 1,
              "end": 4
            },
            "context": {
              "type": "mixin",
              "name": "aspect-ratio-to-padding",
              "code": "padding-bottom:percentage($aspect-height / $aspect-width);\n",
              "line": {
                "start": 5,
                "end": 7
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "aspect-width",
                "default": "16"
              },
              {
                "type": "<number>",
                "name": "aspect-height",
                "default": "9"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Adds styles for a responsive video container.\n",
                "context": {
                  "type": "mixin",
                  "name": "video-container",
                  "code": "@include aspect-ratio-to-padding($aspect-width, $aspect-height);\n\nposition:relative;\ndisplay:block;\nheight:0;\n\niframe,\nobject,\nembed {\n    position:absolute;\n    top:0;\n    left:0;\n    width:100%;\n    height:100%;\n}\n",
                  "line": {
                    "start": 12,
                    "end": 28
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Includes <code>@content</code> on screens that are at least <code>$min-width</code> wide.\n",
      "commentRange": {
        "start": 30,
        "end": 31
      },
      "context": {
        "type": "mixin",
        "name": "min",
        "code": "@media (min-width:$min-width) {\n    @content;\n}\n",
        "line": {
          "start": 32,
          "end": 36
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "min-width"
        }
      ],
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
          "context": {
            "type": "mixin",
            "name": "hide",
            "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
            "line": {
              "start": 200,
              "end": 210
            }
          }
        },
        {
          "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
          "context": {
            "type": "mixin",
            "name": "hide",
            "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
            "line": {
              "start": 200,
              "end": 210
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 267,
              "end": 289
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 267,
              "end": 289
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 292,
              "end": 318
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 292,
              "end": 318
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 292,
              "end": 318
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 292,
              "end": 318
            }
          }
        }
      ]
    },
    {
      "description": "Includes <code>@content</code> on screens up to <code>$max-width</code> wide.\n",
      "commentRange": {
        "start": 38,
        "end": 39
      },
      "context": {
        "type": "mixin",
        "name": "max",
        "code": "@media (max-width:$max-width) {\n    @content;\n}\n",
        "line": {
          "start": 40,
          "end": 44
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "max-width"
        }
      ],
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 46,
        "end": 47
      },
      "context": {
        "type": "mixin",
        "name": "min-max",
        "code": "@media (min-width:$min-width) and (max-width:$max-width) {\n    @content;\n}\n",
        "line": {
          "start": 48,
          "end": 52
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "min-width"
        },
        {
          "type": "<number>",
          "name": "max-width"
        }
      ],
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 54,
        "end": 54
      },
      "context": {
        "type": "mixin",
        "name": "min-small",
        "code": "@media (min-width:$breakpoint-s) {\n    @content;\n}\n",
        "line": {
          "start": 55,
          "end": 59
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "variable",
          "name": "breakpoint-s",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 307,
              "end": 307
            },
            "context": {
              "type": "variable",
              "name": "breakpoint-s",
              "value": "480px",
              "scope": "default",
              "line": {
                "start": 308,
                "end": 308
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "min-small",
                  "code": "@media (min-width:$breakpoint-s) {\n    @content;\n}\n",
                  "line": {
                    "start": 55,
                    "end": 59
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 61,
        "end": 61
      },
      "context": {
        "type": "mixin",
        "name": "min-medium",
        "code": "@media (min-width:$breakpoint-m) {\n    @content;\n}\n",
        "line": {
          "start": 62,
          "end": 66
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "variable",
          "name": "breakpoint-m",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 309,
              "end": 309
            },
            "context": {
              "type": "variable",
              "name": "breakpoint-m",
              "value": "768px",
              "scope": "default",
              "line": {
                "start": 310,
                "end": 310
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "min-medium",
                  "code": "@media (min-width:$breakpoint-m) {\n    @content;\n}\n",
                  "line": {
                    "start": 62,
                    "end": 66
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 68,
        "end": 68
      },
      "context": {
        "type": "mixin",
        "name": "min-large",
        "code": "@media (min-width:$breakpoint-l) {\n    @content;\n}\n",
        "line": {
          "start": 69,
          "end": 73
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "variable",
          "name": "breakpoint-l",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 311,
              "end": 311
            },
            "context": {
              "type": "variable",
              "name": "breakpoint-l",
              "value": "960px",
              "scope": "default",
              "line": {
                "start": 312,
                "end": 312
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "min-large",
                  "code": "@media (min-width:$breakpoint-l) {\n    @content;\n}\n",
                  "line": {
                    "start": 69,
                    "end": 73
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 75,
        "end": 75
      },
      "context": {
        "type": "mixin",
        "name": "min-xlarge",
        "code": "@media (min-width:$breakpoint-xl) {\n    @content;\n}\n",
        "line": {
          "start": 76,
          "end": 80
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "variable",
          "name": "breakpoint-xl",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 313,
              "end": 313
            },
            "context": {
              "type": "variable",
              "name": "breakpoint-xl",
              "value": "1200px",
              "scope": "default",
              "line": {
                "start": 314,
                "end": 314
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "min-xlarge",
                  "code": "@media (min-width:$breakpoint-xl) {\n    @content;\n}\n",
                  "line": {
                    "start": 76,
                    "end": 80
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Includes <code>@content</code> for ie9 and above.\n",
      "commentRange": {
        "start": 82,
        "end": 82
      },
      "context": {
        "type": "mixin",
        "name": "ie9plus",
        "code": "// @formatter:off\n@media (min-width:0\\0) and (min-resolution:+72dpi) {\n    @content;\n}\n// @formatter:on\n",
        "line": {
          "start": 83,
          "end": 89
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Includes <code>@content</code> for ie10 and above.\n",
      "commentRange": {
        "start": 91,
        "end": 91
      },
      "context": {
        "type": "mixin",
        "name": "ie10plus",
        "code": "@media (-ms-high-contrast:none), (-ms-high-contrast:active) {\n    @content;\n}\n",
        "line": {
          "start": 92,
          "end": 96
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Removes margins if element is the first and/or last child (depending on <code>$scope</code>).\n",
      "commentRange": {
        "start": 98,
        "end": 99
      },
      "context": {
        "type": "mixin",
        "name": "control-margins",
        "code": "$scope-y:$scope == vertical or $scope == all;\n$scope-x:$scope == horizontal or $scope == all;\n\n@if $scope-y or $scope == top {\n    &:first-child:not(.f-margins) {\n        margin-top:0;\n    }\n}\n\n@if $scope-x or $scope == right {\n    &:last-child:not(.f-margins) {\n        margin-right:0;\n    }\n}\n\n@if $scope-y or $scope == bottom {\n    &:last-child:not(.f-margins) {\n        margin-bottom:0;\n    }\n}\n\n@if $scope-x or $scope == left {\n    &:first-child:not(.f-margins) {\n        margin-left:0;\n    }\n}\n",
        "line": {
          "start": 100,
          "end": 127
        }
      },
      "parameter": [
        {
          "type": "<string>",
          "name": "scope",
          "default": "all"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "Removes bottom margins from last children.\n",
          "context": {
            "type": "mixin",
            "name": "controlled",
            "code": "* {\n    @include control-margins($scope);\n}\n",
            "line": {
              "start": 130,
              "end": 134
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
            "line": {
              "start": 138,
              "end": 179
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "h",
            "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
            "line": {
              "start": 183,
              "end": 197
            }
          }
        }
      ]
    },
    {
      "description": "Removes bottom margins from last children.\n",
      "commentRange": {
        "start": 129,
        "end": 129
      },
      "context": {
        "type": "mixin",
        "name": "controlled",
        "code": "* {\n    @include control-margins($scope);\n}\n",
        "line": {
          "start": 130,
          "end": 134
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "control-margins",
          "autofill": true,
          "item": {
            "description": "Removes margins if element is the first and/or last child (depending on <code>$scope</code>).\n",
            "commentRange": {
              "start": 98,
              "end": 99
            },
            "context": {
              "type": "mixin",
              "name": "control-margins",
              "code": "$scope-y:$scope == vertical or $scope == all;\n$scope-x:$scope == horizontal or $scope == all;\n\n@if $scope-y or $scope == top {\n    &:first-child:not(.f-margins) {\n        margin-top:0;\n    }\n}\n\n@if $scope-x or $scope == right {\n    &:last-child:not(.f-margins) {\n        margin-right:0;\n    }\n}\n\n@if $scope-y or $scope == bottom {\n    &:last-child:not(.f-margins) {\n        margin-bottom:0;\n    }\n}\n\n@if $scope-x or $scope == left {\n    &:first-child:not(.f-margins) {\n        margin-left:0;\n    }\n}\n",
              "line": {
                "start": 100,
                "end": 127
              }
            },
            "parameter": [
              {
                "type": "<string>",
                "name": "scope",
                "default": "all"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Removes bottom margins from last children.\n",
                "context": {
                  "type": "mixin",
                  "name": "controlled",
                  "code": "* {\n    @include control-margins($scope);\n}\n",
                  "line": {
                    "start": 130,
                    "end": 134
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                  "line": {
                    "start": 183,
                    "end": 197
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Sets default vertical margins for selected elements\n",
      "commentRange": {
        "start": 136,
        "end": 137
      },
      "context": {
        "type": "mixin",
        "name": "vertical-margins",
        "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
        "line": {
          "start": 138,
          "end": 179
        }
      },
      "parameter": [
        {
          "type": "<number>|false",
          "name": "multiplier",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "control-margins",
          "autofill": true,
          "item": {
            "description": "Removes margins if element is the first and/or last child (depending on <code>$scope</code>).\n",
            "commentRange": {
              "start": 98,
              "end": 99
            },
            "context": {
              "type": "mixin",
              "name": "control-margins",
              "code": "$scope-y:$scope == vertical or $scope == all;\n$scope-x:$scope == horizontal or $scope == all;\n\n@if $scope-y or $scope == top {\n    &:first-child:not(.f-margins) {\n        margin-top:0;\n    }\n}\n\n@if $scope-x or $scope == right {\n    &:last-child:not(.f-margins) {\n        margin-right:0;\n    }\n}\n\n@if $scope-y or $scope == bottom {\n    &:last-child:not(.f-margins) {\n        margin-bottom:0;\n    }\n}\n\n@if $scope-x or $scope == left {\n    &:first-child:not(.f-margins) {\n        margin-left:0;\n    }\n}\n",
              "line": {
                "start": 100,
                "end": 127
              }
            },
            "parameter": [
              {
                "type": "<string>",
                "name": "scope",
                "default": "all"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Removes bottom margins from last children.\n",
                "context": {
                  "type": "mixin",
                  "name": "controlled",
                  "code": "* {\n    @include control-margins($scope);\n}\n",
                  "line": {
                    "start": 130,
                    "end": 134
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                  "line": {
                    "start": 183,
                    "end": 197
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
            "commentRange": {
              "start": 249,
              "end": 251
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unitless-number",
              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
              "line": {
                "start": 252,
                "end": 262
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 219,
                    "end": 221
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 222,
                      "end": 232
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 183,
                          "end": 184
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 185,
                            "end": 187
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 115,
                                "end": 141
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 115,
                                "end": 141
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 297,
                          "end": 299
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 300,
                            "end": 304
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 237,
                                "end": 247
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 252,
                                "end": 262
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color-contrast",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 76,
                          "end": 90
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 237,
                          "end": 247
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 252,
                          "end": 262
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 297,
                    "end": 299
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 300,
                      "end": 304
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 192,
                          "end": 202
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 207,
                          "end": 217
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 222,
                          "end": 232
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 237,
                          "end": 247
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 252,
                          "end": 262
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                  "line": {
                    "start": 183,
                    "end": 197
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 227,
                    "end": 243
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "space",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 313,
              "end": 313
            },
            "context": {
              "type": "function",
              "name": "space",
              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
              "line": {
                "start": 314,
                "end": 318
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "multiplier"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-unitless-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                  "commentRange": {
                    "start": 204,
                    "end": 206
                  },
                  "context": {
                    "type": "function",
                    "name": "is-unitless-number",
                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 207,
                      "end": 217
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 183,
                          "end": 184
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 185,
                            "end": 187
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 115,
                                "end": 141
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 115,
                                "end": 141
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 297,
                          "end": 299
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 300,
                            "end": 304
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 237,
                                "end": 247
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 252,
                                "end": 262
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "function",
                        "name": "space",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                        "line": {
                          "start": 314,
                          "end": 318
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "function",
                        "name": "alley",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                        "line": {
                          "start": 321,
                          "end": 325
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "mgbch",
                        "code": "$m:if(is-unitless-number($multiplier), $multiplier, 1);\n$i:if($important == true, $important, false);\n\nmargin-top:space(-$m) if($i, !important, null);\n\n> * {\n    margin-top:space($m) if($i, !important, null);\n}\n",
                        "line": {
                          "start": 214,
                          "end": 223
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch",
                  "code": "$m:if(is-unitless-number($multiplier), $multiplier, 1);\n$i:if($important == true, $important, false);\n\nmargin-top:space(-$m) if($i, !important, null);\n\n> * {\n    margin-top:space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 214,
                    "end": 223
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch",
                  "code": "$m:if(is-unitless-number($multiplier), $multiplier, 1);\n$i:if($important == true, $important, false);\n\nmargin-top:space(-$m) if($i, !important, null);\n\n> * {\n    margin-top:space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 214,
                    "end": 223
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "figcaption",
                  "code": "padding-top:space(0.375);\ncolor:var(--color-contrast-medium);\ntext-align:center;\nfont-size:var(--font-size-xsmall);\n",
                  "line": {
                    "start": 332,
                    "end": 337
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 181,
        "end": 182
      },
      "context": {
        "type": "mixin",
        "name": "h",
        "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
        "line": {
          "start": 183,
          "end": 197
        }
      },
      "parameter": [
        {
          "type": "1|2|3|4",
          "name": "type"
        },
        {
          "type": "<number>|false",
          "name": "margins-multiplier",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "control-margins",
          "autofill": true,
          "item": {
            "description": "Removes margins if element is the first and/or last child (depending on <code>$scope</code>).\n",
            "commentRange": {
              "start": 98,
              "end": 99
            },
            "context": {
              "type": "mixin",
              "name": "control-margins",
              "code": "$scope-y:$scope == vertical or $scope == all;\n$scope-x:$scope == horizontal or $scope == all;\n\n@if $scope-y or $scope == top {\n    &:first-child:not(.f-margins) {\n        margin-top:0;\n    }\n}\n\n@if $scope-x or $scope == right {\n    &:last-child:not(.f-margins) {\n        margin-right:0;\n    }\n}\n\n@if $scope-y or $scope == bottom {\n    &:last-child:not(.f-margins) {\n        margin-bottom:0;\n    }\n}\n\n@if $scope-x or $scope == left {\n    &:first-child:not(.f-margins) {\n        margin-left:0;\n    }\n}\n",
              "line": {
                "start": 100,
                "end": 127
              }
            },
            "parameter": [
              {
                "type": "<string>",
                "name": "scope",
                "default": "all"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Removes bottom margins from last children.\n",
                "context": {
                  "type": "mixin",
                  "name": "controlled",
                  "code": "* {\n    @include control-margins($scope);\n}\n",
                  "line": {
                    "start": 130,
                    "end": 134
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                  "line": {
                    "start": 183,
                    "end": 197
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
            "commentRange": {
              "start": 249,
              "end": 251
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unitless-number",
              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
              "line": {
                "start": 252,
                "end": 262
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 219,
                    "end": 221
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 222,
                      "end": 232
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 183,
                          "end": 184
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 185,
                            "end": 187
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 115,
                                "end": 141
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 115,
                                "end": 141
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 297,
                          "end": 299
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 300,
                            "end": 304
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 237,
                                "end": 247
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 252,
                                "end": 262
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color-contrast",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 76,
                          "end": 90
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 237,
                          "end": 247
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 252,
                          "end": 262
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 297,
                    "end": 299
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 300,
                      "end": 304
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 192,
                          "end": 202
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 207,
                          "end": 217
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 222,
                          "end": 232
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 237,
                          "end": 247
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 252,
                          "end": 262
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                  "line": {
                    "start": 183,
                    "end": 197
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 227,
                    "end": 243
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
      "commentRange": {
        "start": 199,
        "end": 199
      },
      "context": {
        "type": "mixin",
        "name": "hide",
        "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
        "line": {
          "start": 200,
          "end": 210
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "min",
          "autofill": true,
          "item": {
            "description": "Includes <code>@content</code> on screens that are at least <code>$min-width</code> wide.\n",
            "commentRange": {
              "start": 30,
              "end": 31
            },
            "context": {
              "type": "mixin",
              "name": "min",
              "code": "@media (min-width:$min-width) {\n    @content;\n}\n",
              "line": {
                "start": 32,
                "end": 36
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "min-width"
              }
            ],
            "access": "public",
            "content": "",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 200,
                    "end": 210
                  }
                }
              },
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 200,
                    "end": 210
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unit-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
            "commentRange": {
              "start": 234,
              "end": 236
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unit-number",
              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 237,
                "end": 247
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 219,
                    "end": 221
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 222,
                      "end": 232
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 183,
                          "end": 184
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 185,
                            "end": 187
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 115,
                                "end": 141
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 115,
                                "end": 141
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 297,
                          "end": 299
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 300,
                            "end": 304
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 237,
                                "end": 247
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 252,
                                "end": 262
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color-contrast",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 76,
                          "end": 90
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 237,
                          "end": 247
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 252,
                          "end": 262
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 297,
                    "end": 299
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 300,
                      "end": 304
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 192,
                          "end": 202
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 207,
                          "end": 217
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 222,
                          "end": 232
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 237,
                          "end": 247
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 252,
                          "end": 262
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "variable",
                "name": "lengths",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 371,
                    "end": 371
                  },
                  "context": {
                    "type": "variable",
                    "name": "lengths",
                    "value": "join($lengths-absolute, $lengths-relative)",
                    "scope": "private",
                    "line": {
                      "start": 372,
                      "end": 372
                    }
                  },
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "file": {
                    "path": "_vars.scss",
                    "name": "_vars.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 192,
                          "end": 202
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 237,
                          "end": 247
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 200,
                    "end": 210
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "breakpoints",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 315,
              "end": 315
            },
            "context": {
              "type": "variable",
              "name": "breakpoints",
              "value": "()",
              "scope": "default",
              "line": {
                "start": 316,
                "end": 316
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 200,
                    "end": 210
                  }
                }
              },
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 200,
                    "end": 210
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 212,
        "end": 213
      },
      "context": {
        "type": "mixin",
        "name": "mgbch",
        "code": "$m:if(is-unitless-number($multiplier), $multiplier, 1);\n$i:if($important == true, $important, false);\n\nmargin-top:space(-$m) if($i, !important, null);\n\n> * {\n    margin-top:space($m) if($i, !important, null);\n}\n",
        "line": {
          "start": 214,
          "end": 223
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "multiplier",
          "default": "1"
        },
        {
          "type": "<bool>",
          "name": "important",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a unitless number.\n",
            "commentRange": {
              "start": 204,
              "end": 206
            },
            "context": {
              "type": "function",
              "name": "is-unitless-number",
              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 207,
                "end": 217
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 183,
                    "end": 184
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 185,
                      "end": 187
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 115,
                          "end": 141
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 115,
                          "end": 141
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 192,
                          "end": 202
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 207,
                          "end": 217
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 222,
                          "end": 232
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 297,
                    "end": 299
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 300,
                      "end": 304
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 192,
                          "end": 202
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 207,
                          "end": 217
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 222,
                          "end": 232
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 237,
                          "end": 247
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 252,
                          "end": 262
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "function",
                  "name": "space",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                  "line": {
                    "start": 314,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "function",
                  "name": "alley",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                  "line": {
                    "start": 321,
                    "end": 325
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch",
                  "code": "$m:if(is-unitless-number($multiplier), $multiplier, 1);\n$i:if($important == true, $important, false);\n\nmargin-top:space(-$m) if($i, !important, null);\n\n> * {\n    margin-top:space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 214,
                    "end": 223
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "space",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 313,
              "end": 313
            },
            "context": {
              "type": "function",
              "name": "space",
              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
              "line": {
                "start": 314,
                "end": 318
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "multiplier"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-unitless-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                  "commentRange": {
                    "start": 204,
                    "end": 206
                  },
                  "context": {
                    "type": "function",
                    "name": "is-unitless-number",
                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 207,
                      "end": 217
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 183,
                          "end": 184
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 185,
                            "end": 187
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 115,
                                "end": 141
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 115,
                                "end": 141
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 297,
                          "end": 299
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 300,
                            "end": 304
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 237,
                                "end": 247
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 252,
                                "end": 262
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "function",
                        "name": "space",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                        "line": {
                          "start": 314,
                          "end": 318
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "function",
                        "name": "alley",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                        "line": {
                          "start": 321,
                          "end": 325
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "mgbch",
                        "code": "$m:if(is-unitless-number($multiplier), $multiplier, 1);\n$i:if($important == true, $important, false);\n\nmargin-top:space(-$m) if($i, !important, null);\n\n> * {\n    margin-top:space($m) if($i, !important, null);\n}\n",
                        "line": {
                          "start": 214,
                          "end": 223
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch",
                  "code": "$m:if(is-unitless-number($multiplier), $multiplier, 1);\n$i:if($important == true, $important, false);\n\nmargin-top:space(-$m) if($i, !important, null);\n\n> * {\n    margin-top:space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 214,
                    "end": 223
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch",
                  "code": "$m:if(is-unitless-number($multiplier), $multiplier, 1);\n$i:if($important == true, $important, false);\n\nmargin-top:space(-$m) if($i, !important, null);\n\n> * {\n    margin-top:space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 214,
                    "end": 223
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "figcaption",
                  "code": "padding-top:space(0.375);\ncolor:var(--color-contrast-medium);\ntext-align:center;\nfont-size:var(--font-size-xsmall);\n",
                  "line": {
                    "start": 332,
                    "end": 337
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 225,
        "end": 226
      },
      "context": {
        "type": "mixin",
        "name": "row-alleys",
        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
        "line": {
          "start": 227,
          "end": 243
        }
      },
      "parameter": [
        {
          "type": "row|col",
          "name": "type",
          "default": "row"
        },
        {
          "type": "<number>|false",
          "name": "multiplier",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-nonneg-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
            "commentRange": {
              "start": 249,
              "end": 251
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unitless-number",
              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
              "line": {
                "start": 252,
                "end": 262
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 219,
                    "end": 221
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 222,
                      "end": 232
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 183,
                          "end": 184
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 185,
                            "end": 187
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 115,
                                "end": 141
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 115,
                                "end": 141
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 297,
                          "end": 299
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 300,
                            "end": 304
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 237,
                                "end": 247
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 252,
                                "end": 262
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color-contrast",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 76,
                          "end": 90
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 237,
                          "end": 247
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 252,
                          "end": 262
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 297,
                    "end": 299
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 300,
                      "end": 304
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 192,
                          "end": 202
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 207,
                          "end": 217
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 222,
                          "end": 232
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 237,
                          "end": 247
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 252,
                          "end": 262
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                  "line": {
                    "start": 183,
                    "end": 197
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 227,
                    "end": 243
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "alley",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 320,
              "end": 320
            },
            "context": {
              "type": "function",
              "name": "alley",
              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
              "line": {
                "start": 321,
                "end": 325
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "multiplier"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-unitless-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                  "commentRange": {
                    "start": 204,
                    "end": 206
                  },
                  "context": {
                    "type": "function",
                    "name": "is-unitless-number",
                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 207,
                      "end": 217
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 183,
                          "end": 184
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 185,
                            "end": 187
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 115,
                                "end": 141
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 115,
                                "end": 141
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 297,
                          "end": 299
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 300,
                            "end": 304
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 237,
                                "end": 247
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 252,
                                "end": 262
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "function",
                        "name": "space",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                        "line": {
                          "start": 314,
                          "end": 318
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "function",
                        "name": "alley",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                        "line": {
                          "start": 321,
                          "end": 325
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "mgbch",
                        "code": "$m:if(is-unitless-number($multiplier), $multiplier, 1);\n$i:if($important == true, $important, false);\n\nmargin-top:space(-$m) if($i, !important, null);\n\n> * {\n    margin-top:space($m) if($i, !important, null);\n}\n",
                        "line": {
                          "start": 214,
                          "end": 223
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 227,
                    "end": 243
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 227,
                    "end": 243
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 227,
                    "end": 243
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 227,
                    "end": 243
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 227,
                    "end": 243
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 227,
                    "end": 243
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 227,
                    "end": 243
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 227,
                    "end": 243
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "alley-sizes",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 266,
              "end": 266
            },
            "context": {
              "type": "variable",
              "name": "alley-sizes",
              "value": "()",
              "scope": "default",
              "line": {
                "start": 267,
                "end": 267
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 227,
                    "end": 243
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 227,
                    "end": 243
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row",
            "code": "@include row-alleys(row, $alley-multiplier);\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
            "line": {
              "start": 246,
              "end": 255
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row",
            "code": "@include row-alleys(row, $alley-multiplier);\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
            "line": {
              "start": 246,
              "end": 255
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley-styles",
            "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
            "line": {
              "start": 258,
              "end": 264
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley-styles",
            "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
            "line": {
              "start": 258,
              "end": 264
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 245,
        "end": 245
      },
      "context": {
        "type": "mixin",
        "name": "row",
        "code": "@include row-alleys(row, $alley-multiplier);\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
        "line": {
          "start": 246,
          "end": 255
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "row-alleys",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 225,
              "end": 226
            },
            "context": {
              "type": "mixin",
              "name": "row-alleys",
              "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
              "line": {
                "start": 227,
                "end": 243
              }
            },
            "parameter": [
              {
                "type": "row|col",
                "name": "type",
                "default": "row"
              },
              {
                "type": "<number>|false",
                "name": "multiplier",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-unitless-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                  "commentRange": {
                    "start": 249,
                    "end": 251
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-unitless-number",
                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 252,
                      "end": 262
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-nonneg-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                        "commentRange": {
                          "start": 219,
                          "end": 221
                        },
                        "context": {
                          "type": "function",
                          "name": "is-nonneg-number",
                          "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                          "line": {
                            "start": 222,
                            "end": 232
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          },
                          {
                            "type": "<bool>",
                            "name": "warn",
                            "default": "false"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [
                          {
                            "type": "function",
                            "name": "is-number",
                            "autofill": true,
                            "item": {
                              "description": "Checks if <code>$value</code> is a number.\n",
                              "commentRange": {
                                "start": 183,
                                "end": 184
                              },
                              "context": {
                                "type": "function",
                                "name": "is-number",
                                "code": "@return type-of($value) == number;\n",
                                "line": {
                                  "start": 185,
                                  "end": 187
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "public",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 115,
                                      "end": 141
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 115,
                                      "end": 141
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 192,
                                      "end": 202
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 207,
                                      "end": 217
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 222,
                                      "end": 232
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "function",
                            "name": "show-param-value",
                            "autofill": true,
                            "item": {
                              "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                              "commentRange": {
                                "start": 297,
                                "end": 299
                              },
                              "context": {
                                "type": "function",
                                "name": "show-param-value",
                                "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                "line": {
                                  "start": 300,
                                  "end": 304
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "private",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 192,
                                      "end": 202
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 207,
                                      "end": 217
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 222,
                                      "end": 232
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 237,
                                      "end": 247
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 252,
                                      "end": 262
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-in-list",
                                    "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 280,
                                      "end": 290
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "auto-color-contrast",
                              "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                              "line": {
                                "start": 76,
                                "end": 90
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 237,
                                "end": 247
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 252,
                                "end": 262
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 297,
                          "end": 299
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 300,
                            "end": 304
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 237,
                                "end": 247
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 252,
                                "end": 262
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Sets default vertical margins for selected elements\n",
                      "context": {
                        "type": "mixin",
                        "name": "vertical-margins",
                        "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                        "line": {
                          "start": 138,
                          "end": 179
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "h",
                        "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                        "line": {
                          "start": 183,
                          "end": 197
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 227,
                          "end": 243
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                        "line": {
                          "start": 267,
                          "end": 289
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "col-width",
                        "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                        "line": {
                          "start": 292,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "alley",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 320,
                    "end": 320
                  },
                  "context": {
                    "type": "function",
                    "name": "alley",
                    "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                    "line": {
                      "start": 321,
                      "end": 325
                    }
                  },
                  "parameter": [
                    {
                      "type": "<number>",
                      "name": "multiplier"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-unitless-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a unitless number.\n",
                        "commentRange": {
                          "start": 204,
                          "end": 206
                        },
                        "context": {
                          "type": "function",
                          "name": "is-unitless-number",
                          "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                          "line": {
                            "start": 207,
                            "end": 217
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          },
                          {
                            "type": "<bool>",
                            "name": "warn",
                            "default": "false"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [
                          {
                            "type": "function",
                            "name": "is-number",
                            "autofill": true,
                            "item": {
                              "description": "Checks if <code>$value</code> is a number.\n",
                              "commentRange": {
                                "start": 183,
                                "end": 184
                              },
                              "context": {
                                "type": "function",
                                "name": "is-number",
                                "code": "@return type-of($value) == number;\n",
                                "line": {
                                  "start": 185,
                                  "end": 187
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "public",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 115,
                                      "end": 141
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 115,
                                      "end": 141
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 192,
                                      "end": 202
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 207,
                                      "end": 217
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 222,
                                      "end": 232
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "function",
                            "name": "show-param-value",
                            "autofill": true,
                            "item": {
                              "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                              "commentRange": {
                                "start": 297,
                                "end": 299
                              },
                              "context": {
                                "type": "function",
                                "name": "show-param-value",
                                "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                "line": {
                                  "start": 300,
                                  "end": 304
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "private",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 192,
                                      "end": 202
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 207,
                                      "end": 217
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 222,
                                      "end": 232
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 237,
                                      "end": 247
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 252,
                                      "end": 262
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-in-list",
                                    "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 280,
                                      "end": 290
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "",
                            "context": {
                              "type": "function",
                              "name": "space",
                              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                              "line": {
                                "start": 314,
                                "end": 318
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "function",
                              "name": "alley",
                              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                              "line": {
                                "start": 321,
                                "end": 325
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "mgbch",
                              "code": "$m:if(is-unitless-number($multiplier), $multiplier, 1);\n$i:if($important == true, $important, false);\n\nmargin-top:space(-$m) if($i, !important, null);\n\n> * {\n    margin-top:space($m) if($i, !important, null);\n}\n",
                              "line": {
                                "start": 214,
                                "end": 223
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 227,
                          "end": 243
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 227,
                          "end": 243
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 227,
                          "end": 243
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 227,
                          "end": 243
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 227,
                          "end": 243
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 227,
                          "end": 243
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 227,
                          "end": 243
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 227,
                          "end": 243
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "variable",
                "name": "alley-sizes",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 266,
                    "end": 266
                  },
                  "context": {
                    "type": "variable",
                    "name": "alley-sizes",
                    "value": "()",
                    "scope": "default",
                    "line": {
                      "start": 267,
                      "end": 267
                    }
                  },
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "file": {
                    "path": "_vars.scss",
                    "name": "_vars.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 227,
                          "end": 243
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 227,
                          "end": 243
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                        "line": {
                          "start": 267,
                          "end": 289
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                        "line": {
                          "start": 267,
                          "end": 289
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 246,
                    "end": 255
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 246,
                    "end": 255
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley-styles",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 258,
                    "end": 264
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley-styles",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 258,
                    "end": 264
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 257,
        "end": 257
      },
      "context": {
        "type": "mixin",
        "name": "row-alley-styles",
        "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
        "line": {
          "start": 258,
          "end": 264
        }
      },
      "access": "private",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "row-alleys",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 225,
              "end": 226
            },
            "context": {
              "type": "mixin",
              "name": "row-alleys",
              "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
              "line": {
                "start": 227,
                "end": 243
              }
            },
            "parameter": [
              {
                "type": "row|col",
                "name": "type",
                "default": "row"
              },
              {
                "type": "<number>|false",
                "name": "multiplier",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-unitless-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                  "commentRange": {
                    "start": 249,
                    "end": 251
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-unitless-number",
                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 252,
                      "end": 262
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-nonneg-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                        "commentRange": {
                          "start": 219,
                          "end": 221
                        },
                        "context": {
                          "type": "function",
                          "name": "is-nonneg-number",
                          "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                          "line": {
                            "start": 222,
                            "end": 232
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          },
                          {
                            "type": "<bool>",
                            "name": "warn",
                            "default": "false"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [
                          {
                            "type": "function",
                            "name": "is-number",
                            "autofill": true,
                            "item": {
                              "description": "Checks if <code>$value</code> is a number.\n",
                              "commentRange": {
                                "start": 183,
                                "end": 184
                              },
                              "context": {
                                "type": "function",
                                "name": "is-number",
                                "code": "@return type-of($value) == number;\n",
                                "line": {
                                  "start": 185,
                                  "end": 187
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "public",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 115,
                                      "end": 141
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 115,
                                      "end": 141
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 192,
                                      "end": 202
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 207,
                                      "end": 217
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 222,
                                      "end": 232
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "function",
                            "name": "show-param-value",
                            "autofill": true,
                            "item": {
                              "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                              "commentRange": {
                                "start": 297,
                                "end": 299
                              },
                              "context": {
                                "type": "function",
                                "name": "show-param-value",
                                "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                "line": {
                                  "start": 300,
                                  "end": 304
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "private",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 192,
                                      "end": 202
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 207,
                                      "end": 217
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 222,
                                      "end": 232
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 237,
                                      "end": 247
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 252,
                                      "end": 262
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-in-list",
                                    "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 280,
                                      "end": 290
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "auto-color-contrast",
                              "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                              "line": {
                                "start": 76,
                                "end": 90
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 237,
                                "end": 247
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 252,
                                "end": 262
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 297,
                          "end": 299
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 300,
                            "end": 304
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 237,
                                "end": 247
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 252,
                                "end": 262
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Sets default vertical margins for selected elements\n",
                      "context": {
                        "type": "mixin",
                        "name": "vertical-margins",
                        "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                        "line": {
                          "start": 138,
                          "end": 179
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "h",
                        "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                        "line": {
                          "start": 183,
                          "end": 197
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 227,
                          "end": 243
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                        "line": {
                          "start": 267,
                          "end": 289
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "col-width",
                        "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                        "line": {
                          "start": 292,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "alley",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 320,
                    "end": 320
                  },
                  "context": {
                    "type": "function",
                    "name": "alley",
                    "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                    "line": {
                      "start": 321,
                      "end": 325
                    }
                  },
                  "parameter": [
                    {
                      "type": "<number>",
                      "name": "multiplier"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-unitless-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a unitless number.\n",
                        "commentRange": {
                          "start": 204,
                          "end": 206
                        },
                        "context": {
                          "type": "function",
                          "name": "is-unitless-number",
                          "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                          "line": {
                            "start": 207,
                            "end": 217
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          },
                          {
                            "type": "<bool>",
                            "name": "warn",
                            "default": "false"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [
                          {
                            "type": "function",
                            "name": "is-number",
                            "autofill": true,
                            "item": {
                              "description": "Checks if <code>$value</code> is a number.\n",
                              "commentRange": {
                                "start": 183,
                                "end": 184
                              },
                              "context": {
                                "type": "function",
                                "name": "is-number",
                                "code": "@return type-of($value) == number;\n",
                                "line": {
                                  "start": 185,
                                  "end": 187
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "public",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 115,
                                      "end": 141
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 115,
                                      "end": 141
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 192,
                                      "end": 202
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 207,
                                      "end": 217
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 222,
                                      "end": 232
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "function",
                            "name": "show-param-value",
                            "autofill": true,
                            "item": {
                              "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                              "commentRange": {
                                "start": 297,
                                "end": 299
                              },
                              "context": {
                                "type": "function",
                                "name": "show-param-value",
                                "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                "line": {
                                  "start": 300,
                                  "end": 304
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "private",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 192,
                                      "end": 202
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 207,
                                      "end": 217
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 222,
                                      "end": 232
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 237,
                                      "end": 247
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 252,
                                      "end": 262
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-in-list",
                                    "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 280,
                                      "end": 290
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "",
                            "context": {
                              "type": "function",
                              "name": "space",
                              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                              "line": {
                                "start": 314,
                                "end": 318
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "function",
                              "name": "alley",
                              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                              "line": {
                                "start": 321,
                                "end": 325
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "mgbch",
                              "code": "$m:if(is-unitless-number($multiplier), $multiplier, 1);\n$i:if($important == true, $important, false);\n\nmargin-top:space(-$m) if($i, !important, null);\n\n> * {\n    margin-top:space($m) if($i, !important, null);\n}\n",
                              "line": {
                                "start": 214,
                                "end": 223
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 227,
                          "end": 243
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 227,
                          "end": 243
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 227,
                          "end": 243
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 227,
                          "end": 243
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 227,
                          "end": 243
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 227,
                          "end": 243
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 227,
                          "end": 243
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 227,
                          "end": 243
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "variable",
                "name": "alley-sizes",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 266,
                    "end": 266
                  },
                  "context": {
                    "type": "variable",
                    "name": "alley-sizes",
                    "value": "()",
                    "scope": "default",
                    "line": {
                      "start": 267,
                      "end": 267
                    }
                  },
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "file": {
                    "path": "_vars.scss",
                    "name": "_vars.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 227,
                          "end": 243
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 227,
                          "end": 243
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                        "line": {
                          "start": 267,
                          "end": 289
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley",
                        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                        "line": {
                          "start": 267,
                          "end": 289
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 246,
                    "end": 255
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 246,
                    "end": 255
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley-styles",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 258,
                    "end": 264
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley-styles",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 258,
                    "end": 264
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 267,
              "end": 289
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 267,
              "end": 289
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 267,
              "end": 289
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 266,
        "end": 266
      },
      "context": {
        "type": "mixin",
        "name": "row-alley",
        "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
        "line": {
          "start": 267,
          "end": 289
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "min",
          "autofill": true,
          "item": {
            "description": "Includes <code>@content</code> on screens that are at least <code>$min-width</code> wide.\n",
            "commentRange": {
              "start": 30,
              "end": 31
            },
            "context": {
              "type": "mixin",
              "name": "min",
              "code": "@media (min-width:$min-width) {\n    @content;\n}\n",
              "line": {
                "start": 32,
                "end": 36
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "min-width"
              }
            ],
            "access": "public",
            "content": "",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 200,
                    "end": 210
                  }
                }
              },
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 200,
                    "end": 210
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              }
            ]
          }
        },
        {
          "type": "mixin",
          "name": "row-alley-styles",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 257,
              "end": 257
            },
            "context": {
              "type": "mixin",
              "name": "row-alley-styles",
              "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
              "line": {
                "start": 258,
                "end": 264
              }
            },
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "mixin",
                "name": "row-alleys",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 225,
                    "end": 226
                  },
                  "context": {
                    "type": "mixin",
                    "name": "row-alleys",
                    "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                    "line": {
                      "start": 227,
                      "end": 243
                    }
                  },
                  "parameter": [
                    {
                      "type": "row|col",
                      "name": "type",
                      "default": "row"
                    },
                    {
                      "type": "<number>|false",
                      "name": "multiplier",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-nonneg-unitless-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                        "commentRange": {
                          "start": 249,
                          "end": 251
                        },
                        "context": {
                          "type": "function",
                          "name": "is-nonneg-unitless-number",
                          "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                          "line": {
                            "start": 252,
                            "end": 262
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          },
                          {
                            "type": "<bool>",
                            "name": "warn",
                            "default": "false"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [
                          {
                            "type": "function",
                            "name": "is-nonneg-number",
                            "autofill": true,
                            "item": {
                              "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                              "commentRange": {
                                "start": 219,
                                "end": 221
                              },
                              "context": {
                                "type": "function",
                                "name": "is-nonneg-number",
                                "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                "line": {
                                  "start": 222,
                                  "end": 232
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                },
                                {
                                  "type": "<bool>",
                                  "name": "warn",
                                  "default": "false"
                                }
                              ],
                              "access": "public",
                              "group": [
                                "undefined"
                              ],
                              "require": [
                                {
                                  "type": "function",
                                  "name": "is-number",
                                  "autofill": true,
                                  "item": {
                                    "description": "Checks if <code>$value</code> is a number.\n",
                                    "commentRange": {
                                      "start": 183,
                                      "end": 184
                                    },
                                    "context": {
                                      "type": "function",
                                      "name": "is-number",
                                      "code": "@return type-of($value) == number;\n",
                                      "line": {
                                        "start": 185,
                                        "end": 187
                                      }
                                    },
                                    "parameter": [
                                      {
                                        "type": "<any>",
                                        "name": "value"
                                      }
                                    ],
                                    "access": "public",
                                    "group": [
                                      "undefined"
                                    ],
                                    "require": [],
                                    "file": {
                                      "path": "_funcs.scss",
                                      "name": "_funcs.scss"
                                    },
                                    "usedBy": [
                                      {
                                        "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "decimal-round",
                                          "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                          "line": {
                                            "start": 115,
                                            "end": 141
                                          }
                                        }
                                      },
                                      {
                                        "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "decimal-round",
                                          "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                          "line": {
                                            "start": 115,
                                            "end": 141
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-unit-number",
                                          "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 192,
                                            "end": 202
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a unitless number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-unitless-number",
                                          "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 207,
                                            "end": 217
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-nonneg-number",
                                          "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 222,
                                            "end": 232
                                          }
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "function",
                                  "name": "show-param-value",
                                  "autofill": true,
                                  "item": {
                                    "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                                    "commentRange": {
                                      "start": 297,
                                      "end": 299
                                    },
                                    "context": {
                                      "type": "function",
                                      "name": "show-param-value",
                                      "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                      "line": {
                                        "start": 300,
                                        "end": 304
                                      }
                                    },
                                    "parameter": [
                                      {
                                        "type": "<any>",
                                        "name": "value"
                                      }
                                    ],
                                    "access": "private",
                                    "group": [
                                      "undefined"
                                    ],
                                    "require": [],
                                    "file": {
                                      "path": "_funcs.scss",
                                      "name": "_funcs.scss"
                                    },
                                    "usedBy": [
                                      {
                                        "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-unit-number",
                                          "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 192,
                                            "end": 202
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a unitless number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-unitless-number",
                                          "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 207,
                                            "end": 217
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-nonneg-number",
                                          "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 222,
                                            "end": 232
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-nonneg-unit-number",
                                          "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 237,
                                            "end": 247
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-nonneg-unitless-number",
                                          "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 252,
                                            "end": 262
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-in-list",
                                          "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 280,
                                            "end": 290
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "auto-color-contrast",
                                    "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                                    "line": {
                                      "start": 76,
                                      "end": 90
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 237,
                                      "end": 247
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 252,
                                      "end": 262
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "function",
                            "name": "show-param-value",
                            "autofill": true,
                            "item": {
                              "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                              "commentRange": {
                                "start": 297,
                                "end": 299
                              },
                              "context": {
                                "type": "function",
                                "name": "show-param-value",
                                "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                "line": {
                                  "start": 300,
                                  "end": 304
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "private",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 192,
                                      "end": 202
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 207,
                                      "end": 217
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 222,
                                      "end": 232
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 237,
                                      "end": 247
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 252,
                                      "end": 262
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-in-list",
                                    "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 280,
                                      "end": 290
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Sets default vertical margins for selected elements\n",
                            "context": {
                              "type": "mixin",
                              "name": "vertical-margins",
                              "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                              "line": {
                                "start": 138,
                                "end": 179
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "h",
                              "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                              "line": {
                                "start": 183,
                                "end": 197
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                              "line": {
                                "start": 227,
                                "end": 243
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alley",
                              "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                              "line": {
                                "start": 267,
                                "end": 289
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "col-width",
                              "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                              "line": {
                                "start": 292,
                                "end": 318
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "alley",
                      "autofill": true,
                      "item": {
                        "description": "",
                        "commentRange": {
                          "start": 320,
                          "end": 320
                        },
                        "context": {
                          "type": "function",
                          "name": "alley",
                          "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                          "line": {
                            "start": 321,
                            "end": 325
                          }
                        },
                        "parameter": [
                          {
                            "type": "<number>",
                            "name": "multiplier"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [
                          {
                            "type": "function",
                            "name": "is-unitless-number",
                            "autofill": true,
                            "item": {
                              "description": "Checks if <code>$value</code> is a unitless number.\n",
                              "commentRange": {
                                "start": 204,
                                "end": 206
                              },
                              "context": {
                                "type": "function",
                                "name": "is-unitless-number",
                                "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                "line": {
                                  "start": 207,
                                  "end": 217
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                },
                                {
                                  "type": "<bool>",
                                  "name": "warn",
                                  "default": "false"
                                }
                              ],
                              "access": "public",
                              "group": [
                                "undefined"
                              ],
                              "require": [
                                {
                                  "type": "function",
                                  "name": "is-number",
                                  "autofill": true,
                                  "item": {
                                    "description": "Checks if <code>$value</code> is a number.\n",
                                    "commentRange": {
                                      "start": 183,
                                      "end": 184
                                    },
                                    "context": {
                                      "type": "function",
                                      "name": "is-number",
                                      "code": "@return type-of($value) == number;\n",
                                      "line": {
                                        "start": 185,
                                        "end": 187
                                      }
                                    },
                                    "parameter": [
                                      {
                                        "type": "<any>",
                                        "name": "value"
                                      }
                                    ],
                                    "access": "public",
                                    "group": [
                                      "undefined"
                                    ],
                                    "require": [],
                                    "file": {
                                      "path": "_funcs.scss",
                                      "name": "_funcs.scss"
                                    },
                                    "usedBy": [
                                      {
                                        "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "decimal-round",
                                          "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                          "line": {
                                            "start": 115,
                                            "end": 141
                                          }
                                        }
                                      },
                                      {
                                        "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "decimal-round",
                                          "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                          "line": {
                                            "start": 115,
                                            "end": 141
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-unit-number",
                                          "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 192,
                                            "end": 202
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a unitless number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-unitless-number",
                                          "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 207,
                                            "end": 217
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-nonneg-number",
                                          "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 222,
                                            "end": 232
                                          }
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "function",
                                  "name": "show-param-value",
                                  "autofill": true,
                                  "item": {
                                    "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                                    "commentRange": {
                                      "start": 297,
                                      "end": 299
                                    },
                                    "context": {
                                      "type": "function",
                                      "name": "show-param-value",
                                      "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                      "line": {
                                        "start": 300,
                                        "end": 304
                                      }
                                    },
                                    "parameter": [
                                      {
                                        "type": "<any>",
                                        "name": "value"
                                      }
                                    ],
                                    "access": "private",
                                    "group": [
                                      "undefined"
                                    ],
                                    "require": [],
                                    "file": {
                                      "path": "_funcs.scss",
                                      "name": "_funcs.scss"
                                    },
                                    "usedBy": [
                                      {
                                        "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-unit-number",
                                          "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 192,
                                            "end": 202
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a unitless number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-unitless-number",
                                          "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 207,
                                            "end": 217
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-nonneg-number",
                                          "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 222,
                                            "end": 232
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-nonneg-unit-number",
                                          "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 237,
                                            "end": 247
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-nonneg-unitless-number",
                                          "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 252,
                                            "end": 262
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-in-list",
                                          "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 280,
                                            "end": 290
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "",
                                  "context": {
                                    "type": "function",
                                    "name": "space",
                                    "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                                    "line": {
                                      "start": 314,
                                      "end": 318
                                    }
                                  }
                                },
                                {
                                  "description": "",
                                  "context": {
                                    "type": "function",
                                    "name": "alley",
                                    "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                                    "line": {
                                      "start": 321,
                                      "end": 325
                                    }
                                  }
                                },
                                {
                                  "description": "",
                                  "context": {
                                    "type": "mixin",
                                    "name": "mgbch",
                                    "code": "$m:if(is-unitless-number($multiplier), $multiplier, 1);\n$i:if($important == true, $important, false);\n\nmargin-top:space(-$m) if($i, !important, null);\n\n> * {\n    margin-top:space($m) if($i, !important, null);\n}\n",
                                    "line": {
                                      "start": 214,
                                      "end": 223
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                              "line": {
                                "start": 227,
                                "end": 243
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                              "line": {
                                "start": 227,
                                "end": 243
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                              "line": {
                                "start": 227,
                                "end": 243
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                              "line": {
                                "start": 227,
                                "end": 243
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                              "line": {
                                "start": 227,
                                "end": 243
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                              "line": {
                                "start": 227,
                                "end": 243
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                              "line": {
                                "start": 227,
                                "end": 243
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                              "line": {
                                "start": 227,
                                "end": 243
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "variable",
                      "name": "alley-sizes",
                      "autofill": true,
                      "item": {
                        "description": "",
                        "commentRange": {
                          "start": 266,
                          "end": 266
                        },
                        "context": {
                          "type": "variable",
                          "name": "alley-sizes",
                          "value": "()",
                          "scope": "default",
                          "line": {
                            "start": 267,
                            "end": 267
                          }
                        },
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "file": {
                          "path": "_vars.scss",
                          "name": "_vars.scss"
                        },
                        "usedBy": [
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                              "line": {
                                "start": 227,
                                "end": 243
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                              "line": {
                                "start": 227,
                                "end": 243
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alley",
                              "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                              "line": {
                                "start": 267,
                                "end": 289
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alley",
                              "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                              "line": {
                                "start": 267,
                                "end": 289
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_mixins.scss",
                    "name": "_mixins.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row",
                        "code": "@include row-alleys(row, $alley-multiplier);\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                        "line": {
                          "start": 246,
                          "end": 255
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row",
                        "code": "@include row-alleys(row, $alley-multiplier);\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                        "line": {
                          "start": 246,
                          "end": 255
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley-styles",
                        "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                        "line": {
                          "start": 258,
                          "end": 264
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley-styles",
                        "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                        "line": {
                          "start": 258,
                          "end": 264
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
            "commentRange": {
              "start": 249,
              "end": 251
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unitless-number",
              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
              "line": {
                "start": 252,
                "end": 262
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 219,
                    "end": 221
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 222,
                      "end": 232
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 183,
                          "end": 184
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 185,
                            "end": 187
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 115,
                                "end": 141
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 115,
                                "end": 141
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 297,
                          "end": 299
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 300,
                            "end": 304
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 237,
                                "end": 247
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 252,
                                "end": 262
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color-contrast",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 76,
                          "end": 90
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 237,
                          "end": 247
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 252,
                          "end": 262
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 297,
                    "end": 299
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 300,
                      "end": 304
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 192,
                          "end": 202
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 207,
                          "end": 217
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 222,
                          "end": 232
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 237,
                          "end": 247
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 252,
                          "end": 262
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                  "line": {
                    "start": 183,
                    "end": 197
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 227,
                    "end": 243
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unit-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
            "commentRange": {
              "start": 234,
              "end": 236
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unit-number",
              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 237,
                "end": 247
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 219,
                    "end": 221
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 222,
                      "end": 232
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 183,
                          "end": 184
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 185,
                            "end": 187
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 115,
                                "end": 141
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 115,
                                "end": 141
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 297,
                          "end": 299
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 300,
                            "end": 304
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 237,
                                "end": 247
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 252,
                                "end": 262
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color-contrast",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 76,
                          "end": 90
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 237,
                          "end": 247
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 252,
                          "end": 262
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 297,
                    "end": 299
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 300,
                      "end": 304
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 192,
                          "end": 202
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 207,
                          "end": 217
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 222,
                          "end": 232
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 237,
                          "end": 247
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 252,
                          "end": 262
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "variable",
                "name": "lengths",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 371,
                    "end": 371
                  },
                  "context": {
                    "type": "variable",
                    "name": "lengths",
                    "value": "join($lengths-absolute, $lengths-relative)",
                    "scope": "private",
                    "line": {
                      "start": 372,
                      "end": 372
                    }
                  },
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "file": {
                    "path": "_vars.scss",
                    "name": "_vars.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 192,
                          "end": 202
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 237,
                          "end": 247
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 200,
                    "end": 210
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "alley-sizes",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 266,
              "end": 266
            },
            "context": {
              "type": "variable",
              "name": "alley-sizes",
              "value": "()",
              "scope": "default",
              "line": {
                "start": 267,
                "end": 267
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 227,
                    "end": 243
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 227,
                    "end": 243
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "breakpoints",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 315,
              "end": 315
            },
            "context": {
              "type": "variable",
              "name": "breakpoints",
              "value": "()",
              "scope": "default",
              "line": {
                "start": 316,
                "end": 316
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 200,
                    "end": 210
                  }
                }
              },
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 200,
                    "end": 210
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 291,
        "end": 291
      },
      "context": {
        "type": "mixin",
        "name": "col-width",
        "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
        "line": {
          "start": 292,
          "end": 318
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "min",
          "autofill": true,
          "item": {
            "description": "Includes <code>@content</code> on screens that are at least <code>$min-width</code> wide.\n",
            "commentRange": {
              "start": 30,
              "end": 31
            },
            "context": {
              "type": "mixin",
              "name": "min",
              "code": "@media (min-width:$min-width) {\n    @content;\n}\n",
              "line": {
                "start": 32,
                "end": 36
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "min-width"
              }
            ],
            "access": "public",
            "content": "",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 200,
                    "end": 210
                  }
                }
              },
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 200,
                    "end": 210
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unit-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
            "commentRange": {
              "start": 234,
              "end": 236
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unit-number",
              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 237,
                "end": 247
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 219,
                    "end": 221
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 222,
                      "end": 232
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 183,
                          "end": 184
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 185,
                            "end": 187
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 115,
                                "end": 141
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 115,
                                "end": 141
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 297,
                          "end": 299
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 300,
                            "end": 304
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 237,
                                "end": 247
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 252,
                                "end": 262
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color-contrast",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 76,
                          "end": 90
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 237,
                          "end": 247
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 252,
                          "end": 262
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 297,
                    "end": 299
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 300,
                      "end": 304
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 192,
                          "end": 202
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 207,
                          "end": 217
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 222,
                          "end": 232
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 237,
                          "end": 247
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 252,
                          "end": 262
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "variable",
                "name": "lengths",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 371,
                    "end": 371
                  },
                  "context": {
                    "type": "variable",
                    "name": "lengths",
                    "value": "join($lengths-absolute, $lengths-relative)",
                    "scope": "private",
                    "line": {
                      "start": 372,
                      "end": 372
                    }
                  },
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "file": {
                    "path": "_vars.scss",
                    "name": "_vars.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 192,
                          "end": 202
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 237,
                          "end": 247
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 200,
                    "end": 210
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
            "commentRange": {
              "start": 249,
              "end": 251
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unitless-number",
              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
              "line": {
                "start": 252,
                "end": 262
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 219,
                    "end": 221
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 222,
                      "end": 232
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 183,
                          "end": 184
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 185,
                            "end": 187
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 115,
                                "end": 141
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 115,
                                "end": 141
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 297,
                          "end": 299
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 300,
                            "end": 304
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 237,
                                "end": 247
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 252,
                                "end": 262
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color-contrast",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 76,
                          "end": 90
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 237,
                          "end": 247
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 252,
                          "end": 262
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 297,
                    "end": 299
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 300,
                      "end": 304
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 192,
                          "end": 202
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 207,
                          "end": 217
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 222,
                          "end": 232
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 237,
                          "end": 247
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 252,
                          "end": 262
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
                  "line": {
                    "start": 183,
                    "end": 197
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 227,
                    "end": 243
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "columns",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 324,
              "end": 324
            },
            "context": {
              "type": "variable",
              "name": "columns",
              "value": "()",
              "scope": "default",
              "line": {
                "start": 325,
                "end": 325
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "breakpoints",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 315,
              "end": 315
            },
            "context": {
              "type": "variable",
              "name": "breakpoints",
              "value": "()",
              "scope": "default",
              "line": {
                "start": 316,
                "end": 316
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 200,
                    "end": 210
                  }
                }
              },
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 200,
                    "end": 210
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 267,
                    "end": 289
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 292,
                    "end": 318
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Utility to clear floats\n",
      "commentRange": {
        "start": 320,
        "end": 320
      },
      "context": {
        "type": "mixin",
        "name": "clearfix",
        "code": "&:before,\n&:after {\n    display:table;\n    clear:both;\n    width:100%;\n    content:'';\n}\n",
        "line": {
          "start": 321,
          "end": 329
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 331,
        "end": 331
      },
      "context": {
        "type": "mixin",
        "name": "figcaption",
        "code": "padding-top:space(0.375);\ncolor:var(--color-contrast-medium);\ntext-align:center;\nfont-size:var(--font-size-xsmall);\n",
        "line": {
          "start": 332,
          "end": 337
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "space",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 313,
              "end": 313
            },
            "context": {
              "type": "function",
              "name": "space",
              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
              "line": {
                "start": 314,
                "end": 318
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "multiplier"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-unitless-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                  "commentRange": {
                    "start": 204,
                    "end": 206
                  },
                  "context": {
                    "type": "function",
                    "name": "is-unitless-number",
                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 207,
                      "end": 217
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 183,
                          "end": 184
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 185,
                            "end": 187
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 115,
                                "end": 141
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 115,
                                "end": 141
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 297,
                          "end": 299
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 300,
                            "end": 304
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 192,
                                "end": 202
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 207,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 222,
                                "end": 232
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 237,
                                "end": 247
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 252,
                                "end": 262
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "function",
                        "name": "space",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                        "line": {
                          "start": 314,
                          "end": 318
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "function",
                        "name": "alley",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                        "line": {
                          "start": 321,
                          "end": 325
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "mgbch",
                        "code": "$m:if(is-unitless-number($multiplier), $multiplier, 1);\n$i:if($important == true, $important, false);\n\nmargin-top:space(-$m) if($i, !important, null);\n\n> * {\n    margin-top:space($m) if($i, !important, null);\n}\n",
                        "line": {
                          "start": 214,
                          "end": 223
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 179
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch",
                  "code": "$m:if(is-unitless-number($multiplier), $multiplier, 1);\n$i:if($important == true, $important, false);\n\nmargin-top:space(-$m) if($i, !important, null);\n\n> * {\n    margin-top:space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 214,
                    "end": 223
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch",
                  "code": "$m:if(is-unitless-number($multiplier), $multiplier, 1);\n$i:if($important == true, $important, false);\n\nmargin-top:space(-$m) if($i, !important, null);\n\n> * {\n    margin-top:space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 214,
                    "end": 223
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "figcaption",
                  "code": "padding-top:space(0.375);\ncolor:var(--color-contrast-medium);\ntext-align:center;\nfont-size:var(--font-size-xsmall);\n",
                  "line": {
                    "start": 332,
                    "end": 337
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Unsets border radius\n",
      "commentRange": {
        "start": 339,
        "end": 339
      },
      "context": {
        "type": "mixin",
        "name": "sq",
        "code": "border-radius:unset;\n",
        "line": {
          "start": 340,
          "end": 342
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 344,
        "end": 344
      },
      "context": {
        "type": "mixin",
        "name": "ellipsis",
        "code": "overflow:hidden;\ntext-overflow:ellipsis;\nwhite-space:nowrap;\n",
        "line": {
          "start": 345,
          "end": 349
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    }
  ],
  "functions": [
    {
      "description": "Joins <code>$list</code> items into a <code>$glue</code> separated string and uses an optional <code>$closer</code> before the final item.\n",
      "commentRange": {
        "start": 6,
        "end": 10
      },
      "context": {
        "type": "function",
        "name": "list-to-string",
        "code": "$output:null;\n$last-item:null;\n$last-item-quoted:false;\n\n@if type-of($list) != list {\n    @error '`#{$list}` is not a valid list.';\n}\n\n@for $i from 1 through length($list) {\n    $item:nth($list, $i);\n\n    @if type-of($item) == list {\n        @if $i == length($list) {\n            $last-item:nth($item, -1);\n            $is-nested-list:type-of($last-item) == list;\n\n            @while $is-nested-list {\n                $last-item:nth($last-item, -1);\n\n                @if type-of($last-item) != list {\n                    $is-nested-list:false;\n                    $last-item-quoted:type-of($last-item) == string and $quote-strings;\n                }\n            }\n\n            $output:#{$output}#{list-to-string($item, $glue, null, $quote-strings)};\n        } @else {\n            $output:#{$output}#{list-to-string($item, $glue, null, $quote-strings)}#{$glue};\n        }\n    } @else {\n        $item:if(type-of($item) == string and $quote-strings, '\"#{$item}\"', $item);\n\n        @if $i == length($list) {\n            $last-item:$item;\n            $last-item-quoted:type-of($last-item) == string and $quote-strings;\n\n            $output:#{$output}#{$item}\n        } @else {\n            $output:#{$output}#{$item}#{$glue};\n        }\n    }\n}\n\n@if $closer != null {\n    $offset:if($last-item-quoted, 2, 0);\n    $find:#{$glue}#{$last-item};\n    $slice-1:str-slice($output, 1, -(str-length(#{$find}) + 1 + $offset));\n    $slice-2:str-slice($output, -(str-length(#{$last-item}) + $offset));\n    $output:#{$slice-1}#{$closer}#{$slice-2};\n}\n\n@return $output;\n",
        "line": {
          "start": 11,
          "end": 64
        }
      },
      "parameter": [
        {
          "type": "<list>",
          "name": "list"
        },
        {
          "type": "<any>",
          "name": "glue",
          "default": "''"
        },
        {
          "type": "<any>",
          "name": "closer",
          "default": "null"
        },
        {
          "type": "<bool>",
          "name": "quote-strings",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "throw": [
        "`#{$list}` is not a valid list."
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Returns a formatted string of valid <code>$values</code>.\n",
          "context": {
            "type": "function",
            "name": "format-valid-values",
            "code": "@return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n",
            "line": {
              "start": 309,
              "end": 311
            }
          }
        }
      ]
    },
    {
      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
      "commentRange": {
        "start": 71,
        "end": 75
      },
      "context": {
        "type": "function",
        "name": "auto-color-contrast",
        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
        "line": {
          "start": 76,
          "end": 90
        }
      },
      "parameter": [
        {
          "type": "<color>",
          "name": "bg-color"
        },
        {
          "type": "<number>",
          "name": "threshold",
          "default": "60"
        },
        {
          "type": "<color>",
          "name": "dark",
          "default": "black"
        },
        {
          "type": "<color>",
          "name": "light",
          "default": "white"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-nonneg-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
            "commentRange": {
              "start": 219,
              "end": 221
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-number",
              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 222,
                "end": 232
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 183,
                    "end": 184
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 185,
                      "end": 187
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 115,
                          "end": 141
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 115,
                          "end": 141
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 192,
                          "end": 202
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 207,
                          "end": 217
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 222,
                          "end": 232
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 297,
                    "end": 299
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 300,
                      "end": 304
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 192,
                          "end": 202
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 207,
                          "end": 217
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 222,
                          "end": 232
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 237,
                          "end": 247
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 252,
                          "end": 262
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                "context": {
                  "type": "function",
                  "name": "auto-color-contrast",
                  "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                  "line": {
                    "start": 76,
                    "end": 90
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 237,
                    "end": 247
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 252,
                    "end": 262
                  }
                }
              }
            ]
          }
        }
      ],
      "throw": [
        "`#{$bg-color}` is not a valid color.",
        "`#{$threshold}` is not a nonnegative number."
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Ceils <code>$number</code> to given decimal <code>$places</code>.\n",
      "commentRange": {
        "start": 97,
        "end": 99
      },
      "context": {
        "type": "function",
        "name": "decimal-ceil",
        "code": "@return decimal-round($number, $places, ceil);\n",
        "line": {
          "start": 100,
          "end": 102
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "number"
        },
        {
          "type": "<number>",
          "name": "places"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "decimal-round",
          "autofill": true,
          "item": {
            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
            "commentRange": {
              "start": 111,
              "end": 114
            },
            "context": {
              "type": "function",
              "name": "decimal-round",
              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
              "line": {
                "start": 115,
                "end": 141
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "number"
              },
              {
                "type": "<number>",
                "name": "places"
              },
              {
                "type": "<any> (round, ceil, floor)",
                "name": "mode",
                "default": "round"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 183,
                    "end": 184
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 185,
                      "end": 187
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 115,
                          "end": 141
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 115,
                          "end": 141
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 192,
                          "end": 202
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 207,
                          "end": 217
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 222,
                          "end": 232
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Ceils <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-ceil",
                  "code": "@return decimal-round($number, $places, ceil);\n",
                  "line": {
                    "start": 100,
                    "end": 102
                  }
                }
              },
              {
                "description": "Floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-floor",
                  "code": "@return decimal-round($number, $places, floor);\n",
                  "line": {
                    "start": 107,
                    "end": 109
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Floors <code>$number</code> to given decimal <code>$places</code>.\n",
      "commentRange": {
        "start": 104,
        "end": 106
      },
      "context": {
        "type": "function",
        "name": "decimal-floor",
        "code": "@return decimal-round($number, $places, floor);\n",
        "line": {
          "start": 107,
          "end": 109
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "number"
        },
        {
          "type": "<number>",
          "name": "places"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "decimal-round",
          "autofill": true,
          "item": {
            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
            "commentRange": {
              "start": 111,
              "end": 114
            },
            "context": {
              "type": "function",
              "name": "decimal-round",
              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
              "line": {
                "start": 115,
                "end": 141
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "number"
              },
              {
                "type": "<number>",
                "name": "places"
              },
              {
                "type": "<any> (round, ceil, floor)",
                "name": "mode",
                "default": "round"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 183,
                    "end": 184
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 185,
                      "end": 187
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 115,
                          "end": 141
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 115,
                          "end": 141
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 192,
                          "end": 202
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 207,
                          "end": 217
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 222,
                          "end": 232
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Ceils <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-ceil",
                  "code": "@return decimal-round($number, $places, ceil);\n",
                  "line": {
                    "start": 100,
                    "end": 102
                  }
                }
              },
              {
                "description": "Floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-floor",
                  "code": "@return decimal-round($number, $places, floor);\n",
                  "line": {
                    "start": 107,
                    "end": 109
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
      "commentRange": {
        "start": 111,
        "end": 114
      },
      "context": {
        "type": "function",
        "name": "decimal-round",
        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
        "line": {
          "start": 115,
          "end": 141
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "number"
        },
        {
          "type": "<number>",
          "name": "places"
        },
        {
          "type": "<any> (round, ceil, floor)",
          "name": "mode",
          "default": "round"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a number.\n",
            "commentRange": {
              "start": 183,
              "end": 184
            },
            "context": {
              "type": "function",
              "name": "is-number",
              "code": "@return type-of($value) == number;\n",
              "line": {
                "start": 185,
                "end": 187
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 115,
                    "end": 141
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 115,
                    "end": 141
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 192,
                    "end": 202
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 207,
                    "end": 217
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 222,
                    "end": 232
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Ceils <code>$number</code> to given decimal <code>$places</code>.\n",
          "context": {
            "type": "function",
            "name": "decimal-ceil",
            "code": "@return decimal-round($number, $places, ceil);\n",
            "line": {
              "start": 100,
              "end": 102
            }
          }
        },
        {
          "description": "Floors <code>$number</code> to given decimal <code>$places</code>.\n",
          "context": {
            "type": "function",
            "name": "decimal-floor",
            "code": "@return decimal-round($number, $places, floor);\n",
            "line": {
              "start": 107,
              "end": 109
            }
          }
        }
      ]
    },
    {
      "description": "Removes the unit from <code>$number</code>.\n",
      "commentRange": {
        "start": 143,
        "end": 144
      },
      "context": {
        "type": "function",
        "name": "strip-unit",
        "code": "@if type-of($number) == 'number' and not unitless($number) {\n    @return $number / ($number * 0 + 1);\n}\n\n@return $number;\n",
        "line": {
          "start": 145,
          "end": 151
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "number"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Converts <code>$size-in-rem</code> to pixels based on <code>$font-size-base</code>.\n",
          "context": {
            "type": "function",
            "name": "rem-to-pixels",
            "code": "@return strip-unit($size-in-rem) * $font-size-base;\n",
            "line": {
              "start": 156,
              "end": 158
            }
          }
        }
      ]
    },
    {
      "description": "Converts <code>$size-in-rem</code> to pixels based on <code>$font-size-base</code>.\n",
      "commentRange": {
        "start": 153,
        "end": 155
      },
      "context": {
        "type": "function",
        "name": "rem-to-pixels",
        "code": "@return strip-unit($size-in-rem) * $font-size-base;\n",
        "line": {
          "start": 156,
          "end": 158
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "size-in-rem"
        },
        {
          "type": "<number>",
          "name": "font-size-base"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "strip-unit",
          "autofill": true,
          "item": {
            "description": "Removes the unit from <code>$number</code>.\n",
            "commentRange": {
              "start": 143,
              "end": 144
            },
            "context": {
              "type": "function",
              "name": "strip-unit",
              "code": "@if type-of($number) == 'number' and not unitless($number) {\n    @return $number / ($number * 0 + 1);\n}\n\n@return $number;\n",
              "line": {
                "start": 145,
                "end": 151
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "number"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Converts <code>$size-in-rem</code> to pixels based on <code>$font-size-base</code>.\n",
                "context": {
                  "type": "function",
                  "name": "rem-to-pixels",
                  "code": "@return strip-unit($size-in-rem) * $font-size-base;\n",
                  "line": {
                    "start": 156,
                    "end": 158
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "font-size-base",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 26,
              "end": 26
            },
            "context": {
              "type": "variable",
              "name": "font-size-base",
              "value": "16px",
              "scope": "default",
              "line": {
                "start": 27,
                "end": 27
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "Converts <code>$size-in-rem</code> to pixels based on <code>$font-size-base</code>.\n",
                "context": {
                  "type": "function",
                  "name": "rem-to-pixels",
                  "code": "@return strip-unit($size-in-rem) * $font-size-base;\n",
                  "line": {
                    "start": 156,
                    "end": 158
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a boolean.\n",
      "commentRange": {
        "start": 165,
        "end": 166
      },
      "context": {
        "type": "function",
        "name": "is-bool",
        "code": "@return type-of($value) == bool;\n",
        "line": {
          "start": 167,
          "end": 169
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a color.\n",
      "commentRange": {
        "start": 171,
        "end": 172
      },
      "context": {
        "type": "function",
        "name": "is-color",
        "code": "@return type-of($value) == color;\n",
        "line": {
          "start": 173,
          "end": 175
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a string.\n",
      "commentRange": {
        "start": 177,
        "end": 178
      },
      "context": {
        "type": "function",
        "name": "is-string",
        "code": "@return type-of($value) == string;\n",
        "line": {
          "start": 179,
          "end": 181
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a number.\n",
      "commentRange": {
        "start": 183,
        "end": 184
      },
      "context": {
        "type": "function",
        "name": "is-number",
        "code": "@return type-of($value) == number;\n",
        "line": {
          "start": 185,
          "end": 187
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
          "context": {
            "type": "function",
            "name": "decimal-round",
            "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
            "line": {
              "start": 115,
              "end": 141
            }
          }
        },
        {
          "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
          "context": {
            "type": "function",
            "name": "decimal-round",
            "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
            "line": {
              "start": 115,
              "end": 141
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-unit-number",
            "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 192,
              "end": 202
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a unitless number.\n",
          "context": {
            "type": "function",
            "name": "is-unitless-number",
            "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 207,
              "end": 217
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative number.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-number",
            "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 222,
              "end": 232
            }
          }
        }
      ]
    },
    {
      "description": "Checks if <code>$value</code> is a number with a unit.\n",
      "commentRange": {
        "start": 189,
        "end": 191
      },
      "context": {
        "type": "function",
        "name": "is-unit-number",
        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
        "line": {
          "start": 192,
          "end": 202
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        },
        {
          "type": "<bool>",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a number.\n",
            "commentRange": {
              "start": 183,
              "end": 184
            },
            "context": {
              "type": "function",
              "name": "is-number",
              "code": "@return type-of($value) == number;\n",
              "line": {
                "start": 185,
                "end": 187
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 115,
                    "end": 141
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 115,
                    "end": 141
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 192,
                    "end": 202
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 207,
                    "end": 217
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 222,
                    "end": 232
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 297,
              "end": 299
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 300,
                "end": 304
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 192,
                    "end": 202
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 207,
                    "end": 217
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 222,
                    "end": 232
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 237,
                    "end": 247
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 252,
                    "end": 262
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 280,
                    "end": 290
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "lengths",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 371,
              "end": 371
            },
            "context": {
              "type": "variable",
              "name": "lengths",
              "value": "join($lengths-absolute, $lengths-relative)",
              "scope": "private",
              "line": {
                "start": 372,
                "end": 372
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 192,
                    "end": 202
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 237,
                    "end": 247
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a unitless number.\n",
      "commentRange": {
        "start": 204,
        "end": 206
      },
      "context": {
        "type": "function",
        "name": "is-unitless-number",
        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
        "line": {
          "start": 207,
          "end": 217
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        },
        {
          "type": "<bool>",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a number.\n",
            "commentRange": {
              "start": 183,
              "end": 184
            },
            "context": {
              "type": "function",
              "name": "is-number",
              "code": "@return type-of($value) == number;\n",
              "line": {
                "start": 185,
                "end": 187
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 115,
                    "end": 141
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 115,
                    "end": 141
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 192,
                    "end": 202
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 207,
                    "end": 217
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 222,
                    "end": 232
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 297,
              "end": 299
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 300,
                "end": 304
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 192,
                    "end": 202
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 207,
                    "end": 217
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 222,
                    "end": 232
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 237,
                    "end": 247
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 252,
                    "end": 262
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 280,
                    "end": 290
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "function",
            "name": "space",
            "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
            "line": {
              "start": 314,
              "end": 318
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "function",
            "name": "alley",
            "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
            "line": {
              "start": 321,
              "end": 325
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "mgbch",
            "code": "$m:if(is-unitless-number($multiplier), $multiplier, 1);\n$i:if($important == true, $important, false);\n\nmargin-top:space(-$m) if($i, !important, null);\n\n> * {\n    margin-top:space($m) if($i, !important, null);\n}\n",
            "line": {
              "start": 214,
              "end": 223
            }
          }
        }
      ]
    },
    {
      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
      "commentRange": {
        "start": 219,
        "end": 221
      },
      "context": {
        "type": "function",
        "name": "is-nonneg-number",
        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
        "line": {
          "start": 222,
          "end": 232
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        },
        {
          "type": "<bool>",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a number.\n",
            "commentRange": {
              "start": 183,
              "end": 184
            },
            "context": {
              "type": "function",
              "name": "is-number",
              "code": "@return type-of($value) == number;\n",
              "line": {
                "start": 185,
                "end": 187
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 115,
                    "end": 141
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 115,
                    "end": 141
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 192,
                    "end": 202
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 207,
                    "end": 217
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 222,
                    "end": 232
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 297,
              "end": 299
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 300,
                "end": 304
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 192,
                    "end": 202
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 207,
                    "end": 217
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 222,
                    "end": 232
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 237,
                    "end": 247
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 252,
                    "end": 262
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 280,
                    "end": 290
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
          "context": {
            "type": "function",
            "name": "auto-color-contrast",
            "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
            "line": {
              "start": 76,
              "end": 90
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-unit-number",
            "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 237,
              "end": 247
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-unitless-number",
            "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
            "line": {
              "start": 252,
              "end": 262
            }
          }
        }
      ]
    },
    {
      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
      "commentRange": {
        "start": 234,
        "end": 236
      },
      "context": {
        "type": "function",
        "name": "is-nonneg-unit-number",
        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
        "line": {
          "start": 237,
          "end": 247
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        },
        {
          "type": "<bool>",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-nonneg-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
            "commentRange": {
              "start": 219,
              "end": 221
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-number",
              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 222,
                "end": 232
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 183,
                    "end": 184
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 185,
                      "end": 187
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 115,
                          "end": 141
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 115,
                          "end": 141
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 192,
                          "end": 202
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 207,
                          "end": 217
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 222,
                          "end": 232
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 297,
                    "end": 299
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 300,
                      "end": 304
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 192,
                          "end": 202
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 207,
                          "end": 217
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 222,
                          "end": 232
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 237,
                          "end": 247
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 252,
                          "end": 262
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                "context": {
                  "type": "function",
                  "name": "auto-color-contrast",
                  "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                  "line": {
                    "start": 76,
                    "end": 90
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 237,
                    "end": 247
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 252,
                    "end": 262
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 297,
              "end": 299
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 300,
                "end": 304
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 192,
                    "end": 202
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 207,
                    "end": 217
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 222,
                    "end": 232
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 237,
                    "end": 247
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 252,
                    "end": 262
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 280,
                    "end": 290
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "lengths",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 371,
              "end": 371
            },
            "context": {
              "type": "variable",
              "name": "lengths",
              "value": "join($lengths-absolute, $lengths-relative)",
              "scope": "private",
              "line": {
                "start": 372,
                "end": 372
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 192,
                    "end": 202
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 237,
                    "end": 247
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
          "context": {
            "type": "mixin",
            "name": "hide",
            "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
            "line": {
              "start": 200,
              "end": 210
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 267,
              "end": 289
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 292,
              "end": 318
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 292,
              "end": 318
            }
          }
        }
      ]
    },
    {
      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
      "commentRange": {
        "start": 249,
        "end": 251
      },
      "context": {
        "type": "function",
        "name": "is-nonneg-unitless-number",
        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
        "line": {
          "start": 252,
          "end": 262
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        },
        {
          "type": "<bool>",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-nonneg-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
            "commentRange": {
              "start": 219,
              "end": 221
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-number",
              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 222,
                "end": 232
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 183,
                    "end": 184
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 185,
                      "end": 187
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 115,
                          "end": 141
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 115,
                          "end": 141
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 192,
                          "end": 202
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 207,
                          "end": 217
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 222,
                          "end": 232
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 297,
                    "end": 299
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 300,
                      "end": 304
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 192,
                          "end": 202
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 207,
                          "end": 217
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 222,
                          "end": 232
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 237,
                          "end": 247
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 252,
                          "end": 262
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                "context": {
                  "type": "function",
                  "name": "auto-color-contrast",
                  "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                  "line": {
                    "start": 76,
                    "end": 90
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 237,
                    "end": 247
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 252,
                    "end": 262
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 297,
              "end": 299
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 300,
                "end": 304
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 192,
                    "end": 202
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 207,
                    "end": 217
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 222,
                    "end": 232
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 237,
                    "end": 247
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 252,
                    "end": 262
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 280,
                    "end": 290
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
            "line": {
              "start": 138,
              "end": 179
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "h",
            "code": "font-weight:var(--font-weight-heading);\nfont-size:var(--font-size-h#{$type});\nfont-family:var(--font-stack-heading);\nline-height:var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m:$margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n",
            "line": {
              "start": 183,
              "end": 197
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 227,
              "end": 243
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 267,
              "end": 289
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 292,
              "end": 318
            }
          }
        }
      ]
    },
    {
      "description": "Checks if <code>$value</code> is a map.\n",
      "commentRange": {
        "start": 264,
        "end": 265
      },
      "context": {
        "type": "function",
        "name": "is-map",
        "code": "@return type-of($value) == map;\n",
        "line": {
          "start": 266,
          "end": 268
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a list.\n",
      "commentRange": {
        "start": 270,
        "end": 271
      },
      "context": {
        "type": "function",
        "name": "is-list",
        "code": "@return type-of($value) == list;\n",
        "line": {
          "start": 272,
          "end": 274
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
      "commentRange": {
        "start": 276,
        "end": 279
      },
      "context": {
        "type": "function",
        "name": "is-in-list",
        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
        "line": {
          "start": 280,
          "end": 290
        }
      },
      "parameter": [
        {
          "type": "<any>|number",
          "name": "needle"
        },
        {
          "type": "<list>",
          "name": "haystack"
        },
        {
          "type": "<bool>",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 297,
              "end": 299
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 300,
                "end": 304
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 192,
                    "end": 202
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 207,
                    "end": 217
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 222,
                    "end": 232
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 237,
                    "end": 247
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 252,
                    "end": 262
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 280,
                    "end": 290
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "format-valid-values",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string of valid <code>$values</code>.\n",
            "commentRange": {
              "start": 306,
              "end": 308
            },
            "context": {
              "type": "function",
              "name": "format-valid-values",
              "code": "@return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n",
              "line": {
                "start": 309,
                "end": 311
              }
            },
            "parameter": [
              {
                "type": "<list>",
                "name": "values"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "list-to-string",
                "autofill": true,
                "item": {
                  "description": "Joins <code>$list</code> items into a <code>$glue</code> separated string and uses an optional <code>$closer</code> before the final item.\n",
                  "commentRange": {
                    "start": 6,
                    "end": 10
                  },
                  "context": {
                    "type": "function",
                    "name": "list-to-string",
                    "code": "$output:null;\n$last-item:null;\n$last-item-quoted:false;\n\n@if type-of($list) != list {\n    @error '`#{$list}` is not a valid list.';\n}\n\n@for $i from 1 through length($list) {\n    $item:nth($list, $i);\n\n    @if type-of($item) == list {\n        @if $i == length($list) {\n            $last-item:nth($item, -1);\n            $is-nested-list:type-of($last-item) == list;\n\n            @while $is-nested-list {\n                $last-item:nth($last-item, -1);\n\n                @if type-of($last-item) != list {\n                    $is-nested-list:false;\n                    $last-item-quoted:type-of($last-item) == string and $quote-strings;\n                }\n            }\n\n            $output:#{$output}#{list-to-string($item, $glue, null, $quote-strings)};\n        } @else {\n            $output:#{$output}#{list-to-string($item, $glue, null, $quote-strings)}#{$glue};\n        }\n    } @else {\n        $item:if(type-of($item) == string and $quote-strings, '\"#{$item}\"', $item);\n\n        @if $i == length($list) {\n            $last-item:$item;\n            $last-item-quoted:type-of($last-item) == string and $quote-strings;\n\n            $output:#{$output}#{$item}\n        } @else {\n            $output:#{$output}#{$item}#{$glue};\n        }\n    }\n}\n\n@if $closer != null {\n    $offset:if($last-item-quoted, 2, 0);\n    $find:#{$glue}#{$last-item};\n    $slice-1:str-slice($output, 1, -(str-length(#{$find}) + 1 + $offset));\n    $slice-2:str-slice($output, -(str-length(#{$last-item}) + $offset));\n    $output:#{$slice-1}#{$closer}#{$slice-2};\n}\n\n@return $output;\n",
                    "line": {
                      "start": 11,
                      "end": 64
                    }
                  },
                  "parameter": [
                    {
                      "type": "<list>",
                      "name": "list"
                    },
                    {
                      "type": "<any>",
                      "name": "glue",
                      "default": "''"
                    },
                    {
                      "type": "<any>",
                      "name": "closer",
                      "default": "null"
                    },
                    {
                      "type": "<bool>",
                      "name": "quote-strings",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "throw": [
                    "`#{$list}` is not a valid list."
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Returns a formatted string of valid <code>$values</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "format-valid-values",
                        "code": "@return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n",
                        "line": {
                          "start": 309,
                          "end": 311
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 280,
                    "end": 290
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
      "commentRange": {
        "start": 297,
        "end": 299
      },
      "context": {
        "type": "function",
        "name": "show-param-value",
        "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
        "line": {
          "start": 300,
          "end": 304
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "private",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Checks if <code>$value</code> is a number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-unit-number",
            "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 192,
              "end": 202
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a unitless number.\n",
          "context": {
            "type": "function",
            "name": "is-unitless-number",
            "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 207,
              "end": 217
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative number.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-number",
            "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 222,
              "end": 232
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-unit-number",
            "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 237,
              "end": 247
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-unitless-number",
            "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
            "line": {
              "start": 252,
              "end": 262
            }
          }
        },
        {
          "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
          "context": {
            "type": "function",
            "name": "is-in-list",
            "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
            "line": {
              "start": 280,
              "end": 290
            }
          }
        }
      ]
    },
    {
      "description": "Returns a formatted string of valid <code>$values</code>.\n",
      "commentRange": {
        "start": 306,
        "end": 308
      },
      "context": {
        "type": "function",
        "name": "format-valid-values",
        "code": "@return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n",
        "line": {
          "start": 309,
          "end": 311
        }
      },
      "parameter": [
        {
          "type": "<list>",
          "name": "values"
        }
      ],
      "access": "private",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "list-to-string",
          "autofill": true,
          "item": {
            "description": "Joins <code>$list</code> items into a <code>$glue</code> separated string and uses an optional <code>$closer</code> before the final item.\n",
            "commentRange": {
              "start": 6,
              "end": 10
            },
            "context": {
              "type": "function",
              "name": "list-to-string",
              "code": "$output:null;\n$last-item:null;\n$last-item-quoted:false;\n\n@if type-of($list) != list {\n    @error '`#{$list}` is not a valid list.';\n}\n\n@for $i from 1 through length($list) {\n    $item:nth($list, $i);\n\n    @if type-of($item) == list {\n        @if $i == length($list) {\n            $last-item:nth($item, -1);\n            $is-nested-list:type-of($last-item) == list;\n\n            @while $is-nested-list {\n                $last-item:nth($last-item, -1);\n\n                @if type-of($last-item) != list {\n                    $is-nested-list:false;\n                    $last-item-quoted:type-of($last-item) == string and $quote-strings;\n                }\n            }\n\n            $output:#{$output}#{list-to-string($item, $glue, null, $quote-strings)};\n        } @else {\n            $output:#{$output}#{list-to-string($item, $glue, null, $quote-strings)}#{$glue};\n        }\n    } @else {\n        $item:if(type-of($item) == string and $quote-strings, '\"#{$item}\"', $item);\n\n        @if $i == length($list) {\n            $last-item:$item;\n            $last-item-quoted:type-of($last-item) == string and $quote-strings;\n\n            $output:#{$output}#{$item}\n        } @else {\n            $output:#{$output}#{$item}#{$glue};\n        }\n    }\n}\n\n@if $closer != null {\n    $offset:if($last-item-quoted, 2, 0);\n    $find:#{$glue}#{$last-item};\n    $slice-1:str-slice($output, 1, -(str-length(#{$find}) + 1 + $offset));\n    $slice-2:str-slice($output, -(str-length(#{$last-item}) + $offset));\n    $output:#{$slice-1}#{$closer}#{$slice-2};\n}\n\n@return $output;\n",
              "line": {
                "start": 11,
                "end": 64
              }
            },
            "parameter": [
              {
                "type": "<list>",
                "name": "list"
              },
              {
                "type": "<any>",
                "name": "glue",
                "default": "''"
              },
              {
                "type": "<any>",
                "name": "closer",
                "default": "null"
              },
              {
                "type": "<bool>",
                "name": "quote-strings",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "throw": [
              "`#{$list}` is not a valid list."
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Returns a formatted string of valid <code>$values</code>.\n",
                "context": {
                  "type": "function",
                  "name": "format-valid-values",
                  "code": "@return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n",
                  "line": {
                    "start": 309,
                    "end": 311
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
          "context": {
            "type": "function",
            "name": "is-in-list",
            "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
            "line": {
              "start": 280,
              "end": 290
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 313,
        "end": 313
      },
      "context": {
        "type": "function",
        "name": "space",
        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
        "line": {
          "start": 314,
          "end": 318
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "multiplier"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a unitless number.\n",
            "commentRange": {
              "start": 204,
              "end": 206
            },
            "context": {
              "type": "function",
              "name": "is-unitless-number",
              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 207,
                "end": 217
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 183,
                    "end": 184
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 185,
                      "end": 187
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 115,
                          "end": 141
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 115,
                          "end": 141
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 192,
                          "end": 202
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 207,
                          "end": 217
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 222,
                          "end": 232
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 297,
                    "end": 299
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 300,
                      "end": 304
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 192,
                          "end": 202
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 207,
                          "end": 217
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 222,
                          "end": 232
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 237,
                          "end": 247
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 252,
                          "end": 262
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "function",
                  "name": "space",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                  "line": {
                    "start": 314,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "function",
                  "name": "alley",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                  "line": {
                    "start": 321,
                    "end": 325
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch",
                  "code": "$m:if(is-unitless-number($multiplier), $multiplier, 1);\n$i:if($important == true, $important, false);\n\nmargin-top:space(-$m) if($i, !important, null);\n\n> * {\n    margin-top:space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 214,
                    "end": 223
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
            "line": {
              "start": 138,
              "end": 179
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
            "line": {
              "start": 138,
              "end": 179
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
            "line": {
              "start": 138,
              "end": 179
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
            "line": {
              "start": 138,
              "end": 179
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
            "line": {
              "start": 138,
              "end": 179
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
            "line": {
              "start": 138,
              "end": 179
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
            "line": {
              "start": 138,
              "end": 179
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m:if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top:if($m, space($m), space());\n    margin-bottom:if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom:if($m, calc(#{space($m)} * .25), calc(#{space()} * .25));\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:if($m, calc(var(--space-top-h) * #{$m}), var(--space-top-h));\n    margin-bottom:if($m, calc(var(--space-bottom-h) * #{$m}), var(--space-bottom-h));\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom:if($m, space($m), space());\n}\n",
            "line": {
              "start": 138,
              "end": 179
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "mgbch",
            "code": "$m:if(is-unitless-number($multiplier), $multiplier, 1);\n$i:if($important == true, $important, false);\n\nmargin-top:space(-$m) if($i, !important, null);\n\n> * {\n    margin-top:space($m) if($i, !important, null);\n}\n",
            "line": {
              "start": 214,
              "end": 223
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "mgbch",
            "code": "$m:if(is-unitless-number($multiplier), $multiplier, 1);\n$i:if($important == true, $important, false);\n\nmargin-top:space(-$m) if($i, !important, null);\n\n> * {\n    margin-top:space($m) if($i, !important, null);\n}\n",
            "line": {
              "start": 214,
              "end": 223
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "figcaption",
            "code": "padding-top:space(0.375);\ncolor:var(--color-contrast-medium);\ntext-align:center;\nfont-size:var(--font-size-xsmall);\n",
            "line": {
              "start": 332,
              "end": 337
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 320,
        "end": 320
      },
      "context": {
        "type": "function",
        "name": "alley",
        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
        "line": {
          "start": 321,
          "end": 325
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "multiplier"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a unitless number.\n",
            "commentRange": {
              "start": 204,
              "end": 206
            },
            "context": {
              "type": "function",
              "name": "is-unitless-number",
              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 207,
                "end": 217
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 183,
                    "end": 184
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 185,
                      "end": 187
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 115,
                          "end": 141
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 115,
                          "end": 141
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 192,
                          "end": 202
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 207,
                          "end": 217
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 222,
                          "end": 232
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 297,
                    "end": 299
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 300,
                      "end": 304
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 192,
                          "end": 202
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 207,
                          "end": 217
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 222,
                          "end": 232
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 237,
                          "end": 247
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 252,
                          "end": 262
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "function",
                  "name": "space",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                  "line": {
                    "start": 314,
                    "end": 318
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "function",
                  "name": "alley",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                  "line": {
                    "start": 321,
                    "end": 325
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch",
                  "code": "$m:if(is-unitless-number($multiplier), $multiplier, 1);\n$i:if($important == true, $important, false);\n\nmargin-top:space(-$m) if($i, !important, null);\n\n> * {\n    margin-top:space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 214,
                    "end": 223
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 227,
              "end": 243
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 227,
              "end": 243
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 227,
              "end": 243
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 227,
              "end": 243
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 227,
              "end": 243
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 227,
              "end": 243
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 227,
              "end": 243
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 227,
              "end": 243
            }
          }
        }
      ]
    }
  ],
  "variables": [
    {
      "description": "",
      "commentRange": {
        "start": 6,
        "end": 6
      },
      "context": {
        "type": "variable",
        "name": "font-stack-serif",
        "value": "Constantia, 'Lucida Bright', Lucidabright, Georgia, serif",
        "scope": "default",
        "line": {
          "start": 7,
          "end": 7
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 8,
        "end": 8
      },
      "context": {
        "type": "variable",
        "name": "font-stack-sansserif",
        "value": "'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif",
        "scope": "default",
        "line": {
          "start": 9,
          "end": 9
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 10,
        "end": 10
      },
      "context": {
        "type": "variable",
        "name": "font-stack-general",
        "value": "$font-stack-sansserif",
        "scope": "default",
        "line": {
          "start": 11,
          "end": 11
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 12,
        "end": 12
      },
      "context": {
        "type": "variable",
        "name": "font-stack-heading",
        "value": "$font-stack-general",
        "scope": "default",
        "line": {
          "start": 13,
          "end": 13
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 14,
        "end": 14
      },
      "context": {
        "type": "variable",
        "name": "font-stack-monospace",
        "value": "Consolas, 'Ubuntu Mono', 'Lucida Console', 'Courier New', Courier, monospace",
        "scope": "default",
        "line": {
          "start": 15,
          "end": 15
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 16,
        "end": 16
      },
      "context": {
        "type": "variable",
        "name": "font-stacks",
        "value": "()",
        "scope": "default",
        "line": {
          "start": 17,
          "end": 17
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 18,
        "end": 18
      },
      "context": {
        "type": "variable",
        "name": "font-stacks",
        "value": "map-merge((\n    serif: $font-stack-serif,\n    sansserif: $font-stack-sansserif,\n    general: $font-stack-general,\n    heading: $font-stack-heading,\n    monospace: $font-stack-monospace,\n), $font-stacks)",
        "scope": "private",
        "line": {
          "start": 19,
          "end": 25
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 26,
        "end": 26
      },
      "context": {
        "type": "variable",
        "name": "font-size-base",
        "value": "16px",
        "scope": "default",
        "line": {
          "start": 27,
          "end": 27
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "Converts <code>$size-in-rem</code> to pixels based on <code>$font-size-base</code>.\n",
          "context": {
            "type": "function",
            "name": "rem-to-pixels",
            "code": "@return strip-unit($size-in-rem) * $font-size-base;\n",
            "line": {
              "start": 156,
              "end": 158
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 28,
        "end": 28
      },
      "context": {
        "type": "variable",
        "name": "font-size-general",
        "value": "1rem",
        "scope": "default",
        "line": {
          "start": 29,
          "end": 29
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 30,
        "end": 30
      },
      "context": {
        "type": "variable",
        "name": "font-size-big",
        "value": "1.1em",
        "scope": "default",
        "line": {
          "start": 31,
          "end": 31
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 32,
        "end": 32
      },
      "context": {
        "type": "variable",
        "name": "font-size-xbig",
        "value": "1.2em",
        "scope": "default",
        "line": {
          "start": 33,
          "end": 33
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 34,
        "end": 34
      },
      "context": {
        "type": "variable",
        "name": "font-size-xxbig",
        "value": "1.3em",
        "scope": "default",
        "line": {
          "start": 35,
          "end": 35
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 36,
        "end": 36
      },
      "context": {
        "type": "variable",
        "name": "font-size-small",
        "value": "0.9em",
        "scope": "default",
        "line": {
          "start": 37,
          "end": 37
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 38,
        "end": 38
      },
      "context": {
        "type": "variable",
        "name": "font-size-xsmall",
        "value": "0.8em",
        "scope": "default",
        "line": {
          "start": 39,
          "end": 39
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 40,
        "end": 40
      },
      "context": {
        "type": "variable",
        "name": "font-size-xxsmall",
        "value": "0.7em",
        "scope": "default",
        "line": {
          "start": 41,
          "end": 41
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 42,
        "end": 42
      },
      "context": {
        "type": "variable",
        "name": "font-size-h1",
        "value": "2em",
        "scope": "default",
        "line": {
          "start": 43,
          "end": 43
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 44,
        "end": 44
      },
      "context": {
        "type": "variable",
        "name": "font-size-h2",
        "value": "1.6em",
        "scope": "default",
        "line": {
          "start": 45,
          "end": 45
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 46,
        "end": 46
      },
      "context": {
        "type": "variable",
        "name": "font-size-h3",
        "value": "1.4em",
        "scope": "default",
        "line": {
          "start": 47,
          "end": 47
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 48,
        "end": 48
      },
      "context": {
        "type": "variable",
        "name": "font-size-h4",
        "value": "1.2em",
        "scope": "default",
        "line": {
          "start": 49,
          "end": 49
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 50,
        "end": 50
      },
      "context": {
        "type": "variable",
        "name": "font-sizes",
        "value": "()",
        "scope": "default",
        "line": {
          "start": 51,
          "end": 51
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 52,
        "end": 52
      },
      "context": {
        "type": "variable",
        "name": "font-sizes",
        "value": "map-merge((\n    base: $font-size-base,\n    general: $font-size-general,\n    big: $font-size-big,\n    xbig: $font-size-xbig,\n    xxbig: $font-size-xxbig,\n    small: $font-size-small,\n    xsmall: $font-size-xsmall,\n    xxsmall: $font-size-xxsmall,\n    h1: $font-size-h1,\n    h2: $font-size-h2,\n    h3: $font-size-h3,\n    h4: $font-size-h4,\n), $font-sizes)",
        "scope": "private",
        "line": {
          "start": 53,
          "end": 66
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 67,
        "end": 67
      },
      "context": {
        "type": "variable",
        "name": "font-weight-normal",
        "value": "400",
        "scope": "default",
        "line": {
          "start": 68,
          "end": 68
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 69,
        "end": 69
      },
      "context": {
        "type": "variable",
        "name": "font-weight-bold",
        "value": "700",
        "scope": "default",
        "line": {
          "start": 70,
          "end": 70
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 71,
        "end": 71
      },
      "context": {
        "type": "variable",
        "name": "font-weight-heading",
        "value": "$font-weight-bold",
        "scope": "default",
        "line": {
          "start": 72,
          "end": 72
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 73,
        "end": 73
      },
      "context": {
        "type": "variable",
        "name": "font-weights",
        "value": "()",
        "scope": "default",
        "line": {
          "start": 74,
          "end": 74
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 75,
        "end": 75
      },
      "context": {
        "type": "variable",
        "name": "font-weights",
        "value": "map-merge((\n    normal: $font-weight-normal,\n    bold: $font-weight-bold,\n    heading: $font-weight-heading,\n), $font-weights)",
        "scope": "private",
        "line": {
          "start": 76,
          "end": 80
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 81,
        "end": 81
      },
      "context": {
        "type": "variable",
        "name": "line-height-general",
        "value": "1.5",
        "scope": "default",
        "line": {
          "start": 82,
          "end": 82
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 83,
        "end": 83
      },
      "context": {
        "type": "variable",
        "name": "line-height-h1",
        "value": "1.15",
        "scope": "default",
        "line": {
          "start": 84,
          "end": 84
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 85,
        "end": 85
      },
      "context": {
        "type": "variable",
        "name": "line-height-h2",
        "value": "1.25",
        "scope": "default",
        "line": {
          "start": 86,
          "end": 86
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 87,
        "end": 87
      },
      "context": {
        "type": "variable",
        "name": "line-height-h3",
        "value": "1.35",
        "scope": "default",
        "line": {
          "start": 88,
          "end": 88
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 89,
        "end": 89
      },
      "context": {
        "type": "variable",
        "name": "line-height-h4",
        "value": "1.45",
        "scope": "default",
        "line": {
          "start": 90,
          "end": 90
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 91,
        "end": 91
      },
      "context": {
        "type": "variable",
        "name": "line-height-general-in-rem",
        "value": "$line-height-general * 1rem",
        "scope": "default",
        "line": {
          "start": 92,
          "end": 92
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 93,
        "end": 93
      },
      "context": {
        "type": "variable",
        "name": "line-height-h1-in-rem",
        "value": "$line-height-h1 * 1rem",
        "scope": "default",
        "line": {
          "start": 94,
          "end": 94
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 95,
        "end": 95
      },
      "context": {
        "type": "variable",
        "name": "line-height-h2-in-rem",
        "value": "$line-height-h2 * 1rem",
        "scope": "default",
        "line": {
          "start": 96,
          "end": 96
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 97,
        "end": 97
      },
      "context": {
        "type": "variable",
        "name": "line-height-h3-in-rem",
        "value": "$line-height-h3 * 1rem",
        "scope": "default",
        "line": {
          "start": 98,
          "end": 98
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 99,
        "end": 99
      },
      "context": {
        "type": "variable",
        "name": "line-height-h4-in-rem",
        "value": "$line-height-h4 * 1rem",
        "scope": "default",
        "line": {
          "start": 100,
          "end": 100
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 101,
        "end": 101
      },
      "context": {
        "type": "variable",
        "name": "line-heights",
        "value": "()",
        "scope": "default",
        "line": {
          "start": 102,
          "end": 102
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 103,
        "end": 103
      },
      "context": {
        "type": "variable",
        "name": "line-heights",
        "value": "map-merge((\n    general: $line-height-general,\n    h1: $line-height-h1,\n    h2: $line-height-h2,\n    h3: $line-height-h3,\n    h4: $line-height-h4,\n    general-in-rem: $line-height-general-in-rem,\n    h1-in-rem: $line-height-h1-in-rem,\n    h2-in-rem: $line-height-h2-in-rem,\n    h3-in-rem: $line-height-h3-in-rem,\n    h4-in-rem: $line-height-h4-in-rem,\n), $line-heights)",
        "scope": "private",
        "line": {
          "start": 104,
          "end": 115
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 122,
        "end": 122
      },
      "context": {
        "type": "variable",
        "name": "color-primary",
        "value": "#dc2f3c",
        "scope": "default",
        "line": {
          "start": 123,
          "end": 123
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 124,
        "end": 124
      },
      "context": {
        "type": "variable",
        "name": "color-dark-accent",
        "value": "#587b98",
        "scope": "default",
        "line": {
          "start": 125,
          "end": 125
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 126,
        "end": 126
      },
      "context": {
        "type": "variable",
        "name": "color-light-accent",
        "value": "#76b1df",
        "scope": "default",
        "line": {
          "start": 127,
          "end": 127
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 128,
        "end": 128
      },
      "context": {
        "type": "variable",
        "name": "color-background",
        "value": "#ffffff",
        "scope": "default",
        "line": {
          "start": 129,
          "end": 129
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 130,
        "end": 130
      },
      "context": {
        "type": "variable",
        "name": "color-contrast",
        "value": "#252428",
        "scope": "default",
        "line": {
          "start": 131,
          "end": 131
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 132,
        "end": 132
      },
      "context": {
        "type": "variable",
        "name": "color-contrast-medium",
        "value": "#8c8c8c",
        "scope": "default",
        "line": {
          "start": 133,
          "end": 133
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 134,
        "end": 134
      },
      "context": {
        "type": "variable",
        "name": "color-contrast-low",
        "value": "#bfbfbf",
        "scope": "default",
        "line": {
          "start": 135,
          "end": 135
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 136,
        "end": 136
      },
      "context": {
        "type": "variable",
        "name": "color-contrast-lower",
        "value": "#d9d9d9",
        "scope": "default",
        "line": {
          "start": 137,
          "end": 137
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 138,
        "end": 138
      },
      "context": {
        "type": "variable",
        "name": "color-contrast-lowest",
        "value": "#f2f2f2",
        "scope": "default",
        "line": {
          "start": 139,
          "end": 139
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 140,
        "end": 140
      },
      "context": {
        "type": "variable",
        "name": "color-contrast-high",
        "value": "#737373",
        "scope": "default",
        "line": {
          "start": 141,
          "end": 141
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 142,
        "end": 142
      },
      "context": {
        "type": "variable",
        "name": "color-contrast-higher",
        "value": "#595959",
        "scope": "default",
        "line": {
          "start": 143,
          "end": 143
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 144,
        "end": 144
      },
      "context": {
        "type": "variable",
        "name": "color-contrast-highest",
        "value": "#404040",
        "scope": "default",
        "line": {
          "start": 145,
          "end": 145
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 146,
        "end": 146
      },
      "context": {
        "type": "variable",
        "name": "color-success",
        "value": "#27ae60",
        "scope": "default",
        "line": {
          "start": 147,
          "end": 147
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 148,
        "end": 148
      },
      "context": {
        "type": "variable",
        "name": "color-alert",
        "value": "#c0392b",
        "scope": "default",
        "line": {
          "start": 149,
          "end": 149
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 150,
        "end": 150
      },
      "context": {
        "type": "variable",
        "name": "color-warning",
        "value": "#d35400",
        "scope": "default",
        "line": {
          "start": 151,
          "end": 151
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 152,
        "end": 152
      },
      "context": {
        "type": "variable",
        "name": "color-highlight",
        "value": "#f1c40f",
        "scope": "default",
        "line": {
          "start": 153,
          "end": 153
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 154,
        "end": 154
      },
      "context": {
        "type": "variable",
        "name": "color-dribbble",
        "value": "#ea4c89",
        "scope": "default",
        "line": {
          "start": 155,
          "end": 155
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 156,
        "end": 156
      },
      "context": {
        "type": "variable",
        "name": "color-facebook",
        "value": "#3b5998",
        "scope": "default",
        "line": {
          "start": 157,
          "end": 157
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 158,
        "end": 158
      },
      "context": {
        "type": "variable",
        "name": "color-flickr",
        "value": "#ff0084",
        "scope": "default",
        "line": {
          "start": 159,
          "end": 159
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 160,
        "end": 160
      },
      "context": {
        "type": "variable",
        "name": "color-instagram",
        "value": "#517fa4",
        "scope": "default",
        "line": {
          "start": 161,
          "end": 161
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 162,
        "end": 162
      },
      "context": {
        "type": "variable",
        "name": "color-linkedin",
        "value": "#0077b5",
        "scope": "default",
        "line": {
          "start": 163,
          "end": 163
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 164,
        "end": 164
      },
      "context": {
        "type": "variable",
        "name": "color-medium",
        "value": "#00ab6b",
        "scope": "default",
        "line": {
          "start": 165,
          "end": 165
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 166,
        "end": 166
      },
      "context": {
        "type": "variable",
        "name": "color-pinterest",
        "value": "#bd081c",
        "scope": "default",
        "line": {
          "start": 167,
          "end": 167
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 168,
        "end": 168
      },
      "context": {
        "type": "variable",
        "name": "color-rss",
        "value": "#f26522",
        "scope": "default",
        "line": {
          "start": 169,
          "end": 169
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 170,
        "end": 170
      },
      "context": {
        "type": "variable",
        "name": "color-tumblr",
        "value": "#35465c",
        "scope": "default",
        "line": {
          "start": 171,
          "end": 171
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 172,
        "end": 172
      },
      "context": {
        "type": "variable",
        "name": "color-twitter",
        "value": "#55acee",
        "scope": "default",
        "line": {
          "start": 173,
          "end": 173
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 174,
        "end": 174
      },
      "context": {
        "type": "variable",
        "name": "color-youtube",
        "value": "#b31217",
        "scope": "default",
        "line": {
          "start": 175,
          "end": 175
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 176,
        "end": 176
      },
      "context": {
        "type": "variable",
        "name": "colors",
        "value": "()",
        "scope": "default",
        "line": {
          "start": 177,
          "end": 177
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 178,
        "end": 178
      },
      "context": {
        "type": "variable",
        "name": "colors",
        "value": "map-merge((\n    primary:$color-primary,\n    dark-accent:$color-dark-accent,\n    light-accent:$color-light-accent,\n    background:$color-background,\n    contrast:$color-contrast,\n    contrast-medium:$color-contrast-medium,\n    contrast-low:$color-contrast-low,\n    contrast-lower:$color-contrast-lower,\n    contrast-lowest:$color-contrast-lowest,\n    contrast-high:$color-contrast-high,\n    contrast-higher:$color-contrast-higher,\n    contrast-highest:$color-contrast-highest,\n    success:$color-success,\n    alert:$color-alert,\n    warning:$color-warning,\n    highlight:$color-highlight,\n    dribbble:$color-dribbble,\n    facebook:$color-facebook,\n    flickr:$color-flickr,\n    instagram:$color-instagram,\n    linkedin:$color-linkedin,\n    medium:$color-medium,\n    pinterest:$color-pinterest,\n    rss:$color-rss,\n    tumblr:$color-tumblr,\n    twitter:$color-twitter,\n    youtube:$color-youtube,\n), $colors)",
        "scope": "private",
        "line": {
          "start": 179,
          "end": 207
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 214,
        "end": 214
      },
      "context": {
        "type": "variable",
        "name": "space",
        "value": "$font-size-general * $line-height-general",
        "scope": "default",
        "line": {
          "start": 215,
          "end": 215
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 216,
        "end": 216
      },
      "context": {
        "type": "variable",
        "name": "alley",
        "value": "30px",
        "scope": "default",
        "line": {
          "start": 217,
          "end": 217
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 218,
        "end": 218
      },
      "context": {
        "type": "variable",
        "name": "p-inline-t",
        "value": "0.125rem",
        "scope": "default",
        "line": {
          "start": 219,
          "end": 219
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 220,
        "end": 220
      },
      "context": {
        "type": "variable",
        "name": "p-inline-r",
        "value": "0.25rem",
        "scope": "default",
        "line": {
          "start": 221,
          "end": 221
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 222,
        "end": 222
      },
      "context": {
        "type": "variable",
        "name": "p-inline-b",
        "value": "0.125rem",
        "scope": "default",
        "line": {
          "start": 223,
          "end": 223
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 224,
        "end": 224
      },
      "context": {
        "type": "variable",
        "name": "p-inline-l",
        "value": "0.25rem",
        "scope": "default",
        "line": {
          "start": 225,
          "end": 225
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 226,
        "end": 226
      },
      "context": {
        "type": "variable",
        "name": "p-box-t",
        "value": "0.75rem",
        "scope": "default",
        "line": {
          "start": 227,
          "end": 227
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 228,
        "end": 228
      },
      "context": {
        "type": "variable",
        "name": "p-box-r",
        "value": "1.25rem",
        "scope": "default",
        "line": {
          "start": 229,
          "end": 229
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 230,
        "end": 230
      },
      "context": {
        "type": "variable",
        "name": "p-box-b",
        "value": "0.75rem",
        "scope": "default",
        "line": {
          "start": 231,
          "end": 231
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 232,
        "end": 232
      },
      "context": {
        "type": "variable",
        "name": "p-box-l",
        "value": "1rem",
        "scope": "default",
        "line": {
          "start": 233,
          "end": 233
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 234,
        "end": 234
      },
      "context": {
        "type": "variable",
        "name": "p-message-t",
        "value": "0.75rem",
        "scope": "default",
        "line": {
          "start": 235,
          "end": 235
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 236,
        "end": 236
      },
      "context": {
        "type": "variable",
        "name": "p-message-r",
        "value": "3.25rem",
        "scope": "default",
        "line": {
          "start": 237,
          "end": 237
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 238,
        "end": 238
      },
      "context": {
        "type": "variable",
        "name": "p-message-b",
        "value": "0.75rem",
        "scope": "default",
        "line": {
          "start": 239,
          "end": 239
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 240,
        "end": 240
      },
      "context": {
        "type": "variable",
        "name": "p-message-l",
        "value": "1rem",
        "scope": "default",
        "line": {
          "start": 241,
          "end": 241
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 242,
        "end": 242
      },
      "context": {
        "type": "variable",
        "name": "p-table-t",
        "value": "0.5rem",
        "scope": "default",
        "line": {
          "start": 243,
          "end": 243
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 244,
        "end": 244
      },
      "context": {
        "type": "variable",
        "name": "p-table-r",
        "value": "2rem",
        "scope": "default",
        "line": {
          "start": 245,
          "end": 245
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 246,
        "end": 246
      },
      "context": {
        "type": "variable",
        "name": "p-table-b",
        "value": "0.5rem",
        "scope": "default",
        "line": {
          "start": 247,
          "end": 247
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 248,
        "end": 248
      },
      "context": {
        "type": "variable",
        "name": "p-table-l",
        "value": "0",
        "scope": "default",
        "line": {
          "start": 249,
          "end": 249
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 250,
        "end": 250
      },
      "context": {
        "type": "variable",
        "name": "p-button-t",
        "value": "0.425em",
        "scope": "default",
        "line": {
          "start": 251,
          "end": 251
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 252,
        "end": 252
      },
      "context": {
        "type": "variable",
        "name": "p-button-r",
        "value": "1em",
        "scope": "default",
        "line": {
          "start": 253,
          "end": 253
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 254,
        "end": 254
      },
      "context": {
        "type": "variable",
        "name": "p-button-b",
        "value": "0.425em",
        "scope": "default",
        "line": {
          "start": 255,
          "end": 255
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 256,
        "end": 256
      },
      "context": {
        "type": "variable",
        "name": "p-button-l",
        "value": "1em",
        "scope": "default",
        "line": {
          "start": 257,
          "end": 257
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 258,
        "end": 258
      },
      "context": {
        "type": "variable",
        "name": "p-input-t",
        "value": "0.5rem",
        "scope": "default",
        "line": {
          "start": 259,
          "end": 259
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 260,
        "end": 260
      },
      "context": {
        "type": "variable",
        "name": "p-input-r",
        "value": "0.75rem",
        "scope": "default",
        "line": {
          "start": 261,
          "end": 261
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 262,
        "end": 262
      },
      "context": {
        "type": "variable",
        "name": "p-input-b",
        "value": "0.5rem",
        "scope": "default",
        "line": {
          "start": 263,
          "end": 263
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 264,
        "end": 264
      },
      "context": {
        "type": "variable",
        "name": "p-input-l",
        "value": "0.75rem",
        "scope": "default",
        "line": {
          "start": 265,
          "end": 265
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 266,
        "end": 266
      },
      "context": {
        "type": "variable",
        "name": "alley-sizes",
        "value": "()",
        "scope": "default",
        "line": {
          "start": 267,
          "end": 267
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 227,
              "end": 243
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m:map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m:$multiplier;\n}\n\n@if $type == row {\n    margin-right:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left:if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left:if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 227,
              "end": 243
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 267,
              "end": 289
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 267,
              "end": 289
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 268,
        "end": 268
      },
      "context": {
        "type": "variable",
        "name": "alley-sizes",
        "value": "map-merge((\n    noalley: 0,\n    tightest: 0.25,\n    tighter: 0.5,\n    tight: 0.75,\n    comfy: 1,\n    loose: 1.25,\n    looser: 1.5,\n    loosest: 1.75,\n), $alley-sizes)",
        "scope": "private",
        "line": {
          "start": 269,
          "end": 278
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 285,
        "end": 285
      },
      "context": {
        "type": "variable",
        "name": "ease-in-out-expo",
        "value": "cubic-bezier(1, 0, 0, 1)",
        "scope": "private",
        "line": {
          "start": 286,
          "end": 286
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 287,
        "end": 287
      },
      "context": {
        "type": "variable",
        "name": "ease-in-out-quart",
        "value": "cubic-bezier(0.77, 0, 0.175, 1)",
        "scope": "private",
        "line": {
          "start": 288,
          "end": 288
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 289,
        "end": 289
      },
      "context": {
        "type": "variable",
        "name": "default-easing",
        "value": "$ease-in-out-expo",
        "scope": "default",
        "line": {
          "start": 290,
          "end": 290
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 297,
        "end": 297
      },
      "context": {
        "type": "variable",
        "name": "border-size",
        "value": "1px",
        "scope": "default",
        "line": {
          "start": 298,
          "end": 298
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 299,
        "end": 299
      },
      "context": {
        "type": "variable",
        "name": "max-site-width",
        "value": "1200px",
        "scope": "default",
        "line": {
          "start": 300,
          "end": 300
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 307,
        "end": 307
      },
      "context": {
        "type": "variable",
        "name": "breakpoint-s",
        "value": "480px",
        "scope": "default",
        "line": {
          "start": 308,
          "end": 308
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "min-small",
            "code": "@media (min-width:$breakpoint-s) {\n    @content;\n}\n",
            "line": {
              "start": 55,
              "end": 59
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 309,
        "end": 309
      },
      "context": {
        "type": "variable",
        "name": "breakpoint-m",
        "value": "768px",
        "scope": "default",
        "line": {
          "start": 310,
          "end": 310
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "min-medium",
            "code": "@media (min-width:$breakpoint-m) {\n    @content;\n}\n",
            "line": {
              "start": 62,
              "end": 66
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 311,
        "end": 311
      },
      "context": {
        "type": "variable",
        "name": "breakpoint-l",
        "value": "960px",
        "scope": "default",
        "line": {
          "start": 312,
          "end": 312
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "min-large",
            "code": "@media (min-width:$breakpoint-l) {\n    @content;\n}\n",
            "line": {
              "start": 69,
              "end": 73
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 313,
        "end": 313
      },
      "context": {
        "type": "variable",
        "name": "breakpoint-xl",
        "value": "1200px",
        "scope": "default",
        "line": {
          "start": 314,
          "end": 314
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "min-xlarge",
            "code": "@media (min-width:$breakpoint-xl) {\n    @content;\n}\n",
            "line": {
              "start": 76,
              "end": 80
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 315,
        "end": 315
      },
      "context": {
        "type": "variable",
        "name": "breakpoints",
        "value": "()",
        "scope": "default",
        "line": {
          "start": 316,
          "end": 316
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
          "context": {
            "type": "mixin",
            "name": "hide",
            "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
            "line": {
              "start": 200,
              "end": 210
            }
          }
        },
        {
          "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
          "context": {
            "type": "mixin",
            "name": "hide",
            "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
            "line": {
              "start": 200,
              "end": 210
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 267,
              "end": 289
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m:false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m:map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m:$alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 267,
              "end": 289
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 292,
              "end": 318
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 292,
              "end": 318
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 292,
              "end": 318
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 292,
              "end": 318
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 317,
        "end": 317
      },
      "context": {
        "type": "variable",
        "name": "breakpoints",
        "value": "map-merge((\n    s: $breakpoint-s,\n    m: $breakpoint-m,\n    l: $breakpoint-l,\n    xl: $breakpoint-xl,\n), $breakpoints)",
        "scope": "private",
        "line": {
          "start": 318,
          "end": 323
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 324,
        "end": 324
      },
      "context": {
        "type": "variable",
        "name": "columns",
        "value": "()",
        "scope": "default",
        "line": {
          "start": 325,
          "end": 325
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 292,
              "end": 318
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 292,
              "end": 318
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 292,
              "end": 318
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map-get($columns, $column-width);\n        }\n    } @else {\n        width:map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 292,
              "end": 318
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 326,
        "end": 326
      },
      "context": {
        "type": "variable",
        "name": "columns",
        "value": "map-merge((\n    1: percentage(1/12),\n    2: percentage(2/12),\n    3: percentage(3/12),\n    4: percentage(4/12),\n    5: percentage(5/12),\n    6: percentage(6/12),\n    7: percentage(7/12),\n    8: percentage(8/12),\n    9: percentage(9/12),\n    10: percentage(10/12),\n    11: percentage(11/12),\n    12: percentage(12/12),\n    p5: 5%,\n    p10: 10%,\n    p15: 15%,\n    p20: 20%,\n    p25: 25%,\n    p30: 30%,\n    p35: 35%,\n    p40: 40%,\n    p45: 45%,\n    p50: 50%,\n    p55: 55%,\n    p60: 60%,\n    p65: 65%,\n    p70: 70%,\n    p75: 75%,\n    p80: 80%,\n    p85: 85%,\n    p90: 90%,\n    p95: 95%,\n    p100: 100%,\n), $columns)",
        "scope": "private",
        "line": {
          "start": 327,
          "end": 360
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 367,
        "end": 367
      },
      "context": {
        "type": "variable",
        "name": "lengths-absolute",
        "value": "(cm, mm, in, px, pt, pc)",
        "scope": "private",
        "line": {
          "start": 368,
          "end": 368
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 369,
        "end": 369
      },
      "context": {
        "type": "variable",
        "name": "lengths-relative",
        "value": "(em, ex, ch, rem, vw, vh, vmin, vmax, '%')",
        "scope": "private",
        "line": {
          "start": 370,
          "end": 370
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 371,
        "end": 371
      },
      "context": {
        "type": "variable",
        "name": "lengths",
        "value": "join($lengths-absolute, $lengths-relative)",
        "scope": "private",
        "line": {
          "start": 372,
          "end": 372
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "Checks if <code>$value</code> is a number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-unit-number",
            "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 192,
              "end": 202
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-unit-number",
            "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 237,
              "end": 247
            }
          }
        }
      ]
    }
  ]
}