{
  "mixins": [
    {
      "description": "",
      "commentRange": {
        "start": 3,
        "end": 3
      },
      "context": {
        "type": "mixin",
        "name": "button-styles",
        "code": "@include ellipsis();\n\ndisplay: inline-block;\npadding: var(--padding-button);\nmin-height: calc(2.25em + (var(--border-size) * 2));\nborder: none;\nborder-radius: 0.25rem;\nbackground-color: var(--color-contrast);\ncolor: var(--color-background);\ncursor: pointer;\ntransition: box-shadow 0.25s, color 0.25s;\n\n&[disabled] {\n    cursor: not-allowed;\n    box-shadow: inset 0 0 0 100vh rgba(white, 0.375);\n\n    &:hover {\n        box-shadow: inset 0 0 0 100vh rgba(white, 0.375);\n    }\n}\n\n&:hover {\n    box-shadow: inset 0 0 0 100vh rgba(black, 0.125);\n}\n\n&:focus {\n    outline: none;\n    box-shadow: 0 0 0.25rem 0 $color-outline;\n}\n",
        "line": {
          "start": 4,
          "end": 34
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "ellipsis",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 400,
              "end": 400
            },
            "context": {
              "type": "mixin",
              "name": "ellipsis",
              "code": "overflow: hidden;\ntext-overflow: ellipsis;\nwhite-space: nowrap;\n",
              "line": {
                "start": 401,
                "end": 405
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "button-styles",
                  "code": "@include ellipsis();\n\ndisplay: inline-block;\npadding: var(--padding-button);\nmin-height: calc(2.25em + (var(--border-size) * 2));\nborder: none;\nborder-radius: 0.25rem;\nbackground-color: var(--color-contrast);\ncolor: var(--color-background);\ncursor: pointer;\ntransition: box-shadow 0.25s, color 0.25s;\n\n&[disabled] {\n    cursor: not-allowed;\n    box-shadow: inset 0 0 0 100vh rgba(white, 0.375);\n\n    &:hover {\n        box-shadow: inset 0 0 0 100vh rgba(white, 0.375);\n    }\n}\n\n&:hover {\n    box-shadow: inset 0 0 0 100vh rgba(black, 0.125);\n}\n\n&:focus {\n    outline: none;\n    box-shadow: 0 0 0.25rem 0 $color-outline;\n}\n",
                  "line": {
                    "start": 4,
                    "end": 34
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_forms.scss",
        "name": "_forms.scss"
      }
    },
    {
      "description": "Converts <code>$aspect-width</code> and <code>$aspect-height</code> to the appropriate bottom padding.\n",
      "commentRange": {
        "start": 1,
        "end": 4
      },
      "context": {
        "type": "mixin",
        "name": "aspect-ratio-to-padding",
        "code": "padding-bottom: percentage($aspect-height / $aspect-width);\n",
        "line": {
          "start": 5,
          "end": 7
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "aspect-width",
          "default": "16"
        },
        {
          "type": "<number>",
          "name": "aspect-height",
          "default": "9"
        }
      ],
      "access": "private",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "Adds styles for a responsive video container.\n",
          "context": {
            "type": "mixin",
            "name": "video-container",
            "code": "@include aspect-ratio-to-padding($aspect-width, $aspect-height);\n\nposition: relative;\ndisplay: block;\nheight: 0;\n\niframe,\nobject,\nembed {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n",
            "line": {
              "start": 12,
              "end": 28
            }
          }
        }
      ]
    },
    {
      "description": "Adds styles for a responsive video container.\n",
      "commentRange": {
        "start": 9,
        "end": 11
      },
      "context": {
        "type": "mixin",
        "name": "video-container",
        "code": "@include aspect-ratio-to-padding($aspect-width, $aspect-height);\n\nposition: relative;\ndisplay: block;\nheight: 0;\n\niframe,\nobject,\nembed {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n",
        "line": {
          "start": 12,
          "end": 28
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "aspect-width",
          "default": "16"
        },
        {
          "type": "<number>",
          "name": "aspect-height",
          "default": "9"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "aspect-ratio-to-padding",
          "autofill": true,
          "item": {
            "description": "Converts <code>$aspect-width</code> and <code>$aspect-height</code> to the appropriate bottom padding.\n",
            "commentRange": {
              "start": 1,
              "end": 4
            },
            "context": {
              "type": "mixin",
              "name": "aspect-ratio-to-padding",
              "code": "padding-bottom: percentage($aspect-height / $aspect-width);\n",
              "line": {
                "start": 5,
                "end": 7
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "aspect-width",
                "default": "16"
              },
              {
                "type": "<number>",
                "name": "aspect-height",
                "default": "9"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Adds styles for a responsive video container.\n",
                "context": {
                  "type": "mixin",
                  "name": "video-container",
                  "code": "@include aspect-ratio-to-padding($aspect-width, $aspect-height);\n\nposition: relative;\ndisplay: block;\nheight: 0;\n\niframe,\nobject,\nembed {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n",
                  "line": {
                    "start": 12,
                    "end": 28
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Includes <code>@content</code> on screens that are at least <code>$min-width</code> wide.\n",
      "commentRange": {
        "start": 30,
        "end": 31
      },
      "context": {
        "type": "mixin",
        "name": "min",
        "code": "@media (min-width: $min-width) {\n    @content;\n}\n",
        "line": {
          "start": 32,
          "end": 36
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "min-width"
        }
      ],
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
          "context": {
            "type": "mixin",
            "name": "hide",
            "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
            "line": {
              "start": 256,
              "end": 266
            }
          }
        },
        {
          "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
          "context": {
            "type": "mixin",
            "name": "hide",
            "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
            "line": {
              "start": 256,
              "end": 266
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 323,
              "end": 345
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 323,
              "end": 345
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 348,
              "end": 374
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 348,
              "end": 374
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 348,
              "end": 374
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 348,
              "end": 374
            }
          }
        }
      ]
    },
    {
      "description": "Includes <code>@content</code> on screens up to <code>$max-width</code> wide.\n",
      "commentRange": {
        "start": 38,
        "end": 39
      },
      "context": {
        "type": "mixin",
        "name": "max",
        "code": "@media (max-width: $max-width) {\n    @content;\n}\n",
        "line": {
          "start": 40,
          "end": 44
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "max-width"
        }
      ],
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 46,
        "end": 47
      },
      "context": {
        "type": "mixin",
        "name": "min-max",
        "code": "@media (min-width: $min-width) and (max-width: $max-width) {\n    @content;\n}\n",
        "line": {
          "start": 48,
          "end": 52
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "min-width"
        },
        {
          "type": "<number>",
          "name": "max-width"
        }
      ],
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 54,
        "end": 54
      },
      "context": {
        "type": "mixin",
        "name": "min-small",
        "code": "@media (min-width: $breakpoint-s) {\n    @content;\n}\n",
        "line": {
          "start": 55,
          "end": 59
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "variable",
          "name": "breakpoint-s",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 370,
              "end": 370
            },
            "context": {
              "type": "variable",
              "name": "breakpoint-s",
              "value": "480px",
              "scope": "default",
              "line": {
                "start": 371,
                "end": 371
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "min-small",
                  "code": "@media (min-width: $breakpoint-s) {\n    @content;\n}\n",
                  "line": {
                    "start": 55,
                    "end": 59
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 61,
        "end": 61
      },
      "context": {
        "type": "mixin",
        "name": "min-medium",
        "code": "@media (min-width: $breakpoint-m) {\n    @content;\n}\n",
        "line": {
          "start": 62,
          "end": 66
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "variable",
          "name": "breakpoint-m",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 372,
              "end": 372
            },
            "context": {
              "type": "variable",
              "name": "breakpoint-m",
              "value": "768px",
              "scope": "default",
              "line": {
                "start": 373,
                "end": 373
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "min-medium",
                  "code": "@media (min-width: $breakpoint-m) {\n    @content;\n}\n",
                  "line": {
                    "start": 62,
                    "end": 66
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 68,
        "end": 68
      },
      "context": {
        "type": "mixin",
        "name": "min-large",
        "code": "@media (min-width: $breakpoint-l) {\n    @content;\n}\n",
        "line": {
          "start": 69,
          "end": 73
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "variable",
          "name": "breakpoint-l",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 374,
              "end": 374
            },
            "context": {
              "type": "variable",
              "name": "breakpoint-l",
              "value": "960px",
              "scope": "default",
              "line": {
                "start": 375,
                "end": 375
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "min-large",
                  "code": "@media (min-width: $breakpoint-l) {\n    @content;\n}\n",
                  "line": {
                    "start": 69,
                    "end": 73
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 75,
        "end": 75
      },
      "context": {
        "type": "mixin",
        "name": "min-xlarge",
        "code": "@media (min-width: $breakpoint-xl) {\n    @content;\n}\n",
        "line": {
          "start": 76,
          "end": 80
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "variable",
          "name": "breakpoint-xl",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 376,
              "end": 376
            },
            "context": {
              "type": "variable",
              "name": "breakpoint-xl",
              "value": "1200px",
              "scope": "default",
              "line": {
                "start": 377,
                "end": 377
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "min-xlarge",
                  "code": "@media (min-width: $breakpoint-xl) {\n    @content;\n}\n",
                  "line": {
                    "start": 76,
                    "end": 80
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Includes <code>@content</code> for ie9 and above.\n",
      "commentRange": {
        "start": 82,
        "end": 82
      },
      "context": {
        "type": "mixin",
        "name": "ie9plus",
        "code": "// @formatter:off\n@media (min-width: 0\\0) and (min-resolution: +72dpi) {\n    @content;\n}\n// @formatter:on\n",
        "line": {
          "start": 83,
          "end": 89
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Includes <code>@content</code> for ie10 and above.\n",
      "commentRange": {
        "start": 91,
        "end": 91
      },
      "context": {
        "type": "mixin",
        "name": "ie10plus",
        "code": "@media (-ms-high-contrast: none), (-ms-high-contrast: active) {\n    @content;\n}\n",
        "line": {
          "start": 92,
          "end": 96
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Removes margins if element is the first and/or last child (depending on <code>$scope</code>).\n",
      "commentRange": {
        "start": 98,
        "end": 99
      },
      "context": {
        "type": "mixin",
        "name": "control-margins",
        "code": "$scope-y: $scope == vertical or $scope == all;\n$scope-x: $scope == horizontal or $scope == all;\n\n@if $scope-y or $scope == top {\n    &:first-child:not(.f-margins) {\n        margin-top: 0;\n    }\n}\n\n@if $scope-x or $scope == right {\n    &:last-child:not(.f-margins) {\n        margin-right: 0;\n    }\n}\n\n@if $scope-y or $scope == bottom {\n    &:last-child:not(.f-margins) {\n        margin-bottom: 0;\n    }\n}\n\n@if $scope-x or $scope == left {\n    &:first-child:not(.f-margins) {\n        margin-left: 0;\n    }\n}\n",
        "line": {
          "start": 100,
          "end": 127
        }
      },
      "parameter": [
        {
          "type": "<string>",
          "name": "scope",
          "default": "all"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "Removes bottom margins from last children.\n",
          "context": {
            "type": "mixin",
            "name": "controlled",
            "code": "* {\n    @include control-margins($scope);\n}\n",
            "line": {
              "start": 130,
              "end": 134
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
            "line": {
              "start": 138,
              "end": 191
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "h",
            "code": "font-weight: var(--font-weight-heading);\nfont-size: var(--font-size-h#{$type});\nfont-family: var(--font-stack-heading);\nline-height: var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m: $margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n",
            "line": {
              "start": 195,
              "end": 217
            }
          }
        }
      ]
    },
    {
      "description": "Removes bottom margins from last children.\n",
      "commentRange": {
        "start": 129,
        "end": 129
      },
      "context": {
        "type": "mixin",
        "name": "controlled",
        "code": "* {\n    @include control-margins($scope);\n}\n",
        "line": {
          "start": 130,
          "end": 134
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "control-margins",
          "autofill": true,
          "item": {
            "description": "Removes margins if element is the first and/or last child (depending on <code>$scope</code>).\n",
            "commentRange": {
              "start": 98,
              "end": 99
            },
            "context": {
              "type": "mixin",
              "name": "control-margins",
              "code": "$scope-y: $scope == vertical or $scope == all;\n$scope-x: $scope == horizontal or $scope == all;\n\n@if $scope-y or $scope == top {\n    &:first-child:not(.f-margins) {\n        margin-top: 0;\n    }\n}\n\n@if $scope-x or $scope == right {\n    &:last-child:not(.f-margins) {\n        margin-right: 0;\n    }\n}\n\n@if $scope-y or $scope == bottom {\n    &:last-child:not(.f-margins) {\n        margin-bottom: 0;\n    }\n}\n\n@if $scope-x or $scope == left {\n    &:first-child:not(.f-margins) {\n        margin-left: 0;\n    }\n}\n",
              "line": {
                "start": 100,
                "end": 127
              }
            },
            "parameter": [
              {
                "type": "<string>",
                "name": "scope",
                "default": "all"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Removes bottom margins from last children.\n",
                "context": {
                  "type": "mixin",
                  "name": "controlled",
                  "code": "* {\n    @include control-margins($scope);\n}\n",
                  "line": {
                    "start": 130,
                    "end": 134
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight: var(--font-weight-heading);\nfont-size: var(--font-size-h#{$type});\nfont-family: var(--font-stack-heading);\nline-height: var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m: $margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n",
                  "line": {
                    "start": 195,
                    "end": 217
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Sets default vertical margins for selected elements\n",
      "commentRange": {
        "start": 136,
        "end": 137
      },
      "context": {
        "type": "mixin",
        "name": "vertical-margins",
        "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
        "line": {
          "start": 138,
          "end": 191
        }
      },
      "parameter": [
        {
          "type": "<number>|false",
          "name": "multiplier",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "control-margins",
          "autofill": true,
          "item": {
            "description": "Removes margins if element is the first and/or last child (depending on <code>$scope</code>).\n",
            "commentRange": {
              "start": 98,
              "end": 99
            },
            "context": {
              "type": "mixin",
              "name": "control-margins",
              "code": "$scope-y: $scope == vertical or $scope == all;\n$scope-x: $scope == horizontal or $scope == all;\n\n@if $scope-y or $scope == top {\n    &:first-child:not(.f-margins) {\n        margin-top: 0;\n    }\n}\n\n@if $scope-x or $scope == right {\n    &:last-child:not(.f-margins) {\n        margin-right: 0;\n    }\n}\n\n@if $scope-y or $scope == bottom {\n    &:last-child:not(.f-margins) {\n        margin-bottom: 0;\n    }\n}\n\n@if $scope-x or $scope == left {\n    &:first-child:not(.f-margins) {\n        margin-left: 0;\n    }\n}\n",
              "line": {
                "start": 100,
                "end": 127
              }
            },
            "parameter": [
              {
                "type": "<string>",
                "name": "scope",
                "default": "all"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Removes bottom margins from last children.\n",
                "context": {
                  "type": "mixin",
                  "name": "controlled",
                  "code": "* {\n    @include control-margins($scope);\n}\n",
                  "line": {
                    "start": 130,
                    "end": 134
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight: var(--font-weight-heading);\nfont-size: var(--font-size-h#{$type});\nfont-family: var(--font-stack-heading);\nline-height: var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m: $margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n",
                  "line": {
                    "start": 195,
                    "end": 217
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
            "commentRange": {
              "start": 277,
              "end": 279
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unitless-number",
              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
              "line": {
                "start": 280,
                "end": 290
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 247,
                    "end": 249
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 250,
                      "end": 260
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 211,
                          "end": 212
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 213,
                            "end": 215
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 325,
                          "end": 327
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 328,
                            "end": 332
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 308,
                                "end": 318
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color-contrast",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 99,
                          "end": 118
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 325,
                    "end": 327
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 328,
                      "end": 332
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 308,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight: var(--font-weight-heading);\nfont-size: var(--font-size-h#{$type});\nfont-family: var(--font-stack-heading);\nline-height: var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m: $margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n",
                  "line": {
                    "start": 195,
                    "end": 217
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 283,
                    "end": 299
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "space",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 341,
              "end": 341
            },
            "context": {
              "type": "function",
              "name": "space",
              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
              "line": {
                "start": 342,
                "end": 346
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "multiplier"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-unitless-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                  "commentRange": {
                    "start": 232,
                    "end": 234
                  },
                  "context": {
                    "type": "function",
                    "name": "is-unitless-number",
                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 235,
                      "end": 245
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 211,
                          "end": 212
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 213,
                            "end": 215
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 325,
                          "end": 327
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 328,
                            "end": 332
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 308,
                                "end": 318
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "function",
                        "name": "space",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                        "line": {
                          "start": 342,
                          "end": 346
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "function",
                        "name": "alley",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                        "line": {
                          "start": 349,
                          "end": 353
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "mgbch",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                        "line": {
                          "start": 270,
                          "end": 279
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 270,
                    "end": 279
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 270,
                    "end": 279
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "figcaption",
                  "code": "padding-top: space(0.375);\ncolor: var(--color-contrast-medium);\ntext-align: center;\nfont-size: var(--font-size-xsmall);\n",
                  "line": {
                    "start": 388,
                    "end": 393
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 193,
        "end": 194
      },
      "context": {
        "type": "mixin",
        "name": "h",
        "code": "font-weight: var(--font-weight-heading);\nfont-size: var(--font-size-h#{$type});\nfont-family: var(--font-stack-heading);\nline-height: var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m: $margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n",
        "line": {
          "start": 195,
          "end": 217
        }
      },
      "parameter": [
        {
          "type": "1|2|3|4|5",
          "name": "type"
        },
        {
          "type": "<number>|false",
          "name": "margins-multiplier",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "control-margins",
          "autofill": true,
          "item": {
            "description": "Removes margins if element is the first and/or last child (depending on <code>$scope</code>).\n",
            "commentRange": {
              "start": 98,
              "end": 99
            },
            "context": {
              "type": "mixin",
              "name": "control-margins",
              "code": "$scope-y: $scope == vertical or $scope == all;\n$scope-x: $scope == horizontal or $scope == all;\n\n@if $scope-y or $scope == top {\n    &:first-child:not(.f-margins) {\n        margin-top: 0;\n    }\n}\n\n@if $scope-x or $scope == right {\n    &:last-child:not(.f-margins) {\n        margin-right: 0;\n    }\n}\n\n@if $scope-y or $scope == bottom {\n    &:last-child:not(.f-margins) {\n        margin-bottom: 0;\n    }\n}\n\n@if $scope-x or $scope == left {\n    &:first-child:not(.f-margins) {\n        margin-left: 0;\n    }\n}\n",
              "line": {
                "start": 100,
                "end": 127
              }
            },
            "parameter": [
              {
                "type": "<string>",
                "name": "scope",
                "default": "all"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Removes bottom margins from last children.\n",
                "context": {
                  "type": "mixin",
                  "name": "controlled",
                  "code": "* {\n    @include control-margins($scope);\n}\n",
                  "line": {
                    "start": 130,
                    "end": 134
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight: var(--font-weight-heading);\nfont-size: var(--font-size-h#{$type});\nfont-family: var(--font-stack-heading);\nline-height: var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m: $margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n",
                  "line": {
                    "start": 195,
                    "end": 217
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
            "commentRange": {
              "start": 277,
              "end": 279
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unitless-number",
              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
              "line": {
                "start": 280,
                "end": 290
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 247,
                    "end": 249
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 250,
                      "end": 260
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 211,
                          "end": 212
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 213,
                            "end": 215
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 325,
                          "end": 327
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 328,
                            "end": 332
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 308,
                                "end": 318
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color-contrast",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 99,
                          "end": 118
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 325,
                    "end": 327
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 328,
                      "end": 332
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 308,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight: var(--font-weight-heading);\nfont-size: var(--font-size-h#{$type});\nfont-family: var(--font-stack-heading);\nline-height: var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m: $margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n",
                  "line": {
                    "start": 195,
                    "end": 217
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 283,
                    "end": 299
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 219,
        "end": 219
      },
      "context": {
        "type": "mixin",
        "name": "big",
        "code": "font-size: var(--font-size-big);\nline-height: var(--line-height-big);\n",
        "line": {
          "start": 220,
          "end": 223
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 225,
        "end": 225
      },
      "context": {
        "type": "mixin",
        "name": "xbig",
        "code": "font-size: var(--font-size-xbig);\nline-height: var(--line-height-xbig);\n",
        "line": {
          "start": 226,
          "end": 229
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 231,
        "end": 231
      },
      "context": {
        "type": "mixin",
        "name": "xxbig",
        "code": "font-size: var(--font-size-xxbig);\nline-height: var(--line-height-xxbig);\n",
        "line": {
          "start": 232,
          "end": 235
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 237,
        "end": 237
      },
      "context": {
        "type": "mixin",
        "name": "small",
        "code": "font-size: var(--font-size-small);\nline-height: var(--line-height-small);\n",
        "line": {
          "start": 238,
          "end": 241
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 243,
        "end": 243
      },
      "context": {
        "type": "mixin",
        "name": "xsmall",
        "code": "font-size: var(--font-size-xsmall);\nline-height: var(--line-height-xsmall);\n",
        "line": {
          "start": 244,
          "end": 247
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 249,
        "end": 249
      },
      "context": {
        "type": "mixin",
        "name": "xxsmall",
        "code": "font-size: var(--font-size-xxsmall);\nline-height: var(--line-height-xxsmall);\n",
        "line": {
          "start": 250,
          "end": 253
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
      "commentRange": {
        "start": 255,
        "end": 255
      },
      "context": {
        "type": "mixin",
        "name": "hide",
        "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
        "line": {
          "start": 256,
          "end": 266
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "min",
          "autofill": true,
          "item": {
            "description": "Includes <code>@content</code> on screens that are at least <code>$min-width</code> wide.\n",
            "commentRange": {
              "start": 30,
              "end": 31
            },
            "context": {
              "type": "mixin",
              "name": "min",
              "code": "@media (min-width: $min-width) {\n    @content;\n}\n",
              "line": {
                "start": 32,
                "end": 36
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "min-width"
              }
            ],
            "access": "public",
            "content": "",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
                  "line": {
                    "start": 256,
                    "end": 266
                  }
                }
              },
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
                  "line": {
                    "start": 256,
                    "end": 266
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unit-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
            "commentRange": {
              "start": 262,
              "end": 264
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unit-number",
              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 265,
                "end": 275
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 247,
                    "end": 249
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 250,
                      "end": 260
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 211,
                          "end": 212
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 213,
                            "end": 215
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 325,
                          "end": 327
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 328,
                            "end": 332
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 308,
                                "end": 318
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color-contrast",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 99,
                          "end": 118
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 325,
                    "end": 327
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 328,
                      "end": 332
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 308,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "variable",
                "name": "lengths",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 440,
                    "end": 440
                  },
                  "context": {
                    "type": "variable",
                    "name": "lengths",
                    "value": "join($lengths-absolute, $lengths-relative)",
                    "scope": "private",
                    "line": {
                      "start": 441,
                      "end": 441
                    }
                  },
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "file": {
                    "path": "_vars.scss",
                    "name": "_vars.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
                  "line": {
                    "start": 256,
                    "end": 266
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "breakpoints",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 378,
              "end": 378
            },
            "context": {
              "type": "variable",
              "name": "breakpoints",
              "value": "()",
              "scope": "default",
              "line": {
                "start": 379,
                "end": 379
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
                  "line": {
                    "start": 256,
                    "end": 266
                  }
                }
              },
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
                  "line": {
                    "start": 256,
                    "end": 266
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 268,
        "end": 269
      },
      "context": {
        "type": "mixin",
        "name": "mgbch",
        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
        "line": {
          "start": 270,
          "end": 279
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "multiplier",
          "default": "1"
        },
        {
          "type": "<bool>",
          "name": "important",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a unitless number.\n",
            "commentRange": {
              "start": 232,
              "end": 234
            },
            "context": {
              "type": "function",
              "name": "is-unitless-number",
              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 235,
                "end": 245
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 211,
                    "end": 212
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 213,
                      "end": 215
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 325,
                    "end": 327
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 328,
                      "end": 332
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 308,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "function",
                  "name": "space",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                  "line": {
                    "start": 342,
                    "end": 346
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "function",
                  "name": "alley",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                  "line": {
                    "start": 349,
                    "end": 353
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 270,
                    "end": 279
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "space",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 341,
              "end": 341
            },
            "context": {
              "type": "function",
              "name": "space",
              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
              "line": {
                "start": 342,
                "end": 346
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "multiplier"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-unitless-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                  "commentRange": {
                    "start": 232,
                    "end": 234
                  },
                  "context": {
                    "type": "function",
                    "name": "is-unitless-number",
                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 235,
                      "end": 245
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 211,
                          "end": 212
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 213,
                            "end": 215
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 325,
                          "end": 327
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 328,
                            "end": 332
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 308,
                                "end": 318
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "function",
                        "name": "space",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                        "line": {
                          "start": 342,
                          "end": 346
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "function",
                        "name": "alley",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                        "line": {
                          "start": 349,
                          "end": 353
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "mgbch",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                        "line": {
                          "start": 270,
                          "end": 279
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 270,
                    "end": 279
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 270,
                    "end": 279
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "figcaption",
                  "code": "padding-top: space(0.375);\ncolor: var(--color-contrast-medium);\ntext-align: center;\nfont-size: var(--font-size-xsmall);\n",
                  "line": {
                    "start": 388,
                    "end": 393
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 281,
        "end": 282
      },
      "context": {
        "type": "mixin",
        "name": "row-alleys",
        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
        "line": {
          "start": 283,
          "end": 299
        }
      },
      "parameter": [
        {
          "type": "row|col",
          "name": "type",
          "default": "row"
        },
        {
          "type": "<number>|false",
          "name": "multiplier",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-nonneg-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
            "commentRange": {
              "start": 277,
              "end": 279
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unitless-number",
              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
              "line": {
                "start": 280,
                "end": 290
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 247,
                    "end": 249
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 250,
                      "end": 260
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 211,
                          "end": 212
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 213,
                            "end": 215
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 325,
                          "end": 327
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 328,
                            "end": 332
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 308,
                                "end": 318
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color-contrast",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 99,
                          "end": 118
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 325,
                    "end": 327
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 328,
                      "end": 332
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 308,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight: var(--font-weight-heading);\nfont-size: var(--font-size-h#{$type});\nfont-family: var(--font-stack-heading);\nline-height: var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m: $margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n",
                  "line": {
                    "start": 195,
                    "end": 217
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 283,
                    "end": 299
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "alley",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 348,
              "end": 348
            },
            "context": {
              "type": "function",
              "name": "alley",
              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
              "line": {
                "start": 349,
                "end": 353
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "multiplier"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-unitless-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                  "commentRange": {
                    "start": 232,
                    "end": 234
                  },
                  "context": {
                    "type": "function",
                    "name": "is-unitless-number",
                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 235,
                      "end": 245
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 211,
                          "end": 212
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 213,
                            "end": 215
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 325,
                          "end": 327
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 328,
                            "end": 332
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 308,
                                "end": 318
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "function",
                        "name": "space",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                        "line": {
                          "start": 342,
                          "end": 346
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "function",
                        "name": "alley",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                        "line": {
                          "start": 349,
                          "end": 353
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "mgbch",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                        "line": {
                          "start": 270,
                          "end": 279
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 283,
                    "end": 299
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 283,
                    "end": 299
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 283,
                    "end": 299
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 283,
                    "end": 299
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 283,
                    "end": 299
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 283,
                    "end": 299
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 283,
                    "end": 299
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 283,
                    "end": 299
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "alley-sizes",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 326,
              "end": 326
            },
            "context": {
              "type": "variable",
              "name": "alley-sizes",
              "value": "()",
              "scope": "default",
              "line": {
                "start": 327,
                "end": 327
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 283,
                    "end": 299
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 283,
                    "end": 299
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row",
            "code": "@include row-alleys(row, $alley-multiplier);\n\ndisplay: flex;\nflex-wrap: wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
            "line": {
              "start": 302,
              "end": 311
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row",
            "code": "@include row-alleys(row, $alley-multiplier);\n\ndisplay: flex;\nflex-wrap: wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
            "line": {
              "start": 302,
              "end": 311
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley-styles",
            "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
            "line": {
              "start": 314,
              "end": 320
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley-styles",
            "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
            "line": {
              "start": 314,
              "end": 320
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 301,
        "end": 301
      },
      "context": {
        "type": "mixin",
        "name": "row",
        "code": "@include row-alleys(row, $alley-multiplier);\n\ndisplay: flex;\nflex-wrap: wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
        "line": {
          "start": 302,
          "end": 311
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "row-alleys",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 281,
              "end": 282
            },
            "context": {
              "type": "mixin",
              "name": "row-alleys",
              "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
              "line": {
                "start": 283,
                "end": 299
              }
            },
            "parameter": [
              {
                "type": "row|col",
                "name": "type",
                "default": "row"
              },
              {
                "type": "<number>|false",
                "name": "multiplier",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-unitless-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                  "commentRange": {
                    "start": 277,
                    "end": 279
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-unitless-number",
                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 280,
                      "end": 290
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-nonneg-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                        "commentRange": {
                          "start": 247,
                          "end": 249
                        },
                        "context": {
                          "type": "function",
                          "name": "is-nonneg-number",
                          "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                          "line": {
                            "start": 250,
                            "end": 260
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          },
                          {
                            "type": "<bool>",
                            "name": "warn",
                            "default": "false"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [
                          {
                            "type": "function",
                            "name": "is-number",
                            "autofill": true,
                            "item": {
                              "description": "Checks if <code>$value</code> is a number.\n",
                              "commentRange": {
                                "start": 211,
                                "end": 212
                              },
                              "context": {
                                "type": "function",
                                "name": "is-number",
                                "code": "@return type-of($value) == number;\n",
                                "line": {
                                  "start": 213,
                                  "end": 215
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "public",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 143,
                                      "end": 169
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 143,
                                      "end": 169
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 220,
                                      "end": 230
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 235,
                                      "end": 245
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 250,
                                      "end": 260
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "function",
                            "name": "show-param-value",
                            "autofill": true,
                            "item": {
                              "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                              "commentRange": {
                                "start": 325,
                                "end": 327
                              },
                              "context": {
                                "type": "function",
                                "name": "show-param-value",
                                "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                "line": {
                                  "start": 328,
                                  "end": 332
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "private",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 220,
                                      "end": 230
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 235,
                                      "end": 245
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 250,
                                      "end": 260
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 265,
                                      "end": 275
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 280,
                                      "end": 290
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-in-list",
                                    "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 308,
                                      "end": 318
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "auto-color-contrast",
                              "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                              "line": {
                                "start": 99,
                                "end": 118
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 325,
                          "end": 327
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 328,
                            "end": 332
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 308,
                                "end": 318
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Sets default vertical margins for selected elements\n",
                      "context": {
                        "type": "mixin",
                        "name": "vertical-margins",
                        "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                        "line": {
                          "start": 138,
                          "end": 191
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "h",
                        "code": "font-weight: var(--font-weight-heading);\nfont-size: var(--font-size-h#{$type});\nfont-family: var(--font-stack-heading);\nline-height: var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m: $margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n",
                        "line": {
                          "start": 195,
                          "end": 217
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 283,
                          "end": 299
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                        "line": {
                          "start": 323,
                          "end": 345
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "col-width",
                        "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                        "line": {
                          "start": 348,
                          "end": 374
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "alley",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 348,
                    "end": 348
                  },
                  "context": {
                    "type": "function",
                    "name": "alley",
                    "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                    "line": {
                      "start": 349,
                      "end": 353
                    }
                  },
                  "parameter": [
                    {
                      "type": "<number>",
                      "name": "multiplier"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-unitless-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a unitless number.\n",
                        "commentRange": {
                          "start": 232,
                          "end": 234
                        },
                        "context": {
                          "type": "function",
                          "name": "is-unitless-number",
                          "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                          "line": {
                            "start": 235,
                            "end": 245
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          },
                          {
                            "type": "<bool>",
                            "name": "warn",
                            "default": "false"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [
                          {
                            "type": "function",
                            "name": "is-number",
                            "autofill": true,
                            "item": {
                              "description": "Checks if <code>$value</code> is a number.\n",
                              "commentRange": {
                                "start": 211,
                                "end": 212
                              },
                              "context": {
                                "type": "function",
                                "name": "is-number",
                                "code": "@return type-of($value) == number;\n",
                                "line": {
                                  "start": 213,
                                  "end": 215
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "public",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 143,
                                      "end": 169
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 143,
                                      "end": 169
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 220,
                                      "end": 230
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 235,
                                      "end": 245
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 250,
                                      "end": 260
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "function",
                            "name": "show-param-value",
                            "autofill": true,
                            "item": {
                              "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                              "commentRange": {
                                "start": 325,
                                "end": 327
                              },
                              "context": {
                                "type": "function",
                                "name": "show-param-value",
                                "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                "line": {
                                  "start": 328,
                                  "end": 332
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "private",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 220,
                                      "end": 230
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 235,
                                      "end": 245
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 250,
                                      "end": 260
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 265,
                                      "end": 275
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 280,
                                      "end": 290
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-in-list",
                                    "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 308,
                                      "end": 318
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "",
                            "context": {
                              "type": "function",
                              "name": "space",
                              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                              "line": {
                                "start": 342,
                                "end": 346
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "function",
                              "name": "alley",
                              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                              "line": {
                                "start": 349,
                                "end": 353
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "mgbch",
                              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                              "line": {
                                "start": 270,
                                "end": 279
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 283,
                          "end": 299
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 283,
                          "end": 299
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 283,
                          "end": 299
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 283,
                          "end": 299
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 283,
                          "end": 299
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 283,
                          "end": 299
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 283,
                          "end": 299
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 283,
                          "end": 299
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "variable",
                "name": "alley-sizes",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 326,
                    "end": 326
                  },
                  "context": {
                    "type": "variable",
                    "name": "alley-sizes",
                    "value": "()",
                    "scope": "default",
                    "line": {
                      "start": 327,
                      "end": 327
                    }
                  },
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "file": {
                    "path": "_vars.scss",
                    "name": "_vars.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 283,
                          "end": 299
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 283,
                          "end": 299
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                        "line": {
                          "start": 323,
                          "end": 345
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                        "line": {
                          "start": 323,
                          "end": 345
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\ndisplay: flex;\nflex-wrap: wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 302,
                    "end": 311
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\ndisplay: flex;\nflex-wrap: wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 302,
                    "end": 311
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley-styles",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 314,
                    "end": 320
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley-styles",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 314,
                    "end": 320
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 313,
        "end": 313
      },
      "context": {
        "type": "mixin",
        "name": "row-alley-styles",
        "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
        "line": {
          "start": 314,
          "end": 320
        }
      },
      "access": "private",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "row-alleys",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 281,
              "end": 282
            },
            "context": {
              "type": "mixin",
              "name": "row-alleys",
              "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
              "line": {
                "start": 283,
                "end": 299
              }
            },
            "parameter": [
              {
                "type": "row|col",
                "name": "type",
                "default": "row"
              },
              {
                "type": "<number>|false",
                "name": "multiplier",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-unitless-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                  "commentRange": {
                    "start": 277,
                    "end": 279
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-unitless-number",
                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 280,
                      "end": 290
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-nonneg-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                        "commentRange": {
                          "start": 247,
                          "end": 249
                        },
                        "context": {
                          "type": "function",
                          "name": "is-nonneg-number",
                          "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                          "line": {
                            "start": 250,
                            "end": 260
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          },
                          {
                            "type": "<bool>",
                            "name": "warn",
                            "default": "false"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [
                          {
                            "type": "function",
                            "name": "is-number",
                            "autofill": true,
                            "item": {
                              "description": "Checks if <code>$value</code> is a number.\n",
                              "commentRange": {
                                "start": 211,
                                "end": 212
                              },
                              "context": {
                                "type": "function",
                                "name": "is-number",
                                "code": "@return type-of($value) == number;\n",
                                "line": {
                                  "start": 213,
                                  "end": 215
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "public",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 143,
                                      "end": 169
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 143,
                                      "end": 169
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 220,
                                      "end": 230
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 235,
                                      "end": 245
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 250,
                                      "end": 260
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "function",
                            "name": "show-param-value",
                            "autofill": true,
                            "item": {
                              "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                              "commentRange": {
                                "start": 325,
                                "end": 327
                              },
                              "context": {
                                "type": "function",
                                "name": "show-param-value",
                                "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                "line": {
                                  "start": 328,
                                  "end": 332
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "private",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 220,
                                      "end": 230
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 235,
                                      "end": 245
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 250,
                                      "end": 260
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 265,
                                      "end": 275
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 280,
                                      "end": 290
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-in-list",
                                    "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 308,
                                      "end": 318
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "auto-color-contrast",
                              "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                              "line": {
                                "start": 99,
                                "end": 118
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 325,
                          "end": 327
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 328,
                            "end": 332
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 308,
                                "end": 318
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Sets default vertical margins for selected elements\n",
                      "context": {
                        "type": "mixin",
                        "name": "vertical-margins",
                        "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                        "line": {
                          "start": 138,
                          "end": 191
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "h",
                        "code": "font-weight: var(--font-weight-heading);\nfont-size: var(--font-size-h#{$type});\nfont-family: var(--font-stack-heading);\nline-height: var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m: $margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n",
                        "line": {
                          "start": 195,
                          "end": 217
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 283,
                          "end": 299
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                        "line": {
                          "start": 323,
                          "end": 345
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "col-width",
                        "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                        "line": {
                          "start": 348,
                          "end": 374
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "alley",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 348,
                    "end": 348
                  },
                  "context": {
                    "type": "function",
                    "name": "alley",
                    "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                    "line": {
                      "start": 349,
                      "end": 353
                    }
                  },
                  "parameter": [
                    {
                      "type": "<number>",
                      "name": "multiplier"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-unitless-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a unitless number.\n",
                        "commentRange": {
                          "start": 232,
                          "end": 234
                        },
                        "context": {
                          "type": "function",
                          "name": "is-unitless-number",
                          "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                          "line": {
                            "start": 235,
                            "end": 245
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          },
                          {
                            "type": "<bool>",
                            "name": "warn",
                            "default": "false"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [
                          {
                            "type": "function",
                            "name": "is-number",
                            "autofill": true,
                            "item": {
                              "description": "Checks if <code>$value</code> is a number.\n",
                              "commentRange": {
                                "start": 211,
                                "end": 212
                              },
                              "context": {
                                "type": "function",
                                "name": "is-number",
                                "code": "@return type-of($value) == number;\n",
                                "line": {
                                  "start": 213,
                                  "end": 215
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "public",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 143,
                                      "end": 169
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 143,
                                      "end": 169
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 220,
                                      "end": 230
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 235,
                                      "end": 245
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 250,
                                      "end": 260
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "function",
                            "name": "show-param-value",
                            "autofill": true,
                            "item": {
                              "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                              "commentRange": {
                                "start": 325,
                                "end": 327
                              },
                              "context": {
                                "type": "function",
                                "name": "show-param-value",
                                "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                "line": {
                                  "start": 328,
                                  "end": 332
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "private",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 220,
                                      "end": 230
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 235,
                                      "end": 245
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 250,
                                      "end": 260
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 265,
                                      "end": 275
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 280,
                                      "end": 290
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-in-list",
                                    "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 308,
                                      "end": 318
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "",
                            "context": {
                              "type": "function",
                              "name": "space",
                              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                              "line": {
                                "start": 342,
                                "end": 346
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "function",
                              "name": "alley",
                              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                              "line": {
                                "start": 349,
                                "end": 353
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "mgbch",
                              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                              "line": {
                                "start": 270,
                                "end": 279
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 283,
                          "end": 299
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 283,
                          "end": 299
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 283,
                          "end": 299
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 283,
                          "end": 299
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 283,
                          "end": 299
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 283,
                          "end": 299
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 283,
                          "end": 299
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 283,
                          "end": 299
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "variable",
                "name": "alley-sizes",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 326,
                    "end": 326
                  },
                  "context": {
                    "type": "variable",
                    "name": "alley-sizes",
                    "value": "()",
                    "scope": "default",
                    "line": {
                      "start": 327,
                      "end": 327
                    }
                  },
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "file": {
                    "path": "_vars.scss",
                    "name": "_vars.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 283,
                          "end": 299
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                        "line": {
                          "start": 283,
                          "end": 299
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                        "line": {
                          "start": 323,
                          "end": 345
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley",
                        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                        "line": {
                          "start": 323,
                          "end": 345
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\ndisplay: flex;\nflex-wrap: wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 302,
                    "end": 311
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\ndisplay: flex;\nflex-wrap: wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 302,
                    "end": 311
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley-styles",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 314,
                    "end": 320
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley-styles",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 314,
                    "end": 320
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 323,
              "end": 345
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 323,
              "end": 345
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 323,
              "end": 345
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 322,
        "end": 322
      },
      "context": {
        "type": "mixin",
        "name": "row-alley",
        "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
        "line": {
          "start": 323,
          "end": 345
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "min",
          "autofill": true,
          "item": {
            "description": "Includes <code>@content</code> on screens that are at least <code>$min-width</code> wide.\n",
            "commentRange": {
              "start": 30,
              "end": 31
            },
            "context": {
              "type": "mixin",
              "name": "min",
              "code": "@media (min-width: $min-width) {\n    @content;\n}\n",
              "line": {
                "start": 32,
                "end": 36
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "min-width"
              }
            ],
            "access": "public",
            "content": "",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
                  "line": {
                    "start": 256,
                    "end": 266
                  }
                }
              },
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
                  "line": {
                    "start": 256,
                    "end": 266
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              }
            ]
          }
        },
        {
          "type": "mixin",
          "name": "row-alley-styles",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 313,
              "end": 313
            },
            "context": {
              "type": "mixin",
              "name": "row-alley-styles",
              "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
              "line": {
                "start": 314,
                "end": 320
              }
            },
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "mixin",
                "name": "row-alleys",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 281,
                    "end": 282
                  },
                  "context": {
                    "type": "mixin",
                    "name": "row-alleys",
                    "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                    "line": {
                      "start": 283,
                      "end": 299
                    }
                  },
                  "parameter": [
                    {
                      "type": "row|col",
                      "name": "type",
                      "default": "row"
                    },
                    {
                      "type": "<number>|false",
                      "name": "multiplier",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-nonneg-unitless-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                        "commentRange": {
                          "start": 277,
                          "end": 279
                        },
                        "context": {
                          "type": "function",
                          "name": "is-nonneg-unitless-number",
                          "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                          "line": {
                            "start": 280,
                            "end": 290
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          },
                          {
                            "type": "<bool>",
                            "name": "warn",
                            "default": "false"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [
                          {
                            "type": "function",
                            "name": "is-nonneg-number",
                            "autofill": true,
                            "item": {
                              "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                              "commentRange": {
                                "start": 247,
                                "end": 249
                              },
                              "context": {
                                "type": "function",
                                "name": "is-nonneg-number",
                                "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                "line": {
                                  "start": 250,
                                  "end": 260
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                },
                                {
                                  "type": "<bool>",
                                  "name": "warn",
                                  "default": "false"
                                }
                              ],
                              "access": "public",
                              "group": [
                                "undefined"
                              ],
                              "require": [
                                {
                                  "type": "function",
                                  "name": "is-number",
                                  "autofill": true,
                                  "item": {
                                    "description": "Checks if <code>$value</code> is a number.\n",
                                    "commentRange": {
                                      "start": 211,
                                      "end": 212
                                    },
                                    "context": {
                                      "type": "function",
                                      "name": "is-number",
                                      "code": "@return type-of($value) == number;\n",
                                      "line": {
                                        "start": 213,
                                        "end": 215
                                      }
                                    },
                                    "parameter": [
                                      {
                                        "type": "<any>",
                                        "name": "value"
                                      }
                                    ],
                                    "access": "public",
                                    "group": [
                                      "undefined"
                                    ],
                                    "require": [],
                                    "file": {
                                      "path": "_funcs.scss",
                                      "name": "_funcs.scss"
                                    },
                                    "usedBy": [
                                      {
                                        "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "decimal-round",
                                          "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                          "line": {
                                            "start": 143,
                                            "end": 169
                                          }
                                        }
                                      },
                                      {
                                        "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "decimal-round",
                                          "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                          "line": {
                                            "start": 143,
                                            "end": 169
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-unit-number",
                                          "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 220,
                                            "end": 230
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a unitless number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-unitless-number",
                                          "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 235,
                                            "end": 245
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-nonneg-number",
                                          "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 250,
                                            "end": 260
                                          }
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "function",
                                  "name": "show-param-value",
                                  "autofill": true,
                                  "item": {
                                    "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                                    "commentRange": {
                                      "start": 325,
                                      "end": 327
                                    },
                                    "context": {
                                      "type": "function",
                                      "name": "show-param-value",
                                      "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                      "line": {
                                        "start": 328,
                                        "end": 332
                                      }
                                    },
                                    "parameter": [
                                      {
                                        "type": "<any>",
                                        "name": "value"
                                      }
                                    ],
                                    "access": "private",
                                    "group": [
                                      "undefined"
                                    ],
                                    "require": [],
                                    "file": {
                                      "path": "_funcs.scss",
                                      "name": "_funcs.scss"
                                    },
                                    "usedBy": [
                                      {
                                        "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-unit-number",
                                          "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 220,
                                            "end": 230
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a unitless number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-unitless-number",
                                          "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 235,
                                            "end": 245
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-nonneg-number",
                                          "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 250,
                                            "end": 260
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-nonneg-unit-number",
                                          "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 265,
                                            "end": 275
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-nonneg-unitless-number",
                                          "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 280,
                                            "end": 290
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-in-list",
                                          "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 308,
                                            "end": 318
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "auto-color-contrast",
                                    "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                                    "line": {
                                      "start": 99,
                                      "end": 118
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 265,
                                      "end": 275
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 280,
                                      "end": 290
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "function",
                            "name": "show-param-value",
                            "autofill": true,
                            "item": {
                              "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                              "commentRange": {
                                "start": 325,
                                "end": 327
                              },
                              "context": {
                                "type": "function",
                                "name": "show-param-value",
                                "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                "line": {
                                  "start": 328,
                                  "end": 332
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                }
                              ],
                              "access": "private",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 220,
                                      "end": 230
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 235,
                                      "end": 245
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 250,
                                      "end": 260
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 265,
                                      "end": 275
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 280,
                                      "end": 290
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-in-list",
                                    "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 308,
                                      "end": 318
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Sets default vertical margins for selected elements\n",
                            "context": {
                              "type": "mixin",
                              "name": "vertical-margins",
                              "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                              "line": {
                                "start": 138,
                                "end": 191
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "h",
                              "code": "font-weight: var(--font-weight-heading);\nfont-size: var(--font-size-h#{$type});\nfont-family: var(--font-stack-heading);\nline-height: var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m: $margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n",
                              "line": {
                                "start": 195,
                                "end": 217
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                              "line": {
                                "start": 283,
                                "end": 299
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alley",
                              "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                              "line": {
                                "start": 323,
                                "end": 345
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "col-width",
                              "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                              "line": {
                                "start": 348,
                                "end": 374
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "alley",
                      "autofill": true,
                      "item": {
                        "description": "",
                        "commentRange": {
                          "start": 348,
                          "end": 348
                        },
                        "context": {
                          "type": "function",
                          "name": "alley",
                          "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                          "line": {
                            "start": 349,
                            "end": 353
                          }
                        },
                        "parameter": [
                          {
                            "type": "<number>",
                            "name": "multiplier"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [
                          {
                            "type": "function",
                            "name": "is-unitless-number",
                            "autofill": true,
                            "item": {
                              "description": "Checks if <code>$value</code> is a unitless number.\n",
                              "commentRange": {
                                "start": 232,
                                "end": 234
                              },
                              "context": {
                                "type": "function",
                                "name": "is-unitless-number",
                                "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                "line": {
                                  "start": 235,
                                  "end": 245
                                }
                              },
                              "parameter": [
                                {
                                  "type": "<any>",
                                  "name": "value"
                                },
                                {
                                  "type": "<bool>",
                                  "name": "warn",
                                  "default": "false"
                                }
                              ],
                              "access": "public",
                              "group": [
                                "undefined"
                              ],
                              "require": [
                                {
                                  "type": "function",
                                  "name": "is-number",
                                  "autofill": true,
                                  "item": {
                                    "description": "Checks if <code>$value</code> is a number.\n",
                                    "commentRange": {
                                      "start": 211,
                                      "end": 212
                                    },
                                    "context": {
                                      "type": "function",
                                      "name": "is-number",
                                      "code": "@return type-of($value) == number;\n",
                                      "line": {
                                        "start": 213,
                                        "end": 215
                                      }
                                    },
                                    "parameter": [
                                      {
                                        "type": "<any>",
                                        "name": "value"
                                      }
                                    ],
                                    "access": "public",
                                    "group": [
                                      "undefined"
                                    ],
                                    "require": [],
                                    "file": {
                                      "path": "_funcs.scss",
                                      "name": "_funcs.scss"
                                    },
                                    "usedBy": [
                                      {
                                        "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "decimal-round",
                                          "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                          "line": {
                                            "start": 143,
                                            "end": 169
                                          }
                                        }
                                      },
                                      {
                                        "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "decimal-round",
                                          "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                          "line": {
                                            "start": 143,
                                            "end": 169
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-unit-number",
                                          "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 220,
                                            "end": 230
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a unitless number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-unitless-number",
                                          "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 235,
                                            "end": 245
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-nonneg-number",
                                          "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 250,
                                            "end": 260
                                          }
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "function",
                                  "name": "show-param-value",
                                  "autofill": true,
                                  "item": {
                                    "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                                    "commentRange": {
                                      "start": 325,
                                      "end": 327
                                    },
                                    "context": {
                                      "type": "function",
                                      "name": "show-param-value",
                                      "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                      "line": {
                                        "start": 328,
                                        "end": 332
                                      }
                                    },
                                    "parameter": [
                                      {
                                        "type": "<any>",
                                        "name": "value"
                                      }
                                    ],
                                    "access": "private",
                                    "group": [
                                      "undefined"
                                    ],
                                    "require": [],
                                    "file": {
                                      "path": "_funcs.scss",
                                      "name": "_funcs.scss"
                                    },
                                    "usedBy": [
                                      {
                                        "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-unit-number",
                                          "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 220,
                                            "end": 230
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a unitless number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-unitless-number",
                                          "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 235,
                                            "end": 245
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-nonneg-number",
                                          "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 250,
                                            "end": 260
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-nonneg-unit-number",
                                          "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 265,
                                            "end": 275
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-nonneg-unitless-number",
                                          "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 280,
                                            "end": 290
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-in-list",
                                          "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 308,
                                            "end": 318
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "",
                                  "context": {
                                    "type": "function",
                                    "name": "space",
                                    "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                                    "line": {
                                      "start": 342,
                                      "end": 346
                                    }
                                  }
                                },
                                {
                                  "description": "",
                                  "context": {
                                    "type": "function",
                                    "name": "alley",
                                    "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                                    "line": {
                                      "start": 349,
                                      "end": 353
                                    }
                                  }
                                },
                                {
                                  "description": "",
                                  "context": {
                                    "type": "mixin",
                                    "name": "mgbch",
                                    "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                                    "line": {
                                      "start": 270,
                                      "end": 279
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                              "line": {
                                "start": 283,
                                "end": 299
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                              "line": {
                                "start": 283,
                                "end": 299
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                              "line": {
                                "start": 283,
                                "end": 299
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                              "line": {
                                "start": 283,
                                "end": 299
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                              "line": {
                                "start": 283,
                                "end": 299
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                              "line": {
                                "start": 283,
                                "end": 299
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                              "line": {
                                "start": 283,
                                "end": 299
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                              "line": {
                                "start": 283,
                                "end": 299
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "variable",
                      "name": "alley-sizes",
                      "autofill": true,
                      "item": {
                        "description": "",
                        "commentRange": {
                          "start": 326,
                          "end": 326
                        },
                        "context": {
                          "type": "variable",
                          "name": "alley-sizes",
                          "value": "()",
                          "scope": "default",
                          "line": {
                            "start": 327,
                            "end": 327
                          }
                        },
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "file": {
                          "path": "_vars.scss",
                          "name": "_vars.scss"
                        },
                        "usedBy": [
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                              "line": {
                                "start": 283,
                                "end": 299
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                              "line": {
                                "start": 283,
                                "end": 299
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alley",
                              "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                              "line": {
                                "start": 323,
                                "end": 345
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alley",
                              "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                              "line": {
                                "start": 323,
                                "end": 345
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_mixins.scss",
                    "name": "_mixins.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row",
                        "code": "@include row-alleys(row, $alley-multiplier);\n\ndisplay: flex;\nflex-wrap: wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                        "line": {
                          "start": 302,
                          "end": 311
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row",
                        "code": "@include row-alleys(row, $alley-multiplier);\n\ndisplay: flex;\nflex-wrap: wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                        "line": {
                          "start": 302,
                          "end": 311
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley-styles",
                        "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                        "line": {
                          "start": 314,
                          "end": 320
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley-styles",
                        "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                        "line": {
                          "start": 314,
                          "end": 320
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
            "commentRange": {
              "start": 277,
              "end": 279
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unitless-number",
              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
              "line": {
                "start": 280,
                "end": 290
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 247,
                    "end": 249
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 250,
                      "end": 260
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 211,
                          "end": 212
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 213,
                            "end": 215
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 325,
                          "end": 327
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 328,
                            "end": 332
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 308,
                                "end": 318
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color-contrast",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 99,
                          "end": 118
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 325,
                    "end": 327
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 328,
                      "end": 332
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 308,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight: var(--font-weight-heading);\nfont-size: var(--font-size-h#{$type});\nfont-family: var(--font-stack-heading);\nline-height: var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m: $margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n",
                  "line": {
                    "start": 195,
                    "end": 217
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 283,
                    "end": 299
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unit-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
            "commentRange": {
              "start": 262,
              "end": 264
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unit-number",
              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 265,
                "end": 275
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 247,
                    "end": 249
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 250,
                      "end": 260
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 211,
                          "end": 212
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 213,
                            "end": 215
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 325,
                          "end": 327
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 328,
                            "end": 332
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 308,
                                "end": 318
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color-contrast",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 99,
                          "end": 118
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 325,
                    "end": 327
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 328,
                      "end": 332
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 308,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "variable",
                "name": "lengths",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 440,
                    "end": 440
                  },
                  "context": {
                    "type": "variable",
                    "name": "lengths",
                    "value": "join($lengths-absolute, $lengths-relative)",
                    "scope": "private",
                    "line": {
                      "start": 441,
                      "end": 441
                    }
                  },
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "file": {
                    "path": "_vars.scss",
                    "name": "_vars.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
                  "line": {
                    "start": 256,
                    "end": 266
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "alley-sizes",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 326,
              "end": 326
            },
            "context": {
              "type": "variable",
              "name": "alley-sizes",
              "value": "()",
              "scope": "default",
              "line": {
                "start": 327,
                "end": 327
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 283,
                    "end": 299
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 283,
                    "end": 299
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "breakpoints",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 378,
              "end": 378
            },
            "context": {
              "type": "variable",
              "name": "breakpoints",
              "value": "()",
              "scope": "default",
              "line": {
                "start": 379,
                "end": 379
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
                  "line": {
                    "start": 256,
                    "end": 266
                  }
                }
              },
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
                  "line": {
                    "start": 256,
                    "end": 266
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 347,
        "end": 347
      },
      "context": {
        "type": "mixin",
        "name": "col-width",
        "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
        "line": {
          "start": 348,
          "end": 374
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "min",
          "autofill": true,
          "item": {
            "description": "Includes <code>@content</code> on screens that are at least <code>$min-width</code> wide.\n",
            "commentRange": {
              "start": 30,
              "end": 31
            },
            "context": {
              "type": "mixin",
              "name": "min",
              "code": "@media (min-width: $min-width) {\n    @content;\n}\n",
              "line": {
                "start": 32,
                "end": 36
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "min-width"
              }
            ],
            "access": "public",
            "content": "",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
                  "line": {
                    "start": 256,
                    "end": 266
                  }
                }
              },
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
                  "line": {
                    "start": 256,
                    "end": 266
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unit-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
            "commentRange": {
              "start": 262,
              "end": 264
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unit-number",
              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 265,
                "end": 275
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 247,
                    "end": 249
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 250,
                      "end": 260
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 211,
                          "end": 212
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 213,
                            "end": 215
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 325,
                          "end": 327
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 328,
                            "end": 332
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 308,
                                "end": 318
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color-contrast",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 99,
                          "end": 118
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 325,
                    "end": 327
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 328,
                      "end": 332
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 308,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "variable",
                "name": "lengths",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 440,
                    "end": 440
                  },
                  "context": {
                    "type": "variable",
                    "name": "lengths",
                    "value": "join($lengths-absolute, $lengths-relative)",
                    "scope": "private",
                    "line": {
                      "start": 441,
                      "end": 441
                    }
                  },
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "file": {
                    "path": "_vars.scss",
                    "name": "_vars.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
                  "line": {
                    "start": 256,
                    "end": 266
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
            "commentRange": {
              "start": 277,
              "end": 279
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unitless-number",
              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
              "line": {
                "start": 280,
                "end": 290
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 247,
                    "end": 249
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 250,
                      "end": 260
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 211,
                          "end": 212
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 213,
                            "end": 215
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 325,
                          "end": 327
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 328,
                            "end": 332
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 308,
                                "end": 318
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color-contrast",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 99,
                          "end": 118
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 325,
                    "end": 327
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 328,
                      "end": 332
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 308,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-weight: var(--font-weight-heading);\nfont-size: var(--font-size-h#{$type});\nfont-family: var(--font-stack-heading);\nline-height: var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m: $margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n",
                  "line": {
                    "start": 195,
                    "end": 217
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
                  "line": {
                    "start": 283,
                    "end": 299
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "columns",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 390,
              "end": 390
            },
            "context": {
              "type": "variable",
              "name": "columns",
              "value": "()",
              "scope": "default",
              "line": {
                "start": 391,
                "end": 391
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "breakpoints",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 378,
              "end": 378
            },
            "context": {
              "type": "variable",
              "name": "breakpoints",
              "value": "()",
              "scope": "default",
              "line": {
                "start": 379,
                "end": 379
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
                  "line": {
                    "start": 256,
                    "end": 266
                  }
                }
              },
              {
                "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
                  "line": {
                    "start": 256,
                    "end": 266
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
                  "line": {
                    "start": 323,
                    "end": 345
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 348,
                    "end": 374
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Utility to clear floats\n",
      "commentRange": {
        "start": 376,
        "end": 376
      },
      "context": {
        "type": "mixin",
        "name": "clearfix",
        "code": "&:before,\n&:after {\n    display: table;\n    clear: both;\n    width: 100%;\n    content: '';\n}\n",
        "line": {
          "start": 377,
          "end": 385
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 387,
        "end": 387
      },
      "context": {
        "type": "mixin",
        "name": "figcaption",
        "code": "padding-top: space(0.375);\ncolor: var(--color-contrast-medium);\ntext-align: center;\nfont-size: var(--font-size-xsmall);\n",
        "line": {
          "start": 388,
          "end": 393
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "space",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 341,
              "end": 341
            },
            "context": {
              "type": "function",
              "name": "space",
              "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
              "line": {
                "start": 342,
                "end": 346
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "multiplier"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-unitless-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                  "commentRange": {
                    "start": 232,
                    "end": 234
                  },
                  "context": {
                    "type": "function",
                    "name": "is-unitless-number",
                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 235,
                      "end": 245
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    },
                    {
                      "type": "<bool>",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 211,
                          "end": 212
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 213,
                            "end": 215
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 143,
                                "end": 169
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 325,
                          "end": 327
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 328,
                            "end": 332
                          }
                        },
                        "parameter": [
                          {
                            "type": "<any>",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 220,
                                "end": 230
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 235,
                                "end": 245
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 250,
                                "end": 260
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 265,
                                "end": 275
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 280,
                                "end": 290
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 308,
                                "end": 318
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "function",
                        "name": "space",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                        "line": {
                          "start": 342,
                          "end": 346
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "function",
                        "name": "alley",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                        "line": {
                          "start": 349,
                          "end": 353
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "mgbch",
                        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                        "line": {
                          "start": 270,
                          "end": 279
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
                  "line": {
                    "start": 138,
                    "end": 191
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 270,
                    "end": 279
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 270,
                    "end": 279
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "figcaption",
                  "code": "padding-top: space(0.375);\ncolor: var(--color-contrast-medium);\ntext-align: center;\nfont-size: var(--font-size-xsmall);\n",
                  "line": {
                    "start": 388,
                    "end": 393
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Unsets border radius\n",
      "commentRange": {
        "start": 395,
        "end": 395
      },
      "context": {
        "type": "mixin",
        "name": "sq",
        "code": "border-radius: unset;\n",
        "line": {
          "start": 396,
          "end": 398
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 400,
        "end": 400
      },
      "context": {
        "type": "mixin",
        "name": "ellipsis",
        "code": "overflow: hidden;\ntext-overflow: ellipsis;\nwhite-space: nowrap;\n",
        "line": {
          "start": 401,
          "end": 405
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "button-styles",
            "code": "@include ellipsis();\n\ndisplay: inline-block;\npadding: var(--padding-button);\nmin-height: calc(2.25em + (var(--border-size) * 2));\nborder: none;\nborder-radius: 0.25rem;\nbackground-color: var(--color-contrast);\ncolor: var(--color-background);\ncursor: pointer;\ntransition: box-shadow 0.25s, color 0.25s;\n\n&[disabled] {\n    cursor: not-allowed;\n    box-shadow: inset 0 0 0 100vh rgba(white, 0.375);\n\n    &:hover {\n        box-shadow: inset 0 0 0 100vh rgba(white, 0.375);\n    }\n}\n\n&:hover {\n    box-shadow: inset 0 0 0 100vh rgba(black, 0.125);\n}\n\n&:focus {\n    outline: none;\n    box-shadow: 0 0 0.25rem 0 $color-outline;\n}\n",
            "line": {
              "start": 4,
              "end": 34
            }
          }
        }
      ]
    }
  ],
  "functions": [
    {
      "description": "Joins <code>$list</code> items into a <code>$glue</code> separated string and uses an optional <code>$closer</code> before the final item.\n",
      "commentRange": {
        "start": 6,
        "end": 10
      },
      "context": {
        "type": "function",
        "name": "list-to-string",
        "code": "$output: null;\n$last-item: null;\n$last-item-quoted: false;\n\n@if type-of($list) != list {\n    @error '`#{$list}` is not a valid list.';\n}\n\n@for $i from 1 through length($list) {\n    $item: nth($list, $i);\n\n    @if type-of($item) == list {\n        @if $i == length($list) {\n            $last-item: nth($item, -1);\n            $is-nested-list: type-of($last-item) == list;\n\n            @while $is-nested-list {\n                $last-item: nth($last-item, -1);\n\n                @if type-of($last-item) != list {\n                    $is-nested-list: false;\n                    $last-item-quoted: type-of($last-item) ==\n                        string and\n                        $quote-strings;\n                }\n            }\n\n            $output: #{$output}#{list-to-string(\n                    $item,\n                    $glue,\n                    null,\n                    $quote-strings\n                )};\n        } @else {\n            $output: #{$output}#{list-to-string(\n                    $item,\n                    $glue,\n                    null,\n                    $quote-strings\n                )}#{$glue};\n        }\n    } @else {\n        $item: if(\n            type-of($item) == string and $quote-strings,\n            '\"#{$item}\"',\n            $item\n        );\n\n        @if $i == length($list) {\n            $last-item: $item;\n            $last-item-quoted: type-of($last-item) ==\n                string and\n                $quote-strings;\n\n            $output: #{$output}#{$item};\n        } @else {\n            $output: #{$output}#{$item}#{$glue};\n        }\n    }\n}\n\n@if $closer != null {\n    $offset: if($last-item-quoted, 2, 0);\n    $find: #{$glue}#{$last-item};\n    $slice-1: str-slice($output, 1, -(str-length(#{$find}) + 1 + $offset));\n    $slice-2: str-slice($output, -(str-length(#{$last-item}) + $offset));\n    $output: #{$slice-1}#{$closer}#{$slice-2};\n}\n\n@return $output;\n",
        "line": {
          "start": 11,
          "end": 87
        }
      },
      "parameter": [
        {
          "type": "<list>",
          "name": "list"
        },
        {
          "type": "<any>",
          "name": "glue",
          "default": "''"
        },
        {
          "type": "<any>",
          "name": "closer",
          "default": "null"
        },
        {
          "type": "<bool>",
          "name": "quote-strings",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "throw": [
        "`#{$list}` is not a valid list."
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Returns a formatted string of valid <code>$values</code>.\n",
          "context": {
            "type": "function",
            "name": "format-valid-values",
            "code": "@return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n",
            "line": {
              "start": 337,
              "end": 339
            }
          }
        }
      ]
    },
    {
      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
      "commentRange": {
        "start": 94,
        "end": 98
      },
      "context": {
        "type": "function",
        "name": "auto-color-contrast",
        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
        "line": {
          "start": 99,
          "end": 118
        }
      },
      "parameter": [
        {
          "type": "<color>",
          "name": "bg-color"
        },
        {
          "type": "<number>",
          "name": "threshold",
          "default": "60"
        },
        {
          "type": "<color>",
          "name": "dark",
          "default": "black"
        },
        {
          "type": "<color>",
          "name": "light",
          "default": "white"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-nonneg-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
            "commentRange": {
              "start": 247,
              "end": 249
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-number",
              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 250,
                "end": 260
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 211,
                    "end": 212
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 213,
                      "end": 215
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 325,
                    "end": 327
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 328,
                      "end": 332
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 308,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                "context": {
                  "type": "function",
                  "name": "auto-color-contrast",
                  "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                  "line": {
                    "start": 99,
                    "end": 118
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 265,
                    "end": 275
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 280,
                    "end": 290
                  }
                }
              }
            ]
          }
        }
      ],
      "throw": [
        "`#{$bg-color}` is not a valid color.",
        "`#{$threshold}` is not a nonnegative number."
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Ceils <code>$number</code> to given decimal <code>$places</code>.\n",
      "commentRange": {
        "start": 125,
        "end": 127
      },
      "context": {
        "type": "function",
        "name": "decimal-ceil",
        "code": "@return decimal-round($number, $places, ceil);\n",
        "line": {
          "start": 128,
          "end": 130
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "number"
        },
        {
          "type": "<number>",
          "name": "places"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "decimal-round",
          "autofill": true,
          "item": {
            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
            "commentRange": {
              "start": 139,
              "end": 142
            },
            "context": {
              "type": "function",
              "name": "decimal-round",
              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
              "line": {
                "start": 143,
                "end": 169
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "number"
              },
              {
                "type": "<number>",
                "name": "places"
              },
              {
                "type": "<any> (round, ceil, floor)",
                "name": "mode",
                "default": "round"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 211,
                    "end": 212
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 213,
                      "end": 215
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Ceils <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-ceil",
                  "code": "@return decimal-round($number, $places, ceil);\n",
                  "line": {
                    "start": 128,
                    "end": 130
                  }
                }
              },
              {
                "description": "Floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-floor",
                  "code": "@return decimal-round($number, $places, floor);\n",
                  "line": {
                    "start": 135,
                    "end": 137
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Floors <code>$number</code> to given decimal <code>$places</code>.\n",
      "commentRange": {
        "start": 132,
        "end": 134
      },
      "context": {
        "type": "function",
        "name": "decimal-floor",
        "code": "@return decimal-round($number, $places, floor);\n",
        "line": {
          "start": 135,
          "end": 137
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "number"
        },
        {
          "type": "<number>",
          "name": "places"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "decimal-round",
          "autofill": true,
          "item": {
            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
            "commentRange": {
              "start": 139,
              "end": 142
            },
            "context": {
              "type": "function",
              "name": "decimal-round",
              "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
              "line": {
                "start": 143,
                "end": 169
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "number"
              },
              {
                "type": "<number>",
                "name": "places"
              },
              {
                "type": "<any> (round, ceil, floor)",
                "name": "mode",
                "default": "round"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 211,
                    "end": 212
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 213,
                      "end": 215
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Ceils <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-ceil",
                  "code": "@return decimal-round($number, $places, ceil);\n",
                  "line": {
                    "start": 128,
                    "end": 130
                  }
                }
              },
              {
                "description": "Floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-floor",
                  "code": "@return decimal-round($number, $places, floor);\n",
                  "line": {
                    "start": 135,
                    "end": 137
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
      "commentRange": {
        "start": 139,
        "end": 142
      },
      "context": {
        "type": "function",
        "name": "decimal-round",
        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
        "line": {
          "start": 143,
          "end": 169
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "number"
        },
        {
          "type": "<number>",
          "name": "places"
        },
        {
          "type": "<any> (round, ceil, floor)",
          "name": "mode",
          "default": "round"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a number.\n",
            "commentRange": {
              "start": 211,
              "end": 212
            },
            "context": {
              "type": "function",
              "name": "is-number",
              "code": "@return type-of($value) == number;\n",
              "line": {
                "start": 213,
                "end": 215
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 143,
                    "end": 169
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 143,
                    "end": 169
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 235,
                    "end": 245
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 250,
                    "end": 260
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Ceils <code>$number</code> to given decimal <code>$places</code>.\n",
          "context": {
            "type": "function",
            "name": "decimal-ceil",
            "code": "@return decimal-round($number, $places, ceil);\n",
            "line": {
              "start": 128,
              "end": 130
            }
          }
        },
        {
          "description": "Floors <code>$number</code> to given decimal <code>$places</code>.\n",
          "context": {
            "type": "function",
            "name": "decimal-floor",
            "code": "@return decimal-round($number, $places, floor);\n",
            "line": {
              "start": 135,
              "end": 137
            }
          }
        }
      ]
    },
    {
      "description": "Removes the unit from <code>$number</code>.\n",
      "commentRange": {
        "start": 171,
        "end": 172
      },
      "context": {
        "type": "function",
        "name": "strip-unit",
        "code": "@if type-of($number) == 'number' and not unitless($number) {\n    @return $number / ($number * 0 + 1);\n}\n\n@return $number;\n",
        "line": {
          "start": 173,
          "end": 179
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "number"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Converts <code>$size-in-rem</code> to pixels based on <code>$font-size-base</code>.\n",
          "context": {
            "type": "function",
            "name": "rem-to-pixels",
            "code": "@return strip-unit($size-in-rem) * $font-size-base;\n",
            "line": {
              "start": 184,
              "end": 186
            }
          }
        }
      ]
    },
    {
      "description": "Converts <code>$size-in-rem</code> to pixels based on <code>$font-size-base</code>.\n",
      "commentRange": {
        "start": 181,
        "end": 183
      },
      "context": {
        "type": "function",
        "name": "rem-to-pixels",
        "code": "@return strip-unit($size-in-rem) * $font-size-base;\n",
        "line": {
          "start": 184,
          "end": 186
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "size-in-rem"
        },
        {
          "type": "<number>",
          "name": "font-size-base"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "strip-unit",
          "autofill": true,
          "item": {
            "description": "Removes the unit from <code>$number</code>.\n",
            "commentRange": {
              "start": 171,
              "end": 172
            },
            "context": {
              "type": "function",
              "name": "strip-unit",
              "code": "@if type-of($number) == 'number' and not unitless($number) {\n    @return $number / ($number * 0 + 1);\n}\n\n@return $number;\n",
              "line": {
                "start": 173,
                "end": 179
              }
            },
            "parameter": [
              {
                "type": "<number>",
                "name": "number"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Converts <code>$size-in-rem</code> to pixels based on <code>$font-size-base</code>.\n",
                "context": {
                  "type": "function",
                  "name": "rem-to-pixels",
                  "code": "@return strip-unit($size-in-rem) * $font-size-base;\n",
                  "line": {
                    "start": 184,
                    "end": 186
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "font-size-base",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 29,
              "end": 29
            },
            "context": {
              "type": "variable",
              "name": "font-size-base",
              "value": "16px",
              "scope": "default",
              "line": {
                "start": 30,
                "end": 30
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "Converts <code>$size-in-rem</code> to pixels based on <code>$font-size-base</code>.\n",
                "context": {
                  "type": "function",
                  "name": "rem-to-pixels",
                  "code": "@return strip-unit($size-in-rem) * $font-size-base;\n",
                  "line": {
                    "start": 184,
                    "end": 186
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a boolean.\n",
      "commentRange": {
        "start": 193,
        "end": 194
      },
      "context": {
        "type": "function",
        "name": "is-bool",
        "code": "@return type-of($value) == bool;\n",
        "line": {
          "start": 195,
          "end": 197
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a color.\n",
      "commentRange": {
        "start": 199,
        "end": 200
      },
      "context": {
        "type": "function",
        "name": "is-color",
        "code": "@return type-of($value) == color;\n",
        "line": {
          "start": 201,
          "end": 203
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a string.\n",
      "commentRange": {
        "start": 205,
        "end": 206
      },
      "context": {
        "type": "function",
        "name": "is-string",
        "code": "@return type-of($value) == string;\n",
        "line": {
          "start": 207,
          "end": 209
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a number.\n",
      "commentRange": {
        "start": 211,
        "end": 212
      },
      "context": {
        "type": "function",
        "name": "is-number",
        "code": "@return type-of($value) == number;\n",
        "line": {
          "start": 213,
          "end": 215
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
          "context": {
            "type": "function",
            "name": "decimal-round",
            "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
            "line": {
              "start": 143,
              "end": 169
            }
          }
        },
        {
          "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
          "context": {
            "type": "function",
            "name": "decimal-round",
            "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
            "line": {
              "start": 143,
              "end": 169
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-unit-number",
            "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 220,
              "end": 230
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a unitless number.\n",
          "context": {
            "type": "function",
            "name": "is-unitless-number",
            "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 235,
              "end": 245
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative number.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-number",
            "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 250,
              "end": 260
            }
          }
        }
      ]
    },
    {
      "description": "Checks if <code>$value</code> is a number with a unit.\n",
      "commentRange": {
        "start": 217,
        "end": 219
      },
      "context": {
        "type": "function",
        "name": "is-unit-number",
        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
        "line": {
          "start": 220,
          "end": 230
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        },
        {
          "type": "<bool>",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a number.\n",
            "commentRange": {
              "start": 211,
              "end": 212
            },
            "context": {
              "type": "function",
              "name": "is-number",
              "code": "@return type-of($value) == number;\n",
              "line": {
                "start": 213,
                "end": 215
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 143,
                    "end": 169
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 143,
                    "end": 169
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 235,
                    "end": 245
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 250,
                    "end": 260
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 325,
              "end": 327
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 328,
                "end": 332
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 235,
                    "end": 245
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 250,
                    "end": 260
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 265,
                    "end": 275
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 280,
                    "end": 290
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 308,
                    "end": 318
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "lengths",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 440,
              "end": 440
            },
            "context": {
              "type": "variable",
              "name": "lengths",
              "value": "join($lengths-absolute, $lengths-relative)",
              "scope": "private",
              "line": {
                "start": 441,
                "end": 441
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 265,
                    "end": 275
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a unitless number.\n",
      "commentRange": {
        "start": 232,
        "end": 234
      },
      "context": {
        "type": "function",
        "name": "is-unitless-number",
        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
        "line": {
          "start": 235,
          "end": 245
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        },
        {
          "type": "<bool>",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a number.\n",
            "commentRange": {
              "start": 211,
              "end": 212
            },
            "context": {
              "type": "function",
              "name": "is-number",
              "code": "@return type-of($value) == number;\n",
              "line": {
                "start": 213,
                "end": 215
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 143,
                    "end": 169
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 143,
                    "end": 169
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 235,
                    "end": 245
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 250,
                    "end": 260
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 325,
              "end": 327
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 328,
                "end": 332
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 235,
                    "end": 245
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 250,
                    "end": 260
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 265,
                    "end": 275
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 280,
                    "end": 290
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 308,
                    "end": 318
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "function",
            "name": "space",
            "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
            "line": {
              "start": 342,
              "end": 346
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "function",
            "name": "alley",
            "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
            "line": {
              "start": 349,
              "end": 353
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "mgbch",
            "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
            "line": {
              "start": 270,
              "end": 279
            }
          }
        }
      ]
    },
    {
      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
      "commentRange": {
        "start": 247,
        "end": 249
      },
      "context": {
        "type": "function",
        "name": "is-nonneg-number",
        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
        "line": {
          "start": 250,
          "end": 260
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        },
        {
          "type": "<bool>",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a number.\n",
            "commentRange": {
              "start": 211,
              "end": 212
            },
            "context": {
              "type": "function",
              "name": "is-number",
              "code": "@return type-of($value) == number;\n",
              "line": {
                "start": 213,
                "end": 215
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 143,
                    "end": 169
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 143,
                    "end": 169
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 235,
                    "end": 245
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 250,
                    "end": 260
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 325,
              "end": 327
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 328,
                "end": 332
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 235,
                    "end": 245
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 250,
                    "end": 260
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 265,
                    "end": 275
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 280,
                    "end": 290
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 308,
                    "end": 318
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
          "context": {
            "type": "function",
            "name": "auto-color-contrast",
            "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
            "line": {
              "start": 99,
              "end": 118
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-unit-number",
            "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 265,
              "end": 275
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-unitless-number",
            "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
            "line": {
              "start": 280,
              "end": 290
            }
          }
        }
      ]
    },
    {
      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
      "commentRange": {
        "start": 262,
        "end": 264
      },
      "context": {
        "type": "function",
        "name": "is-nonneg-unit-number",
        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
        "line": {
          "start": 265,
          "end": 275
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        },
        {
          "type": "<bool>",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-nonneg-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
            "commentRange": {
              "start": 247,
              "end": 249
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-number",
              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 250,
                "end": 260
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 211,
                    "end": 212
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 213,
                      "end": 215
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 325,
                    "end": 327
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 328,
                      "end": 332
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 308,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                "context": {
                  "type": "function",
                  "name": "auto-color-contrast",
                  "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                  "line": {
                    "start": 99,
                    "end": 118
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 265,
                    "end": 275
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 280,
                    "end": 290
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 325,
              "end": 327
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 328,
                "end": 332
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 235,
                    "end": 245
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 250,
                    "end": 260
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 265,
                    "end": 275
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 280,
                    "end": 290
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 308,
                    "end": 318
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "lengths",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 440,
              "end": 440
            },
            "context": {
              "type": "variable",
              "name": "lengths",
              "value": "join($lengths-absolute, $lengths-relative)",
              "scope": "private",
              "line": {
                "start": 441,
                "end": 441
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 265,
                    "end": 275
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
          "context": {
            "type": "mixin",
            "name": "hide",
            "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
            "line": {
              "start": 256,
              "end": 266
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 323,
              "end": 345
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 348,
              "end": 374
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 348,
              "end": 374
            }
          }
        }
      ]
    },
    {
      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
      "commentRange": {
        "start": 277,
        "end": 279
      },
      "context": {
        "type": "function",
        "name": "is-nonneg-unitless-number",
        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
        "line": {
          "start": 280,
          "end": 290
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        },
        {
          "type": "<bool>",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-nonneg-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
            "commentRange": {
              "start": 247,
              "end": 249
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-number",
              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 250,
                "end": 260
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 211,
                    "end": 212
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 213,
                      "end": 215
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 325,
                    "end": 327
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 328,
                      "end": 332
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 308,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                "context": {
                  "type": "function",
                  "name": "auto-color-contrast",
                  "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                  "line": {
                    "start": 99,
                    "end": 118
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 265,
                    "end": 275
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 280,
                    "end": 290
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 325,
              "end": 327
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 328,
                "end": 332
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 235,
                    "end": 245
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 250,
                    "end": 260
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 265,
                    "end": 275
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 280,
                    "end": 290
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 308,
                    "end": 318
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
            "line": {
              "start": 138,
              "end": 191
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "h",
            "code": "font-weight: var(--font-weight-heading);\nfont-size: var(--font-size-h#{$type});\nfont-family: var(--font-stack-heading);\nline-height: var(--line-height-h#{$type});\n\n@if is-nonneg-unitless-number($margins-multiplier) {\n    $m: $margins-multiplier;\n\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n",
            "line": {
              "start": 195,
              "end": 217
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 283,
              "end": 299
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 323,
              "end": 345
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 348,
              "end": 374
            }
          }
        }
      ]
    },
    {
      "description": "Checks if <code>$value</code> is a map.\n",
      "commentRange": {
        "start": 292,
        "end": 293
      },
      "context": {
        "type": "function",
        "name": "is-map",
        "code": "@return type-of($value) == map;\n",
        "line": {
          "start": 294,
          "end": 296
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a list.\n",
      "commentRange": {
        "start": 298,
        "end": 299
      },
      "context": {
        "type": "function",
        "name": "is-list",
        "code": "@return type-of($value) == list;\n",
        "line": {
          "start": 300,
          "end": 302
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
      "commentRange": {
        "start": 304,
        "end": 307
      },
      "context": {
        "type": "function",
        "name": "is-in-list",
        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
        "line": {
          "start": 308,
          "end": 318
        }
      },
      "parameter": [
        {
          "type": "<any>|number",
          "name": "needle"
        },
        {
          "type": "<list>",
          "name": "haystack"
        },
        {
          "type": "<bool>",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 325,
              "end": 327
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 328,
                "end": 332
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 235,
                    "end": 245
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 250,
                    "end": 260
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 265,
                    "end": 275
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 280,
                    "end": 290
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 308,
                    "end": 318
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "format-valid-values",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string of valid <code>$values</code>.\n",
            "commentRange": {
              "start": 334,
              "end": 336
            },
            "context": {
              "type": "function",
              "name": "format-valid-values",
              "code": "@return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n",
              "line": {
                "start": 337,
                "end": 339
              }
            },
            "parameter": [
              {
                "type": "<list>",
                "name": "values"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "list-to-string",
                "autofill": true,
                "item": {
                  "description": "Joins <code>$list</code> items into a <code>$glue</code> separated string and uses an optional <code>$closer</code> before the final item.\n",
                  "commentRange": {
                    "start": 6,
                    "end": 10
                  },
                  "context": {
                    "type": "function",
                    "name": "list-to-string",
                    "code": "$output: null;\n$last-item: null;\n$last-item-quoted: false;\n\n@if type-of($list) != list {\n    @error '`#{$list}` is not a valid list.';\n}\n\n@for $i from 1 through length($list) {\n    $item: nth($list, $i);\n\n    @if type-of($item) == list {\n        @if $i == length($list) {\n            $last-item: nth($item, -1);\n            $is-nested-list: type-of($last-item) == list;\n\n            @while $is-nested-list {\n                $last-item: nth($last-item, -1);\n\n                @if type-of($last-item) != list {\n                    $is-nested-list: false;\n                    $last-item-quoted: type-of($last-item) ==\n                        string and\n                        $quote-strings;\n                }\n            }\n\n            $output: #{$output}#{list-to-string(\n                    $item,\n                    $glue,\n                    null,\n                    $quote-strings\n                )};\n        } @else {\n            $output: #{$output}#{list-to-string(\n                    $item,\n                    $glue,\n                    null,\n                    $quote-strings\n                )}#{$glue};\n        }\n    } @else {\n        $item: if(\n            type-of($item) == string and $quote-strings,\n            '\"#{$item}\"',\n            $item\n        );\n\n        @if $i == length($list) {\n            $last-item: $item;\n            $last-item-quoted: type-of($last-item) ==\n                string and\n                $quote-strings;\n\n            $output: #{$output}#{$item};\n        } @else {\n            $output: #{$output}#{$item}#{$glue};\n        }\n    }\n}\n\n@if $closer != null {\n    $offset: if($last-item-quoted, 2, 0);\n    $find: #{$glue}#{$last-item};\n    $slice-1: str-slice($output, 1, -(str-length(#{$find}) + 1 + $offset));\n    $slice-2: str-slice($output, -(str-length(#{$last-item}) + $offset));\n    $output: #{$slice-1}#{$closer}#{$slice-2};\n}\n\n@return $output;\n",
                    "line": {
                      "start": 11,
                      "end": 87
                    }
                  },
                  "parameter": [
                    {
                      "type": "<list>",
                      "name": "list"
                    },
                    {
                      "type": "<any>",
                      "name": "glue",
                      "default": "''"
                    },
                    {
                      "type": "<any>",
                      "name": "closer",
                      "default": "null"
                    },
                    {
                      "type": "<bool>",
                      "name": "quote-strings",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "throw": [
                    "`#{$list}` is not a valid list."
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Returns a formatted string of valid <code>$values</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "format-valid-values",
                        "code": "@return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n",
                        "line": {
                          "start": 337,
                          "end": 339
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 308,
                    "end": 318
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
      "commentRange": {
        "start": 325,
        "end": 327
      },
      "context": {
        "type": "function",
        "name": "show-param-value",
        "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
        "line": {
          "start": 328,
          "end": 332
        }
      },
      "parameter": [
        {
          "type": "<any>",
          "name": "value"
        }
      ],
      "access": "private",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Checks if <code>$value</code> is a number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-unit-number",
            "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 220,
              "end": 230
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a unitless number.\n",
          "context": {
            "type": "function",
            "name": "is-unitless-number",
            "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 235,
              "end": 245
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative number.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-number",
            "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 250,
              "end": 260
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-unit-number",
            "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 265,
              "end": 275
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-unitless-number",
            "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
            "line": {
              "start": 280,
              "end": 290
            }
          }
        },
        {
          "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
          "context": {
            "type": "function",
            "name": "is-in-list",
            "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
            "line": {
              "start": 308,
              "end": 318
            }
          }
        }
      ]
    },
    {
      "description": "Returns a formatted string of valid <code>$values</code>.\n",
      "commentRange": {
        "start": 334,
        "end": 336
      },
      "context": {
        "type": "function",
        "name": "format-valid-values",
        "code": "@return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n",
        "line": {
          "start": 337,
          "end": 339
        }
      },
      "parameter": [
        {
          "type": "<list>",
          "name": "values"
        }
      ],
      "access": "private",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "list-to-string",
          "autofill": true,
          "item": {
            "description": "Joins <code>$list</code> items into a <code>$glue</code> separated string and uses an optional <code>$closer</code> before the final item.\n",
            "commentRange": {
              "start": 6,
              "end": 10
            },
            "context": {
              "type": "function",
              "name": "list-to-string",
              "code": "$output: null;\n$last-item: null;\n$last-item-quoted: false;\n\n@if type-of($list) != list {\n    @error '`#{$list}` is not a valid list.';\n}\n\n@for $i from 1 through length($list) {\n    $item: nth($list, $i);\n\n    @if type-of($item) == list {\n        @if $i == length($list) {\n            $last-item: nth($item, -1);\n            $is-nested-list: type-of($last-item) == list;\n\n            @while $is-nested-list {\n                $last-item: nth($last-item, -1);\n\n                @if type-of($last-item) != list {\n                    $is-nested-list: false;\n                    $last-item-quoted: type-of($last-item) ==\n                        string and\n                        $quote-strings;\n                }\n            }\n\n            $output: #{$output}#{list-to-string(\n                    $item,\n                    $glue,\n                    null,\n                    $quote-strings\n                )};\n        } @else {\n            $output: #{$output}#{list-to-string(\n                    $item,\n                    $glue,\n                    null,\n                    $quote-strings\n                )}#{$glue};\n        }\n    } @else {\n        $item: if(\n            type-of($item) == string and $quote-strings,\n            '\"#{$item}\"',\n            $item\n        );\n\n        @if $i == length($list) {\n            $last-item: $item;\n            $last-item-quoted: type-of($last-item) ==\n                string and\n                $quote-strings;\n\n            $output: #{$output}#{$item};\n        } @else {\n            $output: #{$output}#{$item}#{$glue};\n        }\n    }\n}\n\n@if $closer != null {\n    $offset: if($last-item-quoted, 2, 0);\n    $find: #{$glue}#{$last-item};\n    $slice-1: str-slice($output, 1, -(str-length(#{$find}) + 1 + $offset));\n    $slice-2: str-slice($output, -(str-length(#{$last-item}) + $offset));\n    $output: #{$slice-1}#{$closer}#{$slice-2};\n}\n\n@return $output;\n",
              "line": {
                "start": 11,
                "end": 87
              }
            },
            "parameter": [
              {
                "type": "<list>",
                "name": "list"
              },
              {
                "type": "<any>",
                "name": "glue",
                "default": "''"
              },
              {
                "type": "<any>",
                "name": "closer",
                "default": "null"
              },
              {
                "type": "<bool>",
                "name": "quote-strings",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "throw": [
              "`#{$list}` is not a valid list."
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Returns a formatted string of valid <code>$values</code>.\n",
                "context": {
                  "type": "function",
                  "name": "format-valid-values",
                  "code": "@return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n",
                  "line": {
                    "start": 337,
                    "end": 339
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
          "context": {
            "type": "function",
            "name": "is-in-list",
            "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
            "line": {
              "start": 308,
              "end": 318
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 341,
        "end": 341
      },
      "context": {
        "type": "function",
        "name": "space",
        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
        "line": {
          "start": 342,
          "end": 346
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "multiplier"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a unitless number.\n",
            "commentRange": {
              "start": 232,
              "end": 234
            },
            "context": {
              "type": "function",
              "name": "is-unitless-number",
              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 235,
                "end": 245
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 211,
                    "end": 212
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 213,
                      "end": 215
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 325,
                    "end": 327
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 328,
                      "end": 332
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 308,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "function",
                  "name": "space",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                  "line": {
                    "start": 342,
                    "end": 346
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "function",
                  "name": "alley",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                  "line": {
                    "start": 349,
                    "end": 353
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 270,
                    "end": 279
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
            "line": {
              "start": 138,
              "end": 191
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
            "line": {
              "start": 138,
              "end": 191
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
            "line": {
              "start": 138,
              "end": 191
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
            "line": {
              "start": 138,
              "end": 191
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
            "line": {
              "start": 138,
              "end": 191
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
            "line": {
              "start": 138,
              "end": 191
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
            "line": {
              "start": 138,
              "end": 191
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$m: if(is-nonneg-unitless-number($multiplier), $multiplier, false);\n\nhr {\n    margin-top: if($m, space($m), space());\n    margin-bottom: if($m, space($m), space());\n}\n\ncaption {\n    margin-bottom: if(\n        $m,\n        calc(#{space($m)} * 0.25),\n        calc(#{space()} * 0.25)\n    );\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top: if(\n        $m,\n        calc(var(--space-top-h) * #{$m}),\n        var(--space-top-h)\n    );\n    margin-bottom: if(\n        $m,\n        calc(var(--space-bottom-h) * #{$m}),\n        var(--space-bottom-h)\n    );\n}\n\naddress,\nblockquote,\ncanvas,\ndl,\nfieldset,\nfigure,\nform,\nhr,\nnoscript,\nol,\np,\npre,\ntable,\nul,\nvideo {\n    margin-bottom: if($m, space($m), space());\n}\n",
            "line": {
              "start": 138,
              "end": 191
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "mgbch",
            "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
            "line": {
              "start": 270,
              "end": 279
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "mgbch",
            "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
            "line": {
              "start": 270,
              "end": 279
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "figcaption",
            "code": "padding-top: space(0.375);\ncolor: var(--color-contrast-medium);\ntext-align: center;\nfont-size: var(--font-size-xsmall);\n",
            "line": {
              "start": 388,
              "end": 393
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 348,
        "end": 348
      },
      "context": {
        "type": "function",
        "name": "alley",
        "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
        "line": {
          "start": 349,
          "end": 353
        }
      },
      "parameter": [
        {
          "type": "<number>",
          "name": "multiplier"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a unitless number.\n",
            "commentRange": {
              "start": 232,
              "end": 234
            },
            "context": {
              "type": "function",
              "name": "is-unitless-number",
              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 235,
                "end": 245
              }
            },
            "parameter": [
              {
                "type": "<any>",
                "name": "value"
              },
              {
                "type": "<bool>",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 211,
                    "end": 212
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 213,
                      "end": 215
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n: 1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n: $n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 143,
                          "end": 169
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 325,
                    "end": 327
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value: if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 328,
                      "end": 332
                    }
                  },
                  "parameter": [
                    {
                      "type": "<any>",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 220,
                          "end": 230
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 235,
                          "end": 245
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 250,
                          "end": 260
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 265,
                          "end": 275
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 280,
                          "end": 290
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 308,
                          "end": 318
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "function",
                  "name": "space",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--space) * #{$m}), var(--space));\n",
                  "line": {
                    "start": 342,
                    "end": 346
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "function",
                  "name": "alley",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n\n@return if($m != 1, calc(var(--alley) * #{$m}), var(--alley));\n",
                  "line": {
                    "start": 349,
                    "end": 353
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch",
                  "code": "$m: if(is-unitless-number($multiplier), $multiplier, 1);\n$i: if($important == true, $important, false);\n\nmargin-top: space(-$m) if($i, !important, null);\n\n> * {\n    margin-top: space($m) if($i, !important, null);\n}\n",
                  "line": {
                    "start": 270,
                    "end": 279
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 283,
              "end": 299
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 283,
              "end": 299
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 283,
              "end": 299
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 283,
              "end": 299
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 283,
              "end": 299
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 283,
              "end": 299
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 283,
              "end": 299
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 283,
              "end": 299
            }
          }
        }
      ]
    }
  ],
  "variables": [
    {
      "description": "",
      "commentRange": {
        "start": 6,
        "end": 6
      },
      "context": {
        "type": "variable",
        "name": "font-stack-serif",
        "value": "Constantia, 'Lucida Bright', Lucidabright, Georgia, serif",
        "scope": "default",
        "line": {
          "start": 7,
          "end": 7
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 8,
        "end": 8
      },
      "context": {
        "type": "variable",
        "name": "font-stack-sansserif",
        "value": "Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif",
        "scope": "default",
        "line": {
          "start": 9,
          "end": 9
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 10,
        "end": 10
      },
      "context": {
        "type": "variable",
        "name": "font-stack-general",
        "value": "$font-stack-sansserif",
        "scope": "default",
        "line": {
          "start": 11,
          "end": 11
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 12,
        "end": 12
      },
      "context": {
        "type": "variable",
        "name": "font-stack-heading",
        "value": "$font-stack-general",
        "scope": "default",
        "line": {
          "start": 13,
          "end": 13
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 14,
        "end": 14
      },
      "context": {
        "type": "variable",
        "name": "font-stack-monospace",
        "value": "Consolas, 'Lucida Console', 'Courier New', monospace",
        "scope": "default",
        "line": {
          "start": 15,
          "end": 15
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 16,
        "end": 16
      },
      "context": {
        "type": "variable",
        "name": "font-stacks",
        "value": "()",
        "scope": "default",
        "line": {
          "start": 17,
          "end": 17
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 18,
        "end": 18
      },
      "context": {
        "type": "variable",
        "name": "font-stacks",
        "value": "map-merge(\n    (\n        serif: $font-stack-serif,\n        sansserif: $font-stack-sansserif,\n        general: $font-stack-general,\n        heading: $font-stack-heading,\n        monospace: $font-stack-monospace,\n    ),\n    $font-stacks\n)",
        "scope": "private",
        "line": {
          "start": 19,
          "end": 28
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 29,
        "end": 29
      },
      "context": {
        "type": "variable",
        "name": "font-size-base",
        "value": "16px",
        "scope": "default",
        "line": {
          "start": 30,
          "end": 30
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "Converts <code>$size-in-rem</code> to pixels based on <code>$font-size-base</code>.\n",
          "context": {
            "type": "function",
            "name": "rem-to-pixels",
            "code": "@return strip-unit($size-in-rem) * $font-size-base;\n",
            "line": {
              "start": 184,
              "end": 186
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 31,
        "end": 31
      },
      "context": {
        "type": "variable",
        "name": "font-size-general",
        "value": "1rem",
        "scope": "default",
        "line": {
          "start": 32,
          "end": 32
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 33,
        "end": 33
      },
      "context": {
        "type": "variable",
        "name": "font-size-big",
        "value": "1.125em",
        "scope": "default",
        "line": {
          "start": 34,
          "end": 34
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 35,
        "end": 35
      },
      "context": {
        "type": "variable",
        "name": "font-size-xbig",
        "value": "1.266em",
        "scope": "default",
        "line": {
          "start": 36,
          "end": 36
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 37,
        "end": 37
      },
      "context": {
        "type": "variable",
        "name": "font-size-xxbig",
        "value": "1.424em",
        "scope": "default",
        "line": {
          "start": 38,
          "end": 38
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 39,
        "end": 39
      },
      "context": {
        "type": "variable",
        "name": "font-size-small",
        "value": "0.889em",
        "scope": "default",
        "line": {
          "start": 40,
          "end": 40
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 41,
        "end": 41
      },
      "context": {
        "type": "variable",
        "name": "font-size-xsmall",
        "value": "0.79em",
        "scope": "default",
        "line": {
          "start": 42,
          "end": 42
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 43,
        "end": 43
      },
      "context": {
        "type": "variable",
        "name": "font-size-xxsmall",
        "value": "0.702em",
        "scope": "default",
        "line": {
          "start": 44,
          "end": 44
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 45,
        "end": 45
      },
      "context": {
        "type": "variable",
        "name": "font-size-h1",
        "value": "1.802em",
        "scope": "default",
        "line": {
          "start": 46,
          "end": 46
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 47,
        "end": 47
      },
      "context": {
        "type": "variable",
        "name": "font-size-h2",
        "value": "1.602em",
        "scope": "default",
        "line": {
          "start": 48,
          "end": 48
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 49,
        "end": 49
      },
      "context": {
        "type": "variable",
        "name": "font-size-h3",
        "value": "1.424em",
        "scope": "default",
        "line": {
          "start": 50,
          "end": 50
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 51,
        "end": 51
      },
      "context": {
        "type": "variable",
        "name": "font-size-h4",
        "value": "1.266em",
        "scope": "default",
        "line": {
          "start": 52,
          "end": 52
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 53,
        "end": 53
      },
      "context": {
        "type": "variable",
        "name": "font-size-h5",
        "value": "1.125em",
        "scope": "default",
        "line": {
          "start": 54,
          "end": 54
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 55,
        "end": 55
      },
      "context": {
        "type": "variable",
        "name": "font-sizes",
        "value": "()",
        "scope": "default",
        "line": {
          "start": 56,
          "end": 56
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 57,
        "end": 57
      },
      "context": {
        "type": "variable",
        "name": "font-sizes",
        "value": "map-merge(\n    (\n        base: $font-size-base,\n        general: $font-size-general,\n        big: $font-size-big,\n        xbig: $font-size-xbig,\n        xxbig: $font-size-xxbig,\n        small: $font-size-small,\n        xsmall: $font-size-xsmall,\n        xxsmall: $font-size-xxsmall,\n        h1: $font-size-h1,\n        h2: $font-size-h2,\n        h3: $font-size-h3,\n        h4: $font-size-h4,\n        h5: $font-size-h5,\n    ),\n    $font-sizes\n)",
        "scope": "private",
        "line": {
          "start": 58,
          "end": 75
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 76,
        "end": 76
      },
      "context": {
        "type": "variable",
        "name": "font-weight-normal",
        "value": "400",
        "scope": "default",
        "line": {
          "start": 77,
          "end": 77
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 78,
        "end": 78
      },
      "context": {
        "type": "variable",
        "name": "font-weight-bold",
        "value": "700",
        "scope": "default",
        "line": {
          "start": 79,
          "end": 79
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 80,
        "end": 80
      },
      "context": {
        "type": "variable",
        "name": "font-weight-heading",
        "value": "$font-weight-bold",
        "scope": "default",
        "line": {
          "start": 81,
          "end": 81
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 82,
        "end": 82
      },
      "context": {
        "type": "variable",
        "name": "font-weights",
        "value": "()",
        "scope": "default",
        "line": {
          "start": 83,
          "end": 83
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 84,
        "end": 84
      },
      "context": {
        "type": "variable",
        "name": "font-weights",
        "value": "map-merge(\n    (\n        normal: $font-weight-normal,\n        bold: $font-weight-bold,\n        heading: $font-weight-heading,\n    ),\n    $font-weights\n)",
        "scope": "private",
        "line": {
          "start": 85,
          "end": 92
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 93,
        "end": 93
      },
      "context": {
        "type": "variable",
        "name": "line-height-general",
        "value": "1.5",
        "scope": "default",
        "line": {
          "start": 94,
          "end": 94
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 95,
        "end": 95
      },
      "context": {
        "type": "variable",
        "name": "line-height-big",
        "value": "1.45",
        "scope": "default",
        "line": {
          "start": 96,
          "end": 96
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 97,
        "end": 97
      },
      "context": {
        "type": "variable",
        "name": "line-height-xbig",
        "value": "1.4",
        "scope": "default",
        "line": {
          "start": 98,
          "end": 98
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 99,
        "end": 99
      },
      "context": {
        "type": "variable",
        "name": "line-height-xxbig",
        "value": "1.35",
        "scope": "default",
        "line": {
          "start": 100,
          "end": 100
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 101,
        "end": 101
      },
      "context": {
        "type": "variable",
        "name": "line-height-small",
        "value": "1.55",
        "scope": "default",
        "line": {
          "start": 102,
          "end": 102
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 103,
        "end": 103
      },
      "context": {
        "type": "variable",
        "name": "line-height-xsmall",
        "value": "1.6",
        "scope": "default",
        "line": {
          "start": 104,
          "end": 104
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 105,
        "end": 105
      },
      "context": {
        "type": "variable",
        "name": "line-height-xxsmall",
        "value": "1.65",
        "scope": "default",
        "line": {
          "start": 106,
          "end": 106
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 107,
        "end": 107
      },
      "context": {
        "type": "variable",
        "name": "line-height-h1",
        "value": "1.25",
        "scope": "default",
        "line": {
          "start": 108,
          "end": 108
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 109,
        "end": 109
      },
      "context": {
        "type": "variable",
        "name": "line-height-h2",
        "value": "1.3",
        "scope": "default",
        "line": {
          "start": 110,
          "end": 110
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 111,
        "end": 111
      },
      "context": {
        "type": "variable",
        "name": "line-height-h3",
        "value": "1.35",
        "scope": "default",
        "line": {
          "start": 112,
          "end": 112
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 113,
        "end": 113
      },
      "context": {
        "type": "variable",
        "name": "line-height-h4",
        "value": "1.4",
        "scope": "default",
        "line": {
          "start": 114,
          "end": 114
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 115,
        "end": 115
      },
      "context": {
        "type": "variable",
        "name": "line-height-h5",
        "value": "1.45",
        "scope": "default",
        "line": {
          "start": 116,
          "end": 116
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 117,
        "end": 117
      },
      "context": {
        "type": "variable",
        "name": "line-height-general-in-rem",
        "value": "$line-height-general * 1rem",
        "scope": "default",
        "line": {
          "start": 118,
          "end": 118
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 119,
        "end": 119
      },
      "context": {
        "type": "variable",
        "name": "line-height-h1-in-rem",
        "value": "$line-height-h1 * 1rem",
        "scope": "default",
        "line": {
          "start": 120,
          "end": 120
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 121,
        "end": 121
      },
      "context": {
        "type": "variable",
        "name": "line-height-h2-in-rem",
        "value": "$line-height-h2 * 1rem",
        "scope": "default",
        "line": {
          "start": 122,
          "end": 122
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 123,
        "end": 123
      },
      "context": {
        "type": "variable",
        "name": "line-height-h3-in-rem",
        "value": "$line-height-h3 * 1rem",
        "scope": "default",
        "line": {
          "start": 124,
          "end": 124
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 125,
        "end": 125
      },
      "context": {
        "type": "variable",
        "name": "line-height-h4-in-rem",
        "value": "$line-height-h4 * 1rem",
        "scope": "default",
        "line": {
          "start": 126,
          "end": 126
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 127,
        "end": 127
      },
      "context": {
        "type": "variable",
        "name": "line-height-h5-in-rem",
        "value": "$line-height-h5 * 1rem",
        "scope": "default",
        "line": {
          "start": 128,
          "end": 128
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 129,
        "end": 129
      },
      "context": {
        "type": "variable",
        "name": "line-height-big-in-rem",
        "value": "$line-height-big * 1rem",
        "scope": "default",
        "line": {
          "start": 130,
          "end": 130
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 131,
        "end": 131
      },
      "context": {
        "type": "variable",
        "name": "line-height-xbig-in-rem",
        "value": "$line-height-xbig * 1rem",
        "scope": "default",
        "line": {
          "start": 132,
          "end": 132
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 133,
        "end": 133
      },
      "context": {
        "type": "variable",
        "name": "line-height-xxbig-in-rem",
        "value": "$line-height-xxbig * 1rem",
        "scope": "default",
        "line": {
          "start": 134,
          "end": 134
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 135,
        "end": 135
      },
      "context": {
        "type": "variable",
        "name": "line-height-small-in-rem",
        "value": "$line-height-small * 1rem",
        "scope": "default",
        "line": {
          "start": 136,
          "end": 136
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 137,
        "end": 137
      },
      "context": {
        "type": "variable",
        "name": "line-height-xsmall-in-rem",
        "value": "$line-height-xsmall * 1rem",
        "scope": "default",
        "line": {
          "start": 138,
          "end": 138
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 139,
        "end": 139
      },
      "context": {
        "type": "variable",
        "name": "line-height-xxsmall-in-rem",
        "value": "$line-height-xxsmall * 1rem",
        "scope": "default",
        "line": {
          "start": 140,
          "end": 140
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 141,
        "end": 141
      },
      "context": {
        "type": "variable",
        "name": "line-heights",
        "value": "()",
        "scope": "default",
        "line": {
          "start": 142,
          "end": 142
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 143,
        "end": 143
      },
      "context": {
        "type": "variable",
        "name": "line-heights",
        "value": "map-merge(\n    (\n        general: $line-height-general,\n        big: $line-height-big,\n        xbig: $line-height-xbig,\n        xxbig: $line-height-xxbig,\n        small: $line-height-small,\n        xsmall: $line-height-xsmall,\n        xxsmall: $line-height-xxsmall,\n        h1: $line-height-h1,\n        h2: $line-height-h2,\n        h3: $line-height-h3,\n        h4: $line-height-h4,\n        h5: $line-height-h5,\n        general-in-rem: $line-height-general-in-rem,\n        big-in-rem: $line-height-big-in-rem,\n        xbig-in-rem: $line-height-xbig-in-rem,\n        xxbig-in-rem: $line-height-xxbig-in-rem,\n        small-in-rem: $line-height-small-in-rem,\n        xsmall-in-rem: $line-height-xsmall-in-rem,\n        xxsmall-in-rem: $line-height-xxsmall-in-rem,\n        h1-in-rem: $line-height-h1-in-rem,\n        h2-in-rem: $line-height-h2-in-rem,\n        h3-in-rem: $line-height-h3-in-rem,\n        h4-in-rem: $line-height-h4-in-rem,\n        h5-in-rem: $line-height-h5-in-rem,\n    ),\n    $line-heights\n)",
        "scope": "private",
        "line": {
          "start": 144,
          "end": 172
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 179,
        "end": 179
      },
      "context": {
        "type": "variable",
        "name": "color-primary",
        "value": "#209ed5",
        "scope": "default",
        "line": {
          "start": 180,
          "end": 180
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 181,
        "end": 181
      },
      "context": {
        "type": "variable",
        "name": "color-dark-accent",
        "value": "#002f5b",
        "scope": "default",
        "line": {
          "start": 182,
          "end": 182
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 183,
        "end": 183
      },
      "context": {
        "type": "variable",
        "name": "color-light-accent",
        "value": "#e6f4f1",
        "scope": "default",
        "line": {
          "start": 184,
          "end": 184
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 185,
        "end": 185
      },
      "context": {
        "type": "variable",
        "name": "color-background",
        "value": "#ffffff",
        "scope": "default",
        "line": {
          "start": 186,
          "end": 186
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 187,
        "end": 187
      },
      "context": {
        "type": "variable",
        "name": "color-contrast",
        "value": "#252428",
        "scope": "default",
        "line": {
          "start": 188,
          "end": 188
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 189,
        "end": 189
      },
      "context": {
        "type": "variable",
        "name": "color-contrast-medium",
        "value": "#8c8c8c",
        "scope": "default",
        "line": {
          "start": 190,
          "end": 190
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 191,
        "end": 191
      },
      "context": {
        "type": "variable",
        "name": "color-contrast-low",
        "value": "#bfbfbf",
        "scope": "default",
        "line": {
          "start": 192,
          "end": 192
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 193,
        "end": 193
      },
      "context": {
        "type": "variable",
        "name": "color-contrast-lower",
        "value": "#d9d9d9",
        "scope": "default",
        "line": {
          "start": 194,
          "end": 194
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 195,
        "end": 195
      },
      "context": {
        "type": "variable",
        "name": "color-contrast-lowest",
        "value": "#f2f2f2",
        "scope": "default",
        "line": {
          "start": 196,
          "end": 196
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 197,
        "end": 197
      },
      "context": {
        "type": "variable",
        "name": "color-contrast-high",
        "value": "#737373",
        "scope": "default",
        "line": {
          "start": 198,
          "end": 198
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 199,
        "end": 199
      },
      "context": {
        "type": "variable",
        "name": "color-contrast-higher",
        "value": "#595959",
        "scope": "default",
        "line": {
          "start": 200,
          "end": 200
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 201,
        "end": 201
      },
      "context": {
        "type": "variable",
        "name": "color-contrast-highest",
        "value": "#404040",
        "scope": "default",
        "line": {
          "start": 202,
          "end": 202
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 203,
        "end": 203
      },
      "context": {
        "type": "variable",
        "name": "color-success",
        "value": "#27ae60",
        "scope": "default",
        "line": {
          "start": 204,
          "end": 204
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 205,
        "end": 205
      },
      "context": {
        "type": "variable",
        "name": "color-alert",
        "value": "#c0392b",
        "scope": "default",
        "line": {
          "start": 206,
          "end": 206
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 207,
        "end": 207
      },
      "context": {
        "type": "variable",
        "name": "color-warning",
        "value": "#d35400",
        "scope": "default",
        "line": {
          "start": 208,
          "end": 208
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 209,
        "end": 209
      },
      "context": {
        "type": "variable",
        "name": "color-highlight",
        "value": "#f1c40f",
        "scope": "default",
        "line": {
          "start": 210,
          "end": 210
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 211,
        "end": 211
      },
      "context": {
        "type": "variable",
        "name": "color-dribbble",
        "value": "#ea4c89",
        "scope": "default",
        "line": {
          "start": 212,
          "end": 212
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 213,
        "end": 213
      },
      "context": {
        "type": "variable",
        "name": "color-facebook",
        "value": "#3b5998",
        "scope": "default",
        "line": {
          "start": 214,
          "end": 214
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 215,
        "end": 215
      },
      "context": {
        "type": "variable",
        "name": "color-flickr",
        "value": "#ff0084",
        "scope": "default",
        "line": {
          "start": 216,
          "end": 216
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 217,
        "end": 217
      },
      "context": {
        "type": "variable",
        "name": "color-instagram",
        "value": "#517fa4",
        "scope": "default",
        "line": {
          "start": 218,
          "end": 218
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 219,
        "end": 219
      },
      "context": {
        "type": "variable",
        "name": "color-linkedin",
        "value": "#0077b5",
        "scope": "default",
        "line": {
          "start": 220,
          "end": 220
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 221,
        "end": 221
      },
      "context": {
        "type": "variable",
        "name": "color-medium",
        "value": "#00ab6b",
        "scope": "default",
        "line": {
          "start": 222,
          "end": 222
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 223,
        "end": 223
      },
      "context": {
        "type": "variable",
        "name": "color-pinterest",
        "value": "#bd081c",
        "scope": "default",
        "line": {
          "start": 224,
          "end": 224
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 225,
        "end": 225
      },
      "context": {
        "type": "variable",
        "name": "color-rss",
        "value": "#f26522",
        "scope": "default",
        "line": {
          "start": 226,
          "end": 226
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 227,
        "end": 227
      },
      "context": {
        "type": "variable",
        "name": "color-tumblr",
        "value": "#35465c",
        "scope": "default",
        "line": {
          "start": 228,
          "end": 228
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 229,
        "end": 229
      },
      "context": {
        "type": "variable",
        "name": "color-twitter",
        "value": "#55acee",
        "scope": "default",
        "line": {
          "start": 230,
          "end": 230
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 231,
        "end": 231
      },
      "context": {
        "type": "variable",
        "name": "color-youtube",
        "value": "#b31217",
        "scope": "default",
        "line": {
          "start": 232,
          "end": 232
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 233,
        "end": 233
      },
      "context": {
        "type": "variable",
        "name": "colors",
        "value": "()",
        "scope": "default",
        "line": {
          "start": 234,
          "end": 234
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 235,
        "end": 235
      },
      "context": {
        "type": "variable",
        "name": "colors",
        "value": "map-merge(\n    (\n        primary: $color-primary,\n        dark-accent: $color-dark-accent,\n        light-accent: $color-light-accent,\n        background: $color-background,\n        contrast: $color-contrast,\n        contrast-medium: $color-contrast-medium,\n        contrast-low: $color-contrast-low,\n        contrast-lower: $color-contrast-lower,\n        contrast-lowest: $color-contrast-lowest,\n        contrast-high: $color-contrast-high,\n        contrast-higher: $color-contrast-higher,\n        contrast-highest: $color-contrast-highest,\n        success: $color-success,\n        alert: $color-alert,\n        warning: $color-warning,\n        highlight: $color-highlight,\n        dribbble: $color-dribbble,\n        facebook: $color-facebook,\n        flickr: $color-flickr,\n        instagram: $color-instagram,\n        linkedin: $color-linkedin,\n        medium: $color-medium,\n        pinterest: $color-pinterest,\n        rss: $color-rss,\n        tumblr: $color-tumblr,\n        twitter: $color-twitter,\n        youtube: $color-youtube,\n    ),\n    $colors\n)",
        "scope": "private",
        "line": {
          "start": 236,
          "end": 267
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 274,
        "end": 274
      },
      "context": {
        "type": "variable",
        "name": "space",
        "value": "1rem",
        "scope": "default",
        "line": {
          "start": 275,
          "end": 275
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 276,
        "end": 276
      },
      "context": {
        "type": "variable",
        "name": "alley",
        "value": "30px",
        "scope": "default",
        "line": {
          "start": 277,
          "end": 277
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 278,
        "end": 278
      },
      "context": {
        "type": "variable",
        "name": "p-inline-t",
        "value": "0.125em",
        "scope": "default",
        "line": {
          "start": 279,
          "end": 279
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 280,
        "end": 280
      },
      "context": {
        "type": "variable",
        "name": "p-inline-r",
        "value": "0.25em",
        "scope": "default",
        "line": {
          "start": 281,
          "end": 281
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 282,
        "end": 282
      },
      "context": {
        "type": "variable",
        "name": "p-inline-b",
        "value": "0.125em",
        "scope": "default",
        "line": {
          "start": 283,
          "end": 283
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 284,
        "end": 284
      },
      "context": {
        "type": "variable",
        "name": "p-inline-l",
        "value": "0.25em",
        "scope": "default",
        "line": {
          "start": 285,
          "end": 285
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 286,
        "end": 286
      },
      "context": {
        "type": "variable",
        "name": "p-box-t",
        "value": "0.75em",
        "scope": "default",
        "line": {
          "start": 287,
          "end": 287
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 288,
        "end": 288
      },
      "context": {
        "type": "variable",
        "name": "p-box-r",
        "value": "1.25em",
        "scope": "default",
        "line": {
          "start": 289,
          "end": 289
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 290,
        "end": 290
      },
      "context": {
        "type": "variable",
        "name": "p-box-b",
        "value": "0.75em",
        "scope": "default",
        "line": {
          "start": 291,
          "end": 291
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 292,
        "end": 292
      },
      "context": {
        "type": "variable",
        "name": "p-box-l",
        "value": "1rem",
        "scope": "default",
        "line": {
          "start": 293,
          "end": 293
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 294,
        "end": 294
      },
      "context": {
        "type": "variable",
        "name": "p-message-t",
        "value": "0.75em",
        "scope": "default",
        "line": {
          "start": 295,
          "end": 295
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 296,
        "end": 296
      },
      "context": {
        "type": "variable",
        "name": "p-message-r",
        "value": "3.25em",
        "scope": "default",
        "line": {
          "start": 297,
          "end": 297
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 298,
        "end": 298
      },
      "context": {
        "type": "variable",
        "name": "p-message-b",
        "value": "0.75em",
        "scope": "default",
        "line": {
          "start": 299,
          "end": 299
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 300,
        "end": 300
      },
      "context": {
        "type": "variable",
        "name": "p-message-l",
        "value": "1em",
        "scope": "default",
        "line": {
          "start": 301,
          "end": 301
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 302,
        "end": 302
      },
      "context": {
        "type": "variable",
        "name": "p-table-t",
        "value": "0.5em",
        "scope": "default",
        "line": {
          "start": 303,
          "end": 303
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 304,
        "end": 304
      },
      "context": {
        "type": "variable",
        "name": "p-table-r",
        "value": "2em",
        "scope": "default",
        "line": {
          "start": 305,
          "end": 305
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 306,
        "end": 306
      },
      "context": {
        "type": "variable",
        "name": "p-table-b",
        "value": "0.5em",
        "scope": "default",
        "line": {
          "start": 307,
          "end": 307
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 308,
        "end": 308
      },
      "context": {
        "type": "variable",
        "name": "p-table-l",
        "value": "0",
        "scope": "default",
        "line": {
          "start": 309,
          "end": 309
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 310,
        "end": 310
      },
      "context": {
        "type": "variable",
        "name": "p-button-t",
        "value": "0.375em",
        "scope": "default",
        "line": {
          "start": 311,
          "end": 311
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 312,
        "end": 312
      },
      "context": {
        "type": "variable",
        "name": "p-button-r",
        "value": "1em",
        "scope": "default",
        "line": {
          "start": 313,
          "end": 313
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 314,
        "end": 314
      },
      "context": {
        "type": "variable",
        "name": "p-button-b",
        "value": "0.375em",
        "scope": "default",
        "line": {
          "start": 315,
          "end": 315
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 316,
        "end": 316
      },
      "context": {
        "type": "variable",
        "name": "p-button-l",
        "value": "1em",
        "scope": "default",
        "line": {
          "start": 317,
          "end": 317
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 318,
        "end": 318
      },
      "context": {
        "type": "variable",
        "name": "p-input-t",
        "value": "0.375em",
        "scope": "default",
        "line": {
          "start": 319,
          "end": 319
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 320,
        "end": 320
      },
      "context": {
        "type": "variable",
        "name": "p-input-r",
        "value": "0.75em",
        "scope": "default",
        "line": {
          "start": 321,
          "end": 321
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 322,
        "end": 322
      },
      "context": {
        "type": "variable",
        "name": "p-input-b",
        "value": "0.375em",
        "scope": "default",
        "line": {
          "start": 323,
          "end": 323
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 324,
        "end": 324
      },
      "context": {
        "type": "variable",
        "name": "p-input-l",
        "value": "0.75em",
        "scope": "default",
        "line": {
          "start": 325,
          "end": 325
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 326,
        "end": 326
      },
      "context": {
        "type": "variable",
        "name": "alley-sizes",
        "value": "()",
        "scope": "default",
        "line": {
          "start": 327,
          "end": 327
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 283,
              "end": 299
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $multiplier) {\n    $m: map-get($alley-sizes, $multiplier);\n} @else if is-nonneg-unitless-number($multiplier) {\n    $m: $multiplier;\n}\n\n@if $type == row {\n    margin-right: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n    margin-left: if($m, calc(#{alley(-$m)} / 2), calc(#{alley(-1)} / 2));\n} @else if $type == col {\n    padding-right: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n    padding-left: if($m, calc(#{alley($m)} / 2), calc(#{alley()} / 2));\n}\n",
            "line": {
              "start": 283,
              "end": 299
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 323,
              "end": 345
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 323,
              "end": 345
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 328,
        "end": 328
      },
      "context": {
        "type": "variable",
        "name": "alley-sizes",
        "value": "map-merge(\n    (\n        noalley: 0,\n        tightest: 0.25,\n        tighter: 0.5,\n        tight: 0.75,\n        comfy: 1,\n        loose: 1.25,\n        looser: 1.5,\n        loosest: 1.75,\n    ),\n    $alley-sizes\n)",
        "scope": "private",
        "line": {
          "start": 329,
          "end": 341
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 348,
        "end": 348
      },
      "context": {
        "type": "variable",
        "name": "ease-in-out-expo",
        "value": "cubic-bezier(1, 0, 0, 1)",
        "scope": "private",
        "line": {
          "start": 349,
          "end": 349
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 350,
        "end": 350
      },
      "context": {
        "type": "variable",
        "name": "ease-in-out-quart",
        "value": "cubic-bezier(0.77, 0, 0.175, 1)",
        "scope": "private",
        "line": {
          "start": 351,
          "end": 351
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 352,
        "end": 352
      },
      "context": {
        "type": "variable",
        "name": "default-easing",
        "value": "$ease-in-out-expo",
        "scope": "default",
        "line": {
          "start": 353,
          "end": 353
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 360,
        "end": 360
      },
      "context": {
        "type": "variable",
        "name": "border-size",
        "value": "1px",
        "scope": "default",
        "line": {
          "start": 361,
          "end": 361
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 362,
        "end": 362
      },
      "context": {
        "type": "variable",
        "name": "max-site-width",
        "value": "1200px",
        "scope": "default",
        "line": {
          "start": 363,
          "end": 363
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 370,
        "end": 370
      },
      "context": {
        "type": "variable",
        "name": "breakpoint-s",
        "value": "480px",
        "scope": "default",
        "line": {
          "start": 371,
          "end": 371
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "min-small",
            "code": "@media (min-width: $breakpoint-s) {\n    @content;\n}\n",
            "line": {
              "start": 55,
              "end": 59
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 372,
        "end": 372
      },
      "context": {
        "type": "variable",
        "name": "breakpoint-m",
        "value": "768px",
        "scope": "default",
        "line": {
          "start": 373,
          "end": 373
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "min-medium",
            "code": "@media (min-width: $breakpoint-m) {\n    @content;\n}\n",
            "line": {
              "start": 62,
              "end": 66
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 374,
        "end": 374
      },
      "context": {
        "type": "variable",
        "name": "breakpoint-l",
        "value": "960px",
        "scope": "default",
        "line": {
          "start": 375,
          "end": 375
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "min-large",
            "code": "@media (min-width: $breakpoint-l) {\n    @content;\n}\n",
            "line": {
              "start": 69,
              "end": 73
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 376,
        "end": 376
      },
      "context": {
        "type": "variable",
        "name": "breakpoint-xl",
        "value": "1200px",
        "scope": "default",
        "line": {
          "start": 377,
          "end": 377
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "min-xlarge",
            "code": "@media (min-width: $breakpoint-xl) {\n    @content;\n}\n",
            "line": {
              "start": 76,
              "end": 80
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 378,
        "end": 378
      },
      "context": {
        "type": "variable",
        "name": "breakpoints",
        "value": "()",
        "scope": "default",
        "line": {
          "start": 379,
          "end": 379
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
          "context": {
            "type": "mixin",
            "name": "hide",
            "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
            "line": {
              "start": 256,
              "end": 266
            }
          }
        },
        {
          "description": "Hides element when viewport is as wide or wider than <code>$breakpoint</code>\n",
          "context": {
            "type": "mixin",
            "name": "hide",
            "code": "@if index(map-keys($breakpoints), $breakpoint) {\n    @include min(map-get($breakpoints, $breakpoint)) {\n        display: none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display: none;\n    }\n}\n",
            "line": {
              "start": 256,
              "end": 266
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 323,
              "end": 345
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "$m: false;\n\n@if index(map-keys($alley-sizes), $alley-multiplier) {\n    $m: map-get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $m: $alley-multiplier;\n}\n\n@if $m {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($m);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($m);\n        }\n    } @else {\n        @include row-alley-styles($m);\n    }\n}\n",
            "line": {
              "start": 323,
              "end": 345
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 348,
              "end": 374
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 348,
              "end": 374
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 348,
              "end": 374
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 348,
              "end": 374
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 380,
        "end": 380
      },
      "context": {
        "type": "variable",
        "name": "breakpoints",
        "value": "map-merge(\n    (\n        s: $breakpoint-s,\n        m: $breakpoint-m,\n        l: $breakpoint-l,\n        xl: $breakpoint-xl,\n    ),\n    $breakpoints\n)",
        "scope": "private",
        "line": {
          "start": 381,
          "end": 389
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 390,
        "end": 390
      },
      "context": {
        "type": "variable",
        "name": "columns",
        "value": "()",
        "scope": "default",
        "line": {
          "start": 391,
          "end": 391
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 348,
              "end": 374
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 348,
              "end": 374
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 348,
              "end": 374
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map-keys($columns), $column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: map-get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: map-get($columns, $column-width);\n        }\n    } @else {\n        width: map-get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map-keys($breakpoints), $breakpoint) {\n        @include min(map-get($breakpoints, $breakpoint)) {\n            width: percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width: percentage($column-width);\n        }\n    } @else {\n        width: percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 348,
              "end": 374
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 392,
        "end": 392
      },
      "context": {
        "type": "variable",
        "name": "columns",
        "value": "map-merge(\n    (\n        1: percentage(1/12),\n        2: percentage(2/12),\n        3: percentage(3/12),\n        4: percentage(4/12),\n        5: percentage(5/12),\n        6: percentage(6/12),\n        7: percentage(7/12),\n        8: percentage(8/12),\n        9: percentage(9/12),\n        10: percentage(10/12),\n        11: percentage(11/12),\n        12: percentage(12/12),\n        p5: 5%,\n        p10: 10%,\n        p15: 15%,\n        p20: 20%,\n        p25: 25%,\n        p30: 30%,\n        p35: 35%,\n        p40: 40%,\n        p45: 45%,\n        p50: 50%,\n        p55: 55%,\n        p60: 60%,\n        p65: 65%,\n        p70: 70%,\n        p75: 75%,\n        p80: 80%,\n        p85: 85%,\n        p90: 90%,\n        p95: 95%,\n        p100: 100%,\n    ),\n    $columns\n)",
        "scope": "private",
        "line": {
          "start": 393,
          "end": 429
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 436,
        "end": 436
      },
      "context": {
        "type": "variable",
        "name": "lengths-absolute",
        "value": "(cm, mm, in, px, pt, pc)",
        "scope": "private",
        "line": {
          "start": 437,
          "end": 437
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 438,
        "end": 438
      },
      "context": {
        "type": "variable",
        "name": "lengths-relative",
        "value": "(em, ex, ch, rem, vw, vh, vmin, vmax, '%')",
        "scope": "private",
        "line": {
          "start": 439,
          "end": 439
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 440,
        "end": 440
      },
      "context": {
        "type": "variable",
        "name": "lengths",
        "value": "join($lengths-absolute, $lengths-relative)",
        "scope": "private",
        "line": {
          "start": 441,
          "end": 441
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "Checks if <code>$value</code> is a number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-unit-number",
            "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 220,
              "end": 230
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-unit-number",
            "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 265,
              "end": 275
            }
          }
        }
      ]
    }
  ]
}