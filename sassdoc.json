{
  "functions": [
    {
      "description": "Returns a formatted string of valid <code>$values</code>.\n",
      "commentRange": {
        "start": 6,
        "end": 8
      },
      "context": {
        "type": "function",
        "name": "format-valid-values",
        "code": "@return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n",
        "line": {
          "start": 9,
          "end": 11
        }
      },
      "parameter": [
        {
          "type": "list",
          "name": "values"
        }
      ],
      "access": "private",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "list-to-string",
          "autofill": true,
          "item": {
            "description": "Joins <code>$list</code> items into a <code>$glue</code> separated string and uses an optional <code>$closer</code> before the final item.\n",
            "commentRange": {
              "start": 159,
              "end": 163
            },
            "context": {
              "type": "function",
              "name": "list-to-string",
              "code": "$output:null;\n$last-item:null;\n$last-item-quoted:false;\n\n@if type-of($list) != list {\n    @error '`#{$list}` is not a valid list.';\n}\n\n@for $i from 1 through length($list) {\n    $item:nth($list, $i);\n\n    @if type-of($item) == list {\n        @if $i == length($list) {\n            $last-item:nth($item, -1);\n            $is-nested-list:type-of($last-item) == list;\n\n            @while $is-nested-list {\n                $last-item:nth($last-item, -1);\n\n                @if type-of($last-item) != list {\n                    $is-nested-list:false;\n                    $last-item-quoted:type-of($last-item) == string and $quote-strings;\n                }\n            }\n\n            $output:#{$output}#{list-to-string($item, $glue, null, $quote-strings)};\n        } @else {\n            $output:#{$output}#{list-to-string($item, $glue, null, $quote-strings)}#{$glue};\n        }\n    } @else {\n        $item:if(type-of($item) == string and $quote-strings, '\"#{$item}\"', $item);\n\n        @if $i == length($list) {\n            $last-item:$item;\n            $last-item-quoted:type-of($last-item) == string and $quote-strings;\n\n            $output:#{$output}#{$item}\n        } @else {\n            $output:#{$output}#{$item}#{$glue};\n        }\n    }\n}\n\n@if $closer != null {\n    $offset:if($last-item-quoted, 2, 0);\n    $find:#{$glue}#{$last-item};\n    $slice-1:str-slice($output, 1, -(str-length(#{$find}) + 1 + $offset));\n    $slice-2:str-slice($output, -(str-length(#{$last-item}) + $offset));\n    $output:#{$slice-1}#{$closer}#{$slice-2};\n}\n\n@return $output;\n",
              "line": {
                "start": 164,
                "end": 217
              }
            },
            "parameter": [
              {
                "type": "list",
                "name": "list"
              },
              {
                "type": "string",
                "name": "glue",
                "default": "''"
              },
              {
                "type": "string",
                "name": "closer",
                "default": "null"
              },
              {
                "type": "bool",
                "name": "quote-strings",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "throw": [
              "`#{$list}` is not a valid list."
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Returns a formatted string of valid <code>$values</code>.\n",
                "context": {
                  "type": "function",
                  "name": "format-valid-values",
                  "code": "@return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n",
                  "line": {
                    "start": 9,
                    "end": 11
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
          "context": {
            "type": "function",
            "name": "is-in-list",
            "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
            "line": {
              "start": 142,
              "end": 152
            }
          }
        }
      ]
    },
    {
      "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
      "commentRange": {
        "start": 13,
        "end": 15
      },
      "context": {
        "type": "function",
        "name": "show-param-value",
        "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
        "line": {
          "start": 16,
          "end": 20
        }
      },
      "parameter": [
        {
          "type": "any",
          "name": "value"
        }
      ],
      "access": "private",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Checks if <code>$value</code> is a number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-unit-number",
            "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 66,
              "end": 76
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a unitless number.\n",
          "context": {
            "type": "function",
            "name": "is-unitless-number",
            "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 81,
              "end": 91
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative number.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-number",
            "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 96,
              "end": 106
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-unit-number",
            "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 111,
              "end": 121
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-unitless-number",
            "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
            "line": {
              "start": 126,
              "end": 136
            }
          }
        },
        {
          "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
          "context": {
            "type": "function",
            "name": "is-in-list",
            "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
            "line": {
              "start": 142,
              "end": 152
            }
          }
        }
      ]
    },
    {
      "description": "Checks if <code>$value</code> is a number.\n",
      "commentRange": {
        "start": 27,
        "end": 28
      },
      "context": {
        "type": "function",
        "name": "is-number",
        "code": "@return type-of($value) == number;\n",
        "line": {
          "start": 29,
          "end": 31
        }
      },
      "parameter": [
        {
          "type": "any",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Checks if <code>$value</code> is a number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-unit-number",
            "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 66,
              "end": 76
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a unitless number.\n",
          "context": {
            "type": "function",
            "name": "is-unitless-number",
            "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 81,
              "end": 91
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative number.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-number",
            "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 96,
              "end": 106
            }
          }
        },
        {
          "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
          "context": {
            "type": "function",
            "name": "decimal-round",
            "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
            "line": {
              "start": 254,
              "end": 280
            }
          }
        },
        {
          "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
          "context": {
            "type": "function",
            "name": "decimal-round",
            "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
            "line": {
              "start": 254,
              "end": 280
            }
          }
        }
      ]
    },
    {
      "description": "Checks if <code>$value</code> is a list.\n",
      "commentRange": {
        "start": 33,
        "end": 34
      },
      "context": {
        "type": "function",
        "name": "is-list",
        "code": "@return type-of($value) == list;\n",
        "line": {
          "start": 35,
          "end": 37
        }
      },
      "parameter": [
        {
          "type": "any",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a map.\n",
      "commentRange": {
        "start": 39,
        "end": 40
      },
      "context": {
        "type": "function",
        "name": "is-map",
        "code": "@return type-of($value) == map;\n",
        "line": {
          "start": 41,
          "end": 43
        }
      },
      "parameter": [
        {
          "type": "any",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a string.\n",
      "commentRange": {
        "start": 45,
        "end": 46
      },
      "context": {
        "type": "function",
        "name": "is-string",
        "code": "@return type-of($value) == string;\n",
        "line": {
          "start": 47,
          "end": 49
        }
      },
      "parameter": [
        {
          "type": "any",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a boolean.\n",
      "commentRange": {
        "start": 51,
        "end": 52
      },
      "context": {
        "type": "function",
        "name": "is-bool",
        "code": "@return type-of($value) == bool;\n",
        "line": {
          "start": 53,
          "end": 55
        }
      },
      "parameter": [
        {
          "type": "any",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a color.\n",
      "commentRange": {
        "start": 57,
        "end": 58
      },
      "context": {
        "type": "function",
        "name": "is-color",
        "code": "@return type-of($value) == color;\n",
        "line": {
          "start": 59,
          "end": 61
        }
      },
      "parameter": [
        {
          "type": "any",
          "name": "value"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a number with a unit.\n",
      "commentRange": {
        "start": 63,
        "end": 65
      },
      "context": {
        "type": "function",
        "name": "is-unit-number",
        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
        "line": {
          "start": 66,
          "end": 76
        }
      },
      "parameter": [
        {
          "type": "any",
          "name": "value"
        },
        {
          "type": "bool",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a number.\n",
            "commentRange": {
              "start": 27,
              "end": 28
            },
            "context": {
              "type": "function",
              "name": "is-number",
              "code": "@return type-of($value) == number;\n",
              "line": {
                "start": 29,
                "end": 31
              }
            },
            "parameter": [
              {
                "type": "any",
                "name": "value"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 66,
                    "end": 76
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 81,
                    "end": 91
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 96,
                    "end": 106
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 254,
                    "end": 280
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 254,
                    "end": 280
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 13,
              "end": 15
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 16,
                "end": 20
              }
            },
            "parameter": [
              {
                "type": "any",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 66,
                    "end": 76
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 81,
                    "end": 91
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 96,
                    "end": 106
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 111,
                    "end": 121
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 126,
                    "end": 136
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 142,
                    "end": 152
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "lengths",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 371,
              "end": 371
            },
            "context": {
              "type": "variable",
              "name": "lengths",
              "value": "join($lengths-absolute, $lengths-relative)",
              "scope": "private",
              "line": {
                "start": 372,
                "end": 372
              }
            },
            "access": "private",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 66,
                    "end": 76
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 111,
                    "end": 121
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a unitless number.\n",
      "commentRange": {
        "start": 78,
        "end": 80
      },
      "context": {
        "type": "function",
        "name": "is-unitless-number",
        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
        "line": {
          "start": 81,
          "end": 91
        }
      },
      "parameter": [
        {
          "type": "any",
          "name": "value"
        },
        {
          "type": "bool",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a number.\n",
            "commentRange": {
              "start": 27,
              "end": 28
            },
            "context": {
              "type": "function",
              "name": "is-number",
              "code": "@return type-of($value) == number;\n",
              "line": {
                "start": 29,
                "end": 31
              }
            },
            "parameter": [
              {
                "type": "any",
                "name": "value"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 66,
                    "end": 76
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 81,
                    "end": 91
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 96,
                    "end": 106
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 254,
                    "end": 280
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 254,
                    "end": 280
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 13,
              "end": 15
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 16,
                "end": 20
              }
            },
            "parameter": [
              {
                "type": "any",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 66,
                    "end": 76
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 81,
                    "end": 91
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 96,
                    "end": 106
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 111,
                    "end": 121
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 126,
                    "end": 136
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 142,
                    "end": 152
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
      "commentRange": {
        "start": 93,
        "end": 95
      },
      "context": {
        "type": "function",
        "name": "is-nonneg-number",
        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
        "line": {
          "start": 96,
          "end": 106
        }
      },
      "parameter": [
        {
          "type": "any",
          "name": "value"
        },
        {
          "type": "bool",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a number.\n",
            "commentRange": {
              "start": 27,
              "end": 28
            },
            "context": {
              "type": "function",
              "name": "is-number",
              "code": "@return type-of($value) == number;\n",
              "line": {
                "start": 29,
                "end": 31
              }
            },
            "parameter": [
              {
                "type": "any",
                "name": "value"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 66,
                    "end": 76
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 81,
                    "end": 91
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 96,
                    "end": 106
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 254,
                    "end": 280
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 254,
                    "end": 280
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 13,
              "end": 15
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 16,
                "end": 20
              }
            },
            "parameter": [
              {
                "type": "any",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 66,
                    "end": 76
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 81,
                    "end": 91
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 96,
                    "end": 106
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 111,
                    "end": 121
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 126,
                    "end": 136
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 142,
                    "end": 152
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-unit-number",
            "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 111,
              "end": 121
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-unitless-number",
            "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
            "line": {
              "start": 126,
              "end": 136
            }
          }
        },
        {
          "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
          "context": {
            "type": "function",
            "name": "auto-color",
            "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
            "line": {
              "start": 229,
              "end": 243
            }
          }
        }
      ]
    },
    {
      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
      "commentRange": {
        "start": 108,
        "end": 110
      },
      "context": {
        "type": "function",
        "name": "is-nonneg-unit-number",
        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
        "line": {
          "start": 111,
          "end": 121
        }
      },
      "parameter": [
        {
          "type": "any",
          "name": "value"
        },
        {
          "type": "bool",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-nonneg-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
            "commentRange": {
              "start": 93,
              "end": 95
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-number",
              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 96,
                "end": 106
              }
            },
            "parameter": [
              {
                "type": "any",
                "name": "value"
              },
              {
                "type": "bool",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 27,
                    "end": 28
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 29,
                      "end": 31
                    }
                  },
                  "parameter": [
                    {
                      "type": "any",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 254,
                          "end": 280
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 254,
                          "end": 280
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 13,
                    "end": 15
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 16,
                      "end": 20
                    }
                  },
                  "parameter": [
                    {
                      "type": "any",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 142,
                          "end": 152
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 111,
                    "end": 121
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 126,
                    "end": 136
                  }
                }
              },
              {
                "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                "context": {
                  "type": "function",
                  "name": "auto-color",
                  "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                  "line": {
                    "start": 229,
                    "end": 243
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 13,
              "end": 15
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 16,
                "end": 20
              }
            },
            "parameter": [
              {
                "type": "any",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 66,
                    "end": 76
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 81,
                    "end": 91
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 96,
                    "end": 106
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 111,
                    "end": 121
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 126,
                    "end": 136
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 142,
                    "end": 152
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "lengths",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 371,
              "end": 371
            },
            "context": {
              "type": "variable",
              "name": "lengths",
              "value": "join($lengths-absolute, $lengths-relative)",
              "scope": "private",
              "line": {
                "start": 372,
                "end": 372
              }
            },
            "access": "private",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 66,
                    "end": 76
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 111,
                    "end": 121
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "hide",
            "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
            "line": {
              "start": 220,
              "end": 230
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
            "line": {
              "start": 308,
              "end": 322
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 325,
              "end": 351
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 325,
              "end": 351
            }
          }
        }
      ]
    },
    {
      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
      "commentRange": {
        "start": 123,
        "end": 125
      },
      "context": {
        "type": "function",
        "name": "is-nonneg-unitless-number",
        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
        "line": {
          "start": 126,
          "end": 136
        }
      },
      "parameter": [
        {
          "type": "any",
          "name": "value"
        },
        {
          "type": "bool",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-nonneg-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
            "commentRange": {
              "start": 93,
              "end": 95
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-number",
              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 96,
                "end": 106
              }
            },
            "parameter": [
              {
                "type": "any",
                "name": "value"
              },
              {
                "type": "bool",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 27,
                    "end": 28
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 29,
                      "end": 31
                    }
                  },
                  "parameter": [
                    {
                      "type": "any",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 254,
                          "end": 280
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 254,
                          "end": 280
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 13,
                    "end": 15
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 16,
                      "end": 20
                    }
                  },
                  "parameter": [
                    {
                      "type": "any",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 142,
                          "end": 152
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 111,
                    "end": 121
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 126,
                    "end": 136
                  }
                }
              },
              {
                "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                "context": {
                  "type": "function",
                  "name": "auto-color",
                  "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                  "line": {
                    "start": 229,
                    "end": 243
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 13,
              "end": 15
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 16,
                "end": 20
              }
            },
            "parameter": [
              {
                "type": "any",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 66,
                    "end": 76
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 81,
                    "end": 91
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 96,
                    "end": 106
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 111,
                    "end": 121
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 126,
                    "end": 136
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 142,
                    "end": 152
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
            "line": {
              "start": 266,
              "end": 283
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
            "line": {
              "start": 308,
              "end": 322
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 325,
              "end": 351
            }
          }
        }
      ]
    },
    {
      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
      "commentRange": {
        "start": 138,
        "end": 141
      },
      "context": {
        "type": "function",
        "name": "is-in-list",
        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
        "line": {
          "start": 142,
          "end": 152
        }
      },
      "parameter": [
        {
          "type": "string|number",
          "name": "needle"
        },
        {
          "type": "list",
          "name": "haystack"
        },
        {
          "type": "bool",
          "name": "warn",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "show-param-value",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
            "commentRange": {
              "start": 13,
              "end": 15
            },
            "context": {
              "type": "function",
              "name": "show-param-value",
              "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
              "line": {
                "start": 16,
                "end": 20
              }
            },
            "parameter": [
              {
                "type": "any",
                "name": "value"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 66,
                    "end": 76
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 81,
                    "end": 91
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 96,
                    "end": 106
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 111,
                    "end": 121
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 126,
                    "end": 136
                  }
                }
              },
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 142,
                    "end": 152
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "format-valid-values",
          "autofill": true,
          "item": {
            "description": "Returns a formatted string of valid <code>$values</code>.\n",
            "commentRange": {
              "start": 6,
              "end": 8
            },
            "context": {
              "type": "function",
              "name": "format-valid-values",
              "code": "@return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n",
              "line": {
                "start": 9,
                "end": 11
              }
            },
            "parameter": [
              {
                "type": "list",
                "name": "values"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "list-to-string",
                "autofill": true,
                "item": {
                  "description": "Joins <code>$list</code> items into a <code>$glue</code> separated string and uses an optional <code>$closer</code> before the final item.\n",
                  "commentRange": {
                    "start": 159,
                    "end": 163
                  },
                  "context": {
                    "type": "function",
                    "name": "list-to-string",
                    "code": "$output:null;\n$last-item:null;\n$last-item-quoted:false;\n\n@if type-of($list) != list {\n    @error '`#{$list}` is not a valid list.';\n}\n\n@for $i from 1 through length($list) {\n    $item:nth($list, $i);\n\n    @if type-of($item) == list {\n        @if $i == length($list) {\n            $last-item:nth($item, -1);\n            $is-nested-list:type-of($last-item) == list;\n\n            @while $is-nested-list {\n                $last-item:nth($last-item, -1);\n\n                @if type-of($last-item) != list {\n                    $is-nested-list:false;\n                    $last-item-quoted:type-of($last-item) == string and $quote-strings;\n                }\n            }\n\n            $output:#{$output}#{list-to-string($item, $glue, null, $quote-strings)};\n        } @else {\n            $output:#{$output}#{list-to-string($item, $glue, null, $quote-strings)}#{$glue};\n        }\n    } @else {\n        $item:if(type-of($item) == string and $quote-strings, '\"#{$item}\"', $item);\n\n        @if $i == length($list) {\n            $last-item:$item;\n            $last-item-quoted:type-of($last-item) == string and $quote-strings;\n\n            $output:#{$output}#{$item}\n        } @else {\n            $output:#{$output}#{$item}#{$glue};\n        }\n    }\n}\n\n@if $closer != null {\n    $offset:if($last-item-quoted, 2, 0);\n    $find:#{$glue}#{$last-item};\n    $slice-1:str-slice($output, 1, -(str-length(#{$find}) + 1 + $offset));\n    $slice-2:str-slice($output, -(str-length(#{$last-item}) + $offset));\n    $output:#{$slice-1}#{$closer}#{$slice-2};\n}\n\n@return $output;\n",
                    "line": {
                      "start": 164,
                      "end": 217
                    }
                  },
                  "parameter": [
                    {
                      "type": "list",
                      "name": "list"
                    },
                    {
                      "type": "string",
                      "name": "glue",
                      "default": "''"
                    },
                    {
                      "type": "string",
                      "name": "closer",
                      "default": "null"
                    },
                    {
                      "type": "bool",
                      "name": "quote-strings",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "throw": [
                    "`#{$list}` is not a valid list."
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Returns a formatted string of valid <code>$values</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "format-valid-values",
                        "code": "@return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n",
                        "line": {
                          "start": 9,
                          "end": 11
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                "context": {
                  "type": "function",
                  "name": "is-in-list",
                  "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 142,
                    "end": 152
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Joins <code>$list</code> items into a <code>$glue</code> separated string and uses an optional <code>$closer</code> before the final item.\n",
      "commentRange": {
        "start": 159,
        "end": 163
      },
      "context": {
        "type": "function",
        "name": "list-to-string",
        "code": "$output:null;\n$last-item:null;\n$last-item-quoted:false;\n\n@if type-of($list) != list {\n    @error '`#{$list}` is not a valid list.';\n}\n\n@for $i from 1 through length($list) {\n    $item:nth($list, $i);\n\n    @if type-of($item) == list {\n        @if $i == length($list) {\n            $last-item:nth($item, -1);\n            $is-nested-list:type-of($last-item) == list;\n\n            @while $is-nested-list {\n                $last-item:nth($last-item, -1);\n\n                @if type-of($last-item) != list {\n                    $is-nested-list:false;\n                    $last-item-quoted:type-of($last-item) == string and $quote-strings;\n                }\n            }\n\n            $output:#{$output}#{list-to-string($item, $glue, null, $quote-strings)};\n        } @else {\n            $output:#{$output}#{list-to-string($item, $glue, null, $quote-strings)}#{$glue};\n        }\n    } @else {\n        $item:if(type-of($item) == string and $quote-strings, '\"#{$item}\"', $item);\n\n        @if $i == length($list) {\n            $last-item:$item;\n            $last-item-quoted:type-of($last-item) == string and $quote-strings;\n\n            $output:#{$output}#{$item}\n        } @else {\n            $output:#{$output}#{$item}#{$glue};\n        }\n    }\n}\n\n@if $closer != null {\n    $offset:if($last-item-quoted, 2, 0);\n    $find:#{$glue}#{$last-item};\n    $slice-1:str-slice($output, 1, -(str-length(#{$find}) + 1 + $offset));\n    $slice-2:str-slice($output, -(str-length(#{$last-item}) + $offset));\n    $output:#{$slice-1}#{$closer}#{$slice-2};\n}\n\n@return $output;\n",
        "line": {
          "start": 164,
          "end": 217
        }
      },
      "parameter": [
        {
          "type": "list",
          "name": "list"
        },
        {
          "type": "string",
          "name": "glue",
          "default": "''"
        },
        {
          "type": "string",
          "name": "closer",
          "default": "null"
        },
        {
          "type": "bool",
          "name": "quote-strings",
          "default": "false"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "throw": [
        "`#{$list}` is not a valid list."
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Returns a formatted string of valid <code>$values</code>.\n",
          "context": {
            "type": "function",
            "name": "format-valid-values",
            "code": "@return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';\n",
            "line": {
              "start": 9,
              "end": 11
            }
          }
        }
      ]
    },
    {
      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
      "commentRange": {
        "start": 224,
        "end": 228
      },
      "context": {
        "type": "function",
        "name": "auto-color",
        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
        "line": {
          "start": 229,
          "end": 243
        }
      },
      "parameter": [
        {
          "type": "color",
          "name": "bg-color"
        },
        {
          "type": "number",
          "name": "threshold",
          "default": "60"
        },
        {
          "type": "color",
          "name": "dark",
          "default": "$color-dark"
        },
        {
          "type": "color",
          "name": "light",
          "default": "$color-light"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-nonneg-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
            "commentRange": {
              "start": 93,
              "end": 95
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-number",
              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 96,
                "end": 106
              }
            },
            "parameter": [
              {
                "type": "any",
                "name": "value"
              },
              {
                "type": "bool",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 27,
                    "end": 28
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 29,
                      "end": 31
                    }
                  },
                  "parameter": [
                    {
                      "type": "any",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 254,
                          "end": 280
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 254,
                          "end": 280
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 13,
                    "end": 15
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 16,
                      "end": 20
                    }
                  },
                  "parameter": [
                    {
                      "type": "any",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 142,
                          "end": 152
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unit-number",
                  "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 111,
                    "end": 121
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-unitless-number",
                  "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 126,
                    "end": 136
                  }
                }
              },
              {
                "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                "context": {
                  "type": "function",
                  "name": "auto-color",
                  "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                  "line": {
                    "start": 229,
                    "end": 243
                  }
                }
              }
            ]
          }
        }
      ],
      "throw": [
        "`#{$bg-color}` is not a valid color.",
        "`#{$threshold}` is not a nonnegative number."
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
      "commentRange": {
        "start": 250,
        "end": 253
      },
      "context": {
        "type": "function",
        "name": "decimal-round",
        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
        "line": {
          "start": 254,
          "end": 280
        }
      },
      "parameter": [
        {
          "type": "number",
          "name": "number"
        },
        {
          "type": "number",
          "name": "places"
        },
        {
          "type": "string (round, ceil, floor)",
          "name": "mode",
          "default": "round"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a number.\n",
            "commentRange": {
              "start": 27,
              "end": 28
            },
            "context": {
              "type": "function",
              "name": "is-number",
              "code": "@return type-of($value) == number;\n",
              "line": {
                "start": 29,
                "end": 31
              }
            },
            "parameter": [
              {
                "type": "any",
                "name": "value"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Checks if <code>$value</code> is a number with a unit.\n",
                "context": {
                  "type": "function",
                  "name": "is-unit-number",
                  "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 66,
                    "end": 76
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a unitless number.\n",
                "context": {
                  "type": "function",
                  "name": "is-unitless-number",
                  "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 81,
                    "end": 91
                  }
                }
              },
              {
                "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                "context": {
                  "type": "function",
                  "name": "is-nonneg-number",
                  "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                  "line": {
                    "start": 96,
                    "end": 106
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 254,
                    "end": 280
                  }
                }
              },
              {
                "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-round",
                  "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                  "line": {
                    "start": 254,
                    "end": 280
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Ceils <code>$number</code> to given decimal <code>$places</code>.\n",
          "context": {
            "type": "function",
            "name": "decimal-ceil",
            "code": "@return decimal-round($number, $places, ceil);\n",
            "line": {
              "start": 285,
              "end": 287
            }
          }
        },
        {
          "description": "Floors <code>$number</code> to given decimal <code>$places</code>.\n",
          "context": {
            "type": "function",
            "name": "decimal-floor",
            "code": "@return decimal-round($number, $places, floor);\n",
            "line": {
              "start": 292,
              "end": 294
            }
          }
        }
      ]
    },
    {
      "description": "Ceils <code>$number</code> to given decimal <code>$places</code>.\n",
      "commentRange": {
        "start": 282,
        "end": 284
      },
      "context": {
        "type": "function",
        "name": "decimal-ceil",
        "code": "@return decimal-round($number, $places, ceil);\n",
        "line": {
          "start": 285,
          "end": 287
        }
      },
      "parameter": [
        {
          "type": "number",
          "name": "number"
        },
        {
          "type": "number",
          "name": "places"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "decimal-round",
          "autofill": true,
          "item": {
            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
            "commentRange": {
              "start": 250,
              "end": 253
            },
            "context": {
              "type": "function",
              "name": "decimal-round",
              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
              "line": {
                "start": 254,
                "end": 280
              }
            },
            "parameter": [
              {
                "type": "number",
                "name": "number"
              },
              {
                "type": "number",
                "name": "places"
              },
              {
                "type": "string (round, ceil, floor)",
                "name": "mode",
                "default": "round"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 27,
                    "end": 28
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 29,
                      "end": 31
                    }
                  },
                  "parameter": [
                    {
                      "type": "any",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 254,
                          "end": 280
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 254,
                          "end": 280
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Ceils <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-ceil",
                  "code": "@return decimal-round($number, $places, ceil);\n",
                  "line": {
                    "start": 285,
                    "end": 287
                  }
                }
              },
              {
                "description": "Floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-floor",
                  "code": "@return decimal-round($number, $places, floor);\n",
                  "line": {
                    "start": 292,
                    "end": 294
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Floors <code>$number</code> to given decimal <code>$places</code>.\n",
      "commentRange": {
        "start": 289,
        "end": 291
      },
      "context": {
        "type": "function",
        "name": "decimal-floor",
        "code": "@return decimal-round($number, $places, floor);\n",
        "line": {
          "start": 292,
          "end": 294
        }
      },
      "parameter": [
        {
          "type": "number",
          "name": "number"
        },
        {
          "type": "number",
          "name": "places"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "decimal-round",
          "autofill": true,
          "item": {
            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
            "commentRange": {
              "start": 250,
              "end": 253
            },
            "context": {
              "type": "function",
              "name": "decimal-round",
              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
              "line": {
                "start": 254,
                "end": 280
              }
            },
            "parameter": [
              {
                "type": "number",
                "name": "number"
              },
              {
                "type": "number",
                "name": "places"
              },
              {
                "type": "string (round, ceil, floor)",
                "name": "mode",
                "default": "round"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a number.\n",
                  "commentRange": {
                    "start": 27,
                    "end": 28
                  },
                  "context": {
                    "type": "function",
                    "name": "is-number",
                    "code": "@return type-of($value) == number;\n",
                    "line": {
                      "start": 29,
                      "end": 31
                    }
                  },
                  "parameter": [
                    {
                      "type": "any",
                      "name": "value"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 254,
                          "end": 280
                        }
                      }
                    },
                    {
                      "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "decimal-round",
                        "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                        "line": {
                          "start": 254,
                          "end": 280
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Ceils <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-ceil",
                  "code": "@return decimal-round($number, $places, ceil);\n",
                  "line": {
                    "start": 285,
                    "end": 287
                  }
                }
              },
              {
                "description": "Floors <code>$number</code> to given decimal <code>$places</code>.\n",
                "context": {
                  "type": "function",
                  "name": "decimal-floor",
                  "code": "@return decimal-round($number, $places, floor);\n",
                  "line": {
                    "start": 292,
                    "end": 294
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    },
    {
      "description": "Removes the unit from <code>$number</code>.\n",
      "commentRange": {
        "start": 296,
        "end": 297
      },
      "context": {
        "type": "function",
        "name": "strip-unit",
        "code": "@if type-of($number) == 'number' and not unitless($number) {\n    @return $number / ($number * 0 + 1);\n}\n\n@return $number;\n",
        "line": {
          "start": 298,
          "end": 304
        }
      },
      "parameter": [
        {
          "type": "number",
          "name": "number"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      },
      "usedBy": [
        {
          "description": "Converts <code>$size-in-rem</code> to pixels based on <code>$font-size-base</code>.\n",
          "context": {
            "type": "function",
            "name": "rem-to-pixels",
            "code": "@return strip-unit($size-in-rem) * $font-size-base;\n",
            "line": {
              "start": 309,
              "end": 311
            }
          }
        }
      ]
    },
    {
      "description": "Converts <code>$size-in-rem</code> to pixels based on <code>$font-size-base</code>.\n",
      "commentRange": {
        "start": 306,
        "end": 308
      },
      "context": {
        "type": "function",
        "name": "rem-to-pixels",
        "code": "@return strip-unit($size-in-rem) * $font-size-base;\n",
        "line": {
          "start": 309,
          "end": 311
        }
      },
      "parameter": [
        {
          "type": "number",
          "name": "size-in-rem"
        },
        {
          "type": "number",
          "name": "font-size-base",
          "default": "$font-size-base"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "strip-unit",
          "autofill": true,
          "item": {
            "description": "Removes the unit from <code>$number</code>.\n",
            "commentRange": {
              "start": 296,
              "end": 297
            },
            "context": {
              "type": "function",
              "name": "strip-unit",
              "code": "@if type-of($number) == 'number' and not unitless($number) {\n    @return $number / ($number * 0 + 1);\n}\n\n@return $number;\n",
              "line": {
                "start": 298,
                "end": 304
              }
            },
            "parameter": [
              {
                "type": "number",
                "name": "number"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "Converts <code>$size-in-rem</code> to pixels based on <code>$font-size-base</code>.\n",
                "context": {
                  "type": "function",
                  "name": "rem-to-pixels",
                  "code": "@return strip-unit($size-in-rem) * $font-size-base;\n",
                  "line": {
                    "start": 309,
                    "end": 311
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "font-size-base",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 25,
              "end": 25
            },
            "context": {
              "type": "variable",
              "name": "font-size-base",
              "value": "16px",
              "scope": "default",
              "line": {
                "start": 26,
                "end": 26
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "Converts <code>$size-in-rem</code> to pixels based on <code>$font-size-base</code>.\n",
                "context": {
                  "type": "function",
                  "name": "rem-to-pixels",
                  "code": "@return strip-unit($size-in-rem) * $font-size-base;\n",
                  "line": {
                    "start": 309,
                    "end": 311
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_funcs.scss",
        "name": "_funcs.scss"
      }
    }
  ],
  "mixins": [
    {
      "description": "Utility to clear floats\n",
      "commentRange": {
        "start": 1,
        "end": 1
      },
      "context": {
        "type": "mixin",
        "name": "clearfix",
        "code": "&:before,\n&:after {\n    display:table;\n    clear:both;\n    width:100%;\n    content:'';\n}\n",
        "line": {
          "start": 2,
          "end": 10
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row",
            "code": "@include row-alleys(row, $alley-multiplier);\n@include clearfix();\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
            "line": {
              "start": 286,
              "end": 296
            }
          }
        }
      ]
    },
    {
      "description": "Converts <code>$aspect-width</code> and <code>$aspect-height</code> to the appropriate bottom padding.\n",
      "commentRange": {
        "start": 12,
        "end": 15
      },
      "context": {
        "type": "mixin",
        "name": "aspect-ratio-to-padding",
        "code": "padding-bottom:percentage($aspect-height / $aspect-width);\n",
        "line": {
          "start": 16,
          "end": 18
        }
      },
      "parameter": [
        {
          "type": "number",
          "name": "aspect-width",
          "default": "16"
        },
        {
          "type": "number",
          "name": "aspect-height",
          "default": "9"
        }
      ],
      "access": "private",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "Adds styles for a responsive video container.\n",
          "context": {
            "type": "mixin",
            "name": "video-container",
            "code": "@include aspect-ratio-to-padding($aspect-width, $aspect-height);\n\nposition:relative;\ndisplay:block;\nheight:0;\n\niframe,\nobject,\nembed {\n    position:absolute;\n    top:0;\n    left:0;\n    width:100%;\n    height:100%;\n}\n",
            "line": {
              "start": 23,
              "end": 39
            }
          }
        }
      ]
    },
    {
      "description": "Adds styles for a responsive video container.\n",
      "commentRange": {
        "start": 20,
        "end": 22
      },
      "context": {
        "type": "mixin",
        "name": "video-container",
        "code": "@include aspect-ratio-to-padding($aspect-width, $aspect-height);\n\nposition:relative;\ndisplay:block;\nheight:0;\n\niframe,\nobject,\nembed {\n    position:absolute;\n    top:0;\n    left:0;\n    width:100%;\n    height:100%;\n}\n",
        "line": {
          "start": 23,
          "end": 39
        }
      },
      "parameter": [
        {
          "type": "number",
          "name": "aspect-width",
          "default": "16"
        },
        {
          "type": "number",
          "name": "aspect-height",
          "default": "9"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "aspect-ratio-to-padding",
          "autofill": true,
          "item": {
            "description": "Converts <code>$aspect-width</code> and <code>$aspect-height</code> to the appropriate bottom padding.\n",
            "commentRange": {
              "start": 12,
              "end": 15
            },
            "context": {
              "type": "mixin",
              "name": "aspect-ratio-to-padding",
              "code": "padding-bottom:percentage($aspect-height / $aspect-width);\n",
              "line": {
                "start": 16,
                "end": 18
              }
            },
            "parameter": [
              {
                "type": "number",
                "name": "aspect-width",
                "default": "16"
              },
              {
                "type": "number",
                "name": "aspect-height",
                "default": "9"
              }
            ],
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Adds styles for a responsive video container.\n",
                "context": {
                  "type": "mixin",
                  "name": "video-container",
                  "code": "@include aspect-ratio-to-padding($aspect-width, $aspect-height);\n\nposition:relative;\ndisplay:block;\nheight:0;\n\niframe,\nobject,\nembed {\n    position:absolute;\n    top:0;\n    left:0;\n    width:100%;\n    height:100%;\n}\n",
                  "line": {
                    "start": 23,
                    "end": 39
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Includes <code>@content</code> on screens up to <code>$max-width</code> wide.\n",
      "commentRange": {
        "start": 41,
        "end": 42
      },
      "context": {
        "type": "mixin",
        "name": "max",
        "code": "@media (max-width:$max-width) {\n    @content;\n}\n",
        "line": {
          "start": 43,
          "end": 47
        }
      },
      "parameter": [
        {
          "type": "number",
          "name": "max-width"
        }
      ],
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 49,
        "end": 49
      },
      "context": {
        "type": "mixin",
        "name": "min",
        "code": "@media (min-width:$min-width) {\n    @content;\n}\n",
        "line": {
          "start": 50,
          "end": 54
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "hide",
            "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
            "line": {
              "start": 220,
              "end": 230
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "hide",
            "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
            "line": {
              "start": 220,
              "end": 230
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
            "line": {
              "start": 308,
              "end": 322
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
            "line": {
              "start": 308,
              "end": 322
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 325,
              "end": 351
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 325,
              "end": 351
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 325,
              "end": 351
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 325,
              "end": 351
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 56,
        "end": 56
      },
      "context": {
        "type": "mixin",
        "name": "min-max",
        "code": "@media (min-width:$min-width) and (max-width:$max-width) {\n    @content;\n}\n",
        "line": {
          "start": 57,
          "end": 61
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 63,
        "end": 63
      },
      "context": {
        "type": "mixin",
        "name": "min-s",
        "code": "@media (min-width:$breakpoint-s) {\n    @content;\n}\n",
        "line": {
          "start": 64,
          "end": 68
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "variable",
          "name": "breakpoint-s",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 309,
              "end": 309
            },
            "context": {
              "type": "variable",
              "name": "breakpoint-s",
              "value": "480px",
              "scope": "default",
              "line": {
                "start": 310,
                "end": 310
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "min-s",
                  "code": "@media (min-width:$breakpoint-s) {\n    @content;\n}\n",
                  "line": {
                    "start": 64,
                    "end": 68
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 70,
        "end": 70
      },
      "context": {
        "type": "mixin",
        "name": "min-m",
        "code": "@media (min-width:$breakpoint-m) {\n    @content;\n}\n",
        "line": {
          "start": 71,
          "end": 75
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "variable",
          "name": "breakpoint-m",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 311,
              "end": 311
            },
            "context": {
              "type": "variable",
              "name": "breakpoint-m",
              "value": "768px",
              "scope": "default",
              "line": {
                "start": 312,
                "end": 312
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "min-m",
                  "code": "@media (min-width:$breakpoint-m) {\n    @content;\n}\n",
                  "line": {
                    "start": 71,
                    "end": 75
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 77,
        "end": 77
      },
      "context": {
        "type": "mixin",
        "name": "min-l",
        "code": "@media (min-width:$breakpoint-l) {\n    @content;\n}\n",
        "line": {
          "start": 78,
          "end": 82
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "variable",
          "name": "breakpoint-l",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 313,
              "end": 313
            },
            "context": {
              "type": "variable",
              "name": "breakpoint-l",
              "value": "960px",
              "scope": "default",
              "line": {
                "start": 314,
                "end": 314
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "min-l",
                  "code": "@media (min-width:$breakpoint-l) {\n    @content;\n}\n",
                  "line": {
                    "start": 78,
                    "end": 82
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 84,
        "end": 84
      },
      "context": {
        "type": "mixin",
        "name": "min-xl",
        "code": "@media (min-width:$breakpoint-xl) {\n    @content;\n}\n",
        "line": {
          "start": 85,
          "end": 89
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "variable",
          "name": "breakpoint-xl",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 315,
              "end": 315
            },
            "context": {
              "type": "variable",
              "name": "breakpoint-xl",
              "value": "1200px",
              "scope": "default",
              "line": {
                "start": 316,
                "end": 316
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "min-xl",
                  "code": "@media (min-width:$breakpoint-xl) {\n    @content;\n}\n",
                  "line": {
                    "start": 85,
                    "end": 89
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Includes <code>@content</code> for ie9 and above.\n",
      "commentRange": {
        "start": 91,
        "end": 91
      },
      "context": {
        "type": "mixin",
        "name": "ie9plus",
        "code": "// @formatter:off\n@media (min-width:0\\0) and (min-resolution:+72dpi) {\n    @content;\n}\n// @formatter:on\n",
        "line": {
          "start": 92,
          "end": 98
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Includes <code>@content</code> for ie10 and above.\n",
      "commentRange": {
        "start": 100,
        "end": 100
      },
      "context": {
        "type": "mixin",
        "name": "ie10plus",
        "code": "@media (-ms-high-contrast:none), (-ms-high-contrast:active) {\n    @content;\n}\n",
        "line": {
          "start": 101,
          "end": 105
        }
      },
      "access": "public",
      "content": "",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Removes margins from last children.\n",
      "commentRange": {
        "start": 107,
        "end": 108
      },
      "context": {
        "type": "mixin",
        "name": "control-margins",
        "code": "$scope-y:$scope == vertical or $scope == all;\n$scope-x:$scope == horizontal or $scope == all;\n\n@if $scope-y or $scope == top {\n    &:first-child:not(.f-margins) {\n        margin-top:0 !important;\n    }\n}\n\n@if $scope-x or $scope == right {\n    &:last-child:not(.f-margins) {\n        margin-right:0 !important;\n    }\n}\n\n@if $scope-y or $scope == bottom {\n    &:last-child:not(.f-margins) {\n        margin-bottom:0 !important;\n    }\n}\n\n@if $scope-x or $scope == left {\n    &:first-child:not(.f-margins) {\n        margin-left:0 !important;\n    }\n}\n",
        "line": {
          "start": 109,
          "end": 136
        }
      },
      "parameter": [
        {
          "type": "string",
          "name": "scope",
          "default": "all"
        }
      ],
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
            "line": {
              "start": 139,
              "end": 189
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "h",
            "code": "font-size:map_get($font-sizes, h#{$type});\nfont-family:$font-stack-heading;\nline-height:map_get($line-heights, h#{$type});\n\n@if $margins-multiplier {\n    $margins-multiplier:$margins-multiplier / 100;\n\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $margins-multiplier;\n    margin-bottom:$margin-bottom-h * $margins-multiplier;\n}\n",
            "line": {
              "start": 192,
              "end": 205
            }
          }
        }
      ]
    },
    {
      "description": "Sets default vertical margins for selected elements\n",
      "commentRange": {
        "start": 138,
        "end": 138
      },
      "context": {
        "type": "mixin",
        "name": "vertical-margins",
        "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
        "line": {
          "start": 139,
          "end": 189
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "control-margins",
          "autofill": true,
          "item": {
            "description": "Removes margins from last children.\n",
            "commentRange": {
              "start": 107,
              "end": 108
            },
            "context": {
              "type": "mixin",
              "name": "control-margins",
              "code": "$scope-y:$scope == vertical or $scope == all;\n$scope-x:$scope == horizontal or $scope == all;\n\n@if $scope-y or $scope == top {\n    &:first-child:not(.f-margins) {\n        margin-top:0 !important;\n    }\n}\n\n@if $scope-x or $scope == right {\n    &:last-child:not(.f-margins) {\n        margin-right:0 !important;\n    }\n}\n\n@if $scope-y or $scope == bottom {\n    &:last-child:not(.f-margins) {\n        margin-bottom:0 !important;\n    }\n}\n\n@if $scope-x or $scope == left {\n    &:first-child:not(.f-margins) {\n        margin-left:0 !important;\n    }\n}\n",
              "line": {
                "start": 109,
                "end": 136
              }
            },
            "parameter": [
              {
                "type": "string",
                "name": "scope",
                "default": "all"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                  "line": {
                    "start": 139,
                    "end": 189
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-size:map_get($font-sizes, h#{$type});\nfont-family:$font-stack-heading;\nline-height:map_get($line-heights, h#{$type});\n\n@if $margins-multiplier {\n    $margins-multiplier:$margins-multiplier / 100;\n\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $margins-multiplier;\n    margin-bottom:$margin-bottom-h * $margins-multiplier;\n}\n",
                  "line": {
                    "start": 192,
                    "end": 205
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "margin",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 209,
              "end": 209
            },
            "context": {
              "type": "variable",
              "name": "margin",
              "value": "$font-size-general * $line-height-general",
              "scope": "default",
              "line": {
                "start": 210,
                "end": 210
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                  "line": {
                    "start": 139,
                    "end": 189
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                  "line": {
                    "start": 139,
                    "end": 189
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                  "line": {
                    "start": 139,
                    "end": 189
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                  "line": {
                    "start": 139,
                    "end": 189
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgb",
                  "code": "@if $important == true {\n    margin-bottom:$margin * ($multiplier / 100) !important;\n} @else {\n    margin-bottom:$margin * ($multiplier / 100);\n}\n",
                  "line": {
                    "start": 233,
                    "end": 239
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgb",
                  "code": "@if $important == true {\n    margin-bottom:$margin * ($multiplier / 100) !important;\n} @else {\n    margin-bottom:$margin * ($multiplier / 100);\n}\n",
                  "line": {
                    "start": 233,
                    "end": 239
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "margin-top-h",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 213,
              "end": 213
            },
            "context": {
              "type": "variable",
              "name": "margin-top-h",
              "value": "$margin * 1.25",
              "scope": "default",
              "line": {
                "start": 214,
                "end": 214
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                  "line": {
                    "start": 139,
                    "end": 189
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-size:map_get($font-sizes, h#{$type});\nfont-family:$font-stack-heading;\nline-height:map_get($line-heights, h#{$type});\n\n@if $margins-multiplier {\n    $margins-multiplier:$margins-multiplier / 100;\n\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $margins-multiplier;\n    margin-bottom:$margin-bottom-h * $margins-multiplier;\n}\n",
                  "line": {
                    "start": 192,
                    "end": 205
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "margin-bottom-h",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 215,
              "end": 215
            },
            "context": {
              "type": "variable",
              "name": "margin-bottom-h",
              "value": "$margin * 0.625",
              "scope": "default",
              "line": {
                "start": 216,
                "end": 216
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                  "line": {
                    "start": 139,
                    "end": 189
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-size:map_get($font-sizes, h#{$type});\nfont-family:$font-stack-heading;\nline-height:map_get($line-heights, h#{$type});\n\n@if $margins-multiplier {\n    $margins-multiplier:$margins-multiplier / 100;\n\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $margins-multiplier;\n    margin-bottom:$margin-bottom-h * $margins-multiplier;\n}\n",
                  "line": {
                    "start": 192,
                    "end": 205
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 191,
        "end": 191
      },
      "context": {
        "type": "mixin",
        "name": "h",
        "code": "font-size:map_get($font-sizes, h#{$type});\nfont-family:$font-stack-heading;\nline-height:map_get($line-heights, h#{$type});\n\n@if $margins-multiplier {\n    $margins-multiplier:$margins-multiplier / 100;\n\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $margins-multiplier;\n    margin-bottom:$margin-bottom-h * $margins-multiplier;\n}\n",
        "line": {
          "start": 192,
          "end": 205
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "control-margins",
          "autofill": true,
          "item": {
            "description": "Removes margins from last children.\n",
            "commentRange": {
              "start": 107,
              "end": 108
            },
            "context": {
              "type": "mixin",
              "name": "control-margins",
              "code": "$scope-y:$scope == vertical or $scope == all;\n$scope-x:$scope == horizontal or $scope == all;\n\n@if $scope-y or $scope == top {\n    &:first-child:not(.f-margins) {\n        margin-top:0 !important;\n    }\n}\n\n@if $scope-x or $scope == right {\n    &:last-child:not(.f-margins) {\n        margin-right:0 !important;\n    }\n}\n\n@if $scope-y or $scope == bottom {\n    &:last-child:not(.f-margins) {\n        margin-bottom:0 !important;\n    }\n}\n\n@if $scope-x or $scope == left {\n    &:first-child:not(.f-margins) {\n        margin-left:0 !important;\n    }\n}\n",
              "line": {
                "start": 109,
                "end": 136
              }
            },
            "parameter": [
              {
                "type": "string",
                "name": "scope",
                "default": "all"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                  "line": {
                    "start": 139,
                    "end": 189
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-size:map_get($font-sizes, h#{$type});\nfont-family:$font-stack-heading;\nline-height:map_get($line-heights, h#{$type});\n\n@if $margins-multiplier {\n    $margins-multiplier:$margins-multiplier / 100;\n\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $margins-multiplier;\n    margin-bottom:$margin-bottom-h * $margins-multiplier;\n}\n",
                  "line": {
                    "start": 192,
                    "end": 205
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "font-sizes",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 50,
              "end": 50
            },
            "context": {
              "type": "variable",
              "name": "font-sizes",
              "value": "map-merge((\n    base:$font-size-base,\n    general:$font-size-general,\n    big:$font-size-big,\n    xbig:$font-size-xbig,\n    xxbig:$font-size-xxbig,\n    small:$font-size-small,\n    xsmall:$font-size-xsmall,\n    xxsmall:$font-size-xxsmall,\n    h1:$font-size-h1,\n    h2:$font-size-h2,\n    h3:$font-size-h3,\n    h4:$font-size-h4,\n), $font-sizes)",
              "scope": "private",
              "line": {
                "start": 51,
                "end": 64
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-size:map_get($font-sizes, h#{$type});\nfont-family:$font-stack-heading;\nline-height:map_get($line-heights, h#{$type});\n\n@if $margins-multiplier {\n    $margins-multiplier:$margins-multiplier / 100;\n\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $margins-multiplier;\n    margin-bottom:$margin-bottom-h * $margins-multiplier;\n}\n",
                  "line": {
                    "start": 192,
                    "end": 205
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "font-stack-heading",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 12,
              "end": 12
            },
            "context": {
              "type": "variable",
              "name": "font-stack-heading",
              "value": "$font-stack-general",
              "scope": "default",
              "line": {
                "start": 13,
                "end": 13
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-size:map_get($font-sizes, h#{$type});\nfont-family:$font-stack-heading;\nline-height:map_get($line-heights, h#{$type});\n\n@if $margins-multiplier {\n    $margins-multiplier:$margins-multiplier / 100;\n\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $margins-multiplier;\n    margin-bottom:$margin-bottom-h * $margins-multiplier;\n}\n",
                  "line": {
                    "start": 192,
                    "end": 205
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "line-heights",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 89,
              "end": 89
            },
            "context": {
              "type": "variable",
              "name": "line-heights",
              "value": "map-merge((\n    general:$line-height-general,\n    h1:$line-height-h1,\n    h2:$line-height-h2,\n    h3:$line-height-h3,\n    h4:$line-height-h4,\n), $line-heights)",
              "scope": "private",
              "line": {
                "start": 90,
                "end": 96
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-size:map_get($font-sizes, h#{$type});\nfont-family:$font-stack-heading;\nline-height:map_get($line-heights, h#{$type});\n\n@if $margins-multiplier {\n    $margins-multiplier:$margins-multiplier / 100;\n\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $margins-multiplier;\n    margin-bottom:$margin-bottom-h * $margins-multiplier;\n}\n",
                  "line": {
                    "start": 192,
                    "end": 205
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "margin-top-h",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 213,
              "end": 213
            },
            "context": {
              "type": "variable",
              "name": "margin-top-h",
              "value": "$margin * 1.25",
              "scope": "default",
              "line": {
                "start": 214,
                "end": 214
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                  "line": {
                    "start": 139,
                    "end": 189
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-size:map_get($font-sizes, h#{$type});\nfont-family:$font-stack-heading;\nline-height:map_get($line-heights, h#{$type});\n\n@if $margins-multiplier {\n    $margins-multiplier:$margins-multiplier / 100;\n\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $margins-multiplier;\n    margin-bottom:$margin-bottom-h * $margins-multiplier;\n}\n",
                  "line": {
                    "start": 192,
                    "end": 205
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "margin-bottom-h",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 215,
              "end": 215
            },
            "context": {
              "type": "variable",
              "name": "margin-bottom-h",
              "value": "$margin * 0.625",
              "scope": "default",
              "line": {
                "start": 216,
                "end": 216
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                  "line": {
                    "start": 139,
                    "end": 189
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "h",
                  "code": "font-size:map_get($font-sizes, h#{$type});\nfont-family:$font-stack-heading;\nline-height:map_get($line-heights, h#{$type});\n\n@if $margins-multiplier {\n    $margins-multiplier:$margins-multiplier / 100;\n\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $margins-multiplier;\n    margin-bottom:$margin-bottom-h * $margins-multiplier;\n}\n",
                  "line": {
                    "start": 192,
                    "end": 205
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 207,
        "end": 207
      },
      "context": {
        "type": "mixin",
        "name": "ellipsis",
        "code": "overflow:hidden;\ntext-overflow:ellipsis;\nwhite-space:nowrap;\n",
        "line": {
          "start": 208,
          "end": 212
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "Removes border radius\n",
      "commentRange": {
        "start": 214,
        "end": 214
      },
      "context": {
        "type": "mixin",
        "name": "sq",
        "code": "border-radius:0;\n",
        "line": {
          "start": 215,
          "end": 217
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 219,
        "end": 219
      },
      "context": {
        "type": "mixin",
        "name": "hide",
        "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
        "line": {
          "start": 220,
          "end": 230
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "min",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 49,
              "end": 49
            },
            "context": {
              "type": "mixin",
              "name": "min",
              "code": "@media (min-width:$min-width) {\n    @content;\n}\n",
              "line": {
                "start": 50,
                "end": 54
              }
            },
            "access": "public",
            "content": "",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                  "line": {
                    "start": 308,
                    "end": 322
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                  "line": {
                    "start": 308,
                    "end": 322
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unit-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
            "commentRange": {
              "start": 108,
              "end": 110
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unit-number",
              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 111,
                "end": 121
              }
            },
            "parameter": [
              {
                "type": "any",
                "name": "value"
              },
              {
                "type": "bool",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 93,
                    "end": 95
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 96,
                      "end": 106
                    }
                  },
                  "parameter": [
                    {
                      "type": "any",
                      "name": "value"
                    },
                    {
                      "type": "bool",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 27,
                          "end": 28
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 29,
                            "end": 31
                          }
                        },
                        "parameter": [
                          {
                            "type": "any",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 13,
                          "end": 15
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 16,
                            "end": 20
                          }
                        },
                        "parameter": [
                          {
                            "type": "any",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 142,
                                "end": 152
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 229,
                          "end": 243
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 13,
                    "end": 15
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 16,
                      "end": 20
                    }
                  },
                  "parameter": [
                    {
                      "type": "any",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 142,
                          "end": 152
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "variable",
                "name": "lengths",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 371,
                    "end": 371
                  },
                  "context": {
                    "type": "variable",
                    "name": "lengths",
                    "value": "join($lengths-absolute, $lengths-relative)",
                    "scope": "private",
                    "line": {
                      "start": 372,
                      "end": 372
                    }
                  },
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "file": {
                    "path": "_vars.scss",
                    "name": "_vars.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                  "line": {
                    "start": 308,
                    "end": 322
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "breakpoints",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 318,
              "end": 318
            },
            "context": {
              "type": "variable",
              "name": "breakpoints",
              "value": "map_merge((\n    s:$breakpoint-s,\n    m:$breakpoint-m,\n    l:$breakpoint-l,\n    xl:$breakpoint-xl,\n), $breakpoints)",
              "scope": "private",
              "line": {
                "start": 319,
                "end": 324
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                  "line": {
                    "start": 308,
                    "end": 322
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                  "line": {
                    "start": 308,
                    "end": 322
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 232,
        "end": 232
      },
      "context": {
        "type": "mixin",
        "name": "mgb",
        "code": "@if $important == true {\n    margin-bottom:$margin * ($multiplier / 100) !important;\n} @else {\n    margin-bottom:$margin * ($multiplier / 100);\n}\n",
        "line": {
          "start": 233,
          "end": 239
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "variable",
          "name": "margin",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 209,
              "end": 209
            },
            "context": {
              "type": "variable",
              "name": "margin",
              "value": "$font-size-general * $line-height-general",
              "scope": "default",
              "line": {
                "start": 210,
                "end": 210
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                  "line": {
                    "start": 139,
                    "end": 189
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                  "line": {
                    "start": 139,
                    "end": 189
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                  "line": {
                    "start": 139,
                    "end": 189
                  }
                }
              },
              {
                "description": "Sets default vertical margins for selected elements\n",
                "context": {
                  "type": "mixin",
                  "name": "vertical-margins",
                  "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                  "line": {
                    "start": 139,
                    "end": 189
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgb",
                  "code": "@if $important == true {\n    margin-bottom:$margin * ($multiplier / 100) !important;\n} @else {\n    margin-bottom:$margin * ($multiplier / 100);\n}\n",
                  "line": {
                    "start": 233,
                    "end": 239
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgb",
                  "code": "@if $important == true {\n    margin-bottom:$margin * ($multiplier / 100) !important;\n} @else {\n    margin-bottom:$margin * ($multiplier / 100);\n}\n",
                  "line": {
                    "start": 233,
                    "end": 239
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "mgbch",
            "code": "> * {\n    @include mgb($multiplier, $important);\n}\n",
            "line": {
              "start": 242,
              "end": 246
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "mgb-row",
            "code": "&:not(:last-child):after,\n&.f-margins:last-child:after {\n    @include mgb($multiplier, $important);\n}\n",
            "line": {
              "start": 249,
              "end": 254
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "mgbch-row",
            "code": "@include mgb(-$multiplier, $important);\n\n> * {\n    @include mgb($multiplier, $important);\n}\n",
            "line": {
              "start": 257,
              "end": 263
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "mgbch-row",
            "code": "@include mgb(-$multiplier, $important);\n\n> * {\n    @include mgb($multiplier, $important);\n}\n",
            "line": {
              "start": 257,
              "end": 263
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 241,
        "end": 241
      },
      "context": {
        "type": "mixin",
        "name": "mgbch",
        "code": "> * {\n    @include mgb($multiplier, $important);\n}\n",
        "line": {
          "start": 242,
          "end": 246
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "mgb",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 232,
              "end": 232
            },
            "context": {
              "type": "mixin",
              "name": "mgb",
              "code": "@if $important == true {\n    margin-bottom:$margin * ($multiplier / 100) !important;\n} @else {\n    margin-bottom:$margin * ($multiplier / 100);\n}\n",
              "line": {
                "start": 233,
                "end": 239
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "variable",
                "name": "margin",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 209,
                    "end": 209
                  },
                  "context": {
                    "type": "variable",
                    "name": "margin",
                    "value": "$font-size-general * $line-height-general",
                    "scope": "default",
                    "line": {
                      "start": 210,
                      "end": 210
                    }
                  },
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "file": {
                    "path": "_vars.scss",
                    "name": "_vars.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Sets default vertical margins for selected elements\n",
                      "context": {
                        "type": "mixin",
                        "name": "vertical-margins",
                        "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                        "line": {
                          "start": 139,
                          "end": 189
                        }
                      }
                    },
                    {
                      "description": "Sets default vertical margins for selected elements\n",
                      "context": {
                        "type": "mixin",
                        "name": "vertical-margins",
                        "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                        "line": {
                          "start": 139,
                          "end": 189
                        }
                      }
                    },
                    {
                      "description": "Sets default vertical margins for selected elements\n",
                      "context": {
                        "type": "mixin",
                        "name": "vertical-margins",
                        "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                        "line": {
                          "start": 139,
                          "end": 189
                        }
                      }
                    },
                    {
                      "description": "Sets default vertical margins for selected elements\n",
                      "context": {
                        "type": "mixin",
                        "name": "vertical-margins",
                        "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                        "line": {
                          "start": 139,
                          "end": 189
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "mgb",
                        "code": "@if $important == true {\n    margin-bottom:$margin * ($multiplier / 100) !important;\n} @else {\n    margin-bottom:$margin * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 233,
                          "end": 239
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "mgb",
                        "code": "@if $important == true {\n    margin-bottom:$margin * ($multiplier / 100) !important;\n} @else {\n    margin-bottom:$margin * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 233,
                          "end": 239
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch",
                  "code": "> * {\n    @include mgb($multiplier, $important);\n}\n",
                  "line": {
                    "start": 242,
                    "end": 246
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgb-row",
                  "code": "&:not(:last-child):after,\n&.f-margins:last-child:after {\n    @include mgb($multiplier, $important);\n}\n",
                  "line": {
                    "start": 249,
                    "end": 254
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch-row",
                  "code": "@include mgb(-$multiplier, $important);\n\n> * {\n    @include mgb($multiplier, $important);\n}\n",
                  "line": {
                    "start": 257,
                    "end": 263
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch-row",
                  "code": "@include mgb(-$multiplier, $important);\n\n> * {\n    @include mgb($multiplier, $important);\n}\n",
                  "line": {
                    "start": 257,
                    "end": 263
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 248,
        "end": 248
      },
      "context": {
        "type": "mixin",
        "name": "mgb-row",
        "code": "&:not(:last-child):after,\n&.f-margins:last-child:after {\n    @include mgb($multiplier, $important);\n}\n",
        "line": {
          "start": 249,
          "end": 254
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "mgb",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 232,
              "end": 232
            },
            "context": {
              "type": "mixin",
              "name": "mgb",
              "code": "@if $important == true {\n    margin-bottom:$margin * ($multiplier / 100) !important;\n} @else {\n    margin-bottom:$margin * ($multiplier / 100);\n}\n",
              "line": {
                "start": 233,
                "end": 239
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "variable",
                "name": "margin",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 209,
                    "end": 209
                  },
                  "context": {
                    "type": "variable",
                    "name": "margin",
                    "value": "$font-size-general * $line-height-general",
                    "scope": "default",
                    "line": {
                      "start": 210,
                      "end": 210
                    }
                  },
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "file": {
                    "path": "_vars.scss",
                    "name": "_vars.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Sets default vertical margins for selected elements\n",
                      "context": {
                        "type": "mixin",
                        "name": "vertical-margins",
                        "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                        "line": {
                          "start": 139,
                          "end": 189
                        }
                      }
                    },
                    {
                      "description": "Sets default vertical margins for selected elements\n",
                      "context": {
                        "type": "mixin",
                        "name": "vertical-margins",
                        "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                        "line": {
                          "start": 139,
                          "end": 189
                        }
                      }
                    },
                    {
                      "description": "Sets default vertical margins for selected elements\n",
                      "context": {
                        "type": "mixin",
                        "name": "vertical-margins",
                        "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                        "line": {
                          "start": 139,
                          "end": 189
                        }
                      }
                    },
                    {
                      "description": "Sets default vertical margins for selected elements\n",
                      "context": {
                        "type": "mixin",
                        "name": "vertical-margins",
                        "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                        "line": {
                          "start": 139,
                          "end": 189
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "mgb",
                        "code": "@if $important == true {\n    margin-bottom:$margin * ($multiplier / 100) !important;\n} @else {\n    margin-bottom:$margin * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 233,
                          "end": 239
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "mgb",
                        "code": "@if $important == true {\n    margin-bottom:$margin * ($multiplier / 100) !important;\n} @else {\n    margin-bottom:$margin * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 233,
                          "end": 239
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch",
                  "code": "> * {\n    @include mgb($multiplier, $important);\n}\n",
                  "line": {
                    "start": 242,
                    "end": 246
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgb-row",
                  "code": "&:not(:last-child):after,\n&.f-margins:last-child:after {\n    @include mgb($multiplier, $important);\n}\n",
                  "line": {
                    "start": 249,
                    "end": 254
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch-row",
                  "code": "@include mgb(-$multiplier, $important);\n\n> * {\n    @include mgb($multiplier, $important);\n}\n",
                  "line": {
                    "start": 257,
                    "end": 263
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch-row",
                  "code": "@include mgb(-$multiplier, $important);\n\n> * {\n    @include mgb($multiplier, $important);\n}\n",
                  "line": {
                    "start": 257,
                    "end": 263
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 256,
        "end": 256
      },
      "context": {
        "type": "mixin",
        "name": "mgbch-row",
        "code": "@include mgb(-$multiplier, $important);\n\n> * {\n    @include mgb($multiplier, $important);\n}\n",
        "line": {
          "start": 257,
          "end": 263
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "mgb",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 232,
              "end": 232
            },
            "context": {
              "type": "mixin",
              "name": "mgb",
              "code": "@if $important == true {\n    margin-bottom:$margin * ($multiplier / 100) !important;\n} @else {\n    margin-bottom:$margin * ($multiplier / 100);\n}\n",
              "line": {
                "start": 233,
                "end": 239
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "variable",
                "name": "margin",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 209,
                    "end": 209
                  },
                  "context": {
                    "type": "variable",
                    "name": "margin",
                    "value": "$font-size-general * $line-height-general",
                    "scope": "default",
                    "line": {
                      "start": 210,
                      "end": 210
                    }
                  },
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "file": {
                    "path": "_vars.scss",
                    "name": "_vars.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Sets default vertical margins for selected elements\n",
                      "context": {
                        "type": "mixin",
                        "name": "vertical-margins",
                        "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                        "line": {
                          "start": 139,
                          "end": 189
                        }
                      }
                    },
                    {
                      "description": "Sets default vertical margins for selected elements\n",
                      "context": {
                        "type": "mixin",
                        "name": "vertical-margins",
                        "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                        "line": {
                          "start": 139,
                          "end": 189
                        }
                      }
                    },
                    {
                      "description": "Sets default vertical margins for selected elements\n",
                      "context": {
                        "type": "mixin",
                        "name": "vertical-margins",
                        "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                        "line": {
                          "start": 139,
                          "end": 189
                        }
                      }
                    },
                    {
                      "description": "Sets default vertical margins for selected elements\n",
                      "context": {
                        "type": "mixin",
                        "name": "vertical-margins",
                        "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
                        "line": {
                          "start": 139,
                          "end": 189
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "mgb",
                        "code": "@if $important == true {\n    margin-bottom:$margin * ($multiplier / 100) !important;\n} @else {\n    margin-bottom:$margin * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 233,
                          "end": 239
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "mgb",
                        "code": "@if $important == true {\n    margin-bottom:$margin * ($multiplier / 100) !important;\n} @else {\n    margin-bottom:$margin * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 233,
                          "end": 239
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch",
                  "code": "> * {\n    @include mgb($multiplier, $important);\n}\n",
                  "line": {
                    "start": 242,
                    "end": 246
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgb-row",
                  "code": "&:not(:last-child):after,\n&.f-margins:last-child:after {\n    @include mgb($multiplier, $important);\n}\n",
                  "line": {
                    "start": 249,
                    "end": 254
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch-row",
                  "code": "@include mgb(-$multiplier, $important);\n\n> * {\n    @include mgb($multiplier, $important);\n}\n",
                  "line": {
                    "start": 257,
                    "end": 263
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "mgbch-row",
                  "code": "@include mgb(-$multiplier, $important);\n\n> * {\n    @include mgb($multiplier, $important);\n}\n",
                  "line": {
                    "start": 257,
                    "end": 263
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 265,
        "end": 265
      },
      "context": {
        "type": "mixin",
        "name": "row-alleys",
        "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
        "line": {
          "start": 266,
          "end": 283
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "function",
          "name": "is-nonneg-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
            "commentRange": {
              "start": 123,
              "end": 125
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unitless-number",
              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
              "line": {
                "start": 126,
                "end": 136
              }
            },
            "parameter": [
              {
                "type": "any",
                "name": "value"
              },
              {
                "type": "bool",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 93,
                    "end": 95
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 96,
                      "end": 106
                    }
                  },
                  "parameter": [
                    {
                      "type": "any",
                      "name": "value"
                    },
                    {
                      "type": "bool",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 27,
                          "end": 28
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 29,
                            "end": 31
                          }
                        },
                        "parameter": [
                          {
                            "type": "any",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 13,
                          "end": 15
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 16,
                            "end": 20
                          }
                        },
                        "parameter": [
                          {
                            "type": "any",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 142,
                                "end": 152
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 229,
                          "end": 243
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 13,
                    "end": 15
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 16,
                      "end": 20
                    }
                  },
                  "parameter": [
                    {
                      "type": "any",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 142,
                          "end": 152
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                  "line": {
                    "start": 266,
                    "end": 283
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                  "line": {
                    "start": 308,
                    "end": 322
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "alley-sizes",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 280,
              "end": 280
            },
            "context": {
              "type": "variable",
              "name": "alley-sizes",
              "value": "map_merge((\n    noalley: 0,\n    tightest: 25,\n    tighter: 50,\n    tight: 75,\n    comfy: 100,\n    loose: 125,\n    looser: 150,\n    loosest: 175,\n), $alley-sizes)",
              "scope": "private",
              "line": {
                "start": 281,
                "end": 290
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                  "line": {
                    "start": 266,
                    "end": 283
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                  "line": {
                    "start": 266,
                    "end": 283
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                  "line": {
                    "start": 266,
                    "end": 283
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                  "line": {
                    "start": 308,
                    "end": 322
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "alley",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 217,
              "end": 217
            },
            "context": {
              "type": "variable",
              "name": "alley",
              "value": "30px",
              "scope": "default",
              "line": {
                "start": 218,
                "end": 218
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                  "line": {
                    "start": 266,
                    "end": 283
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                  "line": {
                    "start": 266,
                    "end": 283
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                  "line": {
                    "start": 266,
                    "end": 283
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                  "line": {
                    "start": 266,
                    "end": 283
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                  "line": {
                    "start": 266,
                    "end": 283
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                  "line": {
                    "start": 266,
                    "end": 283
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row",
            "code": "@include row-alleys(row, $alley-multiplier);\n@include clearfix();\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
            "line": {
              "start": 286,
              "end": 296
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row",
            "code": "@include row-alleys(row, $alley-multiplier);\n@include clearfix();\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
            "line": {
              "start": 286,
              "end": 296
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley-styles",
            "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
            "line": {
              "start": 299,
              "end": 305
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley-styles",
            "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
            "line": {
              "start": 299,
              "end": 305
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 285,
        "end": 285
      },
      "context": {
        "type": "mixin",
        "name": "row",
        "code": "@include row-alleys(row, $alley-multiplier);\n@include clearfix();\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
        "line": {
          "start": 286,
          "end": 296
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "row-alleys",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 265,
              "end": 265
            },
            "context": {
              "type": "mixin",
              "name": "row-alleys",
              "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
              "line": {
                "start": 266,
                "end": 283
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-unitless-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                  "commentRange": {
                    "start": 123,
                    "end": 125
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-unitless-number",
                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 126,
                      "end": 136
                    }
                  },
                  "parameter": [
                    {
                      "type": "any",
                      "name": "value"
                    },
                    {
                      "type": "bool",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-nonneg-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                        "commentRange": {
                          "start": 93,
                          "end": 95
                        },
                        "context": {
                          "type": "function",
                          "name": "is-nonneg-number",
                          "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                          "line": {
                            "start": 96,
                            "end": 106
                          }
                        },
                        "parameter": [
                          {
                            "type": "any",
                            "name": "value"
                          },
                          {
                            "type": "bool",
                            "name": "warn",
                            "default": "false"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [
                          {
                            "type": "function",
                            "name": "is-number",
                            "autofill": true,
                            "item": {
                              "description": "Checks if <code>$value</code> is a number.\n",
                              "commentRange": {
                                "start": 27,
                                "end": 28
                              },
                              "context": {
                                "type": "function",
                                "name": "is-number",
                                "code": "@return type-of($value) == number;\n",
                                "line": {
                                  "start": 29,
                                  "end": 31
                                }
                              },
                              "parameter": [
                                {
                                  "type": "any",
                                  "name": "value"
                                }
                              ],
                              "access": "public",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 66,
                                      "end": 76
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 81,
                                      "end": 91
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 96,
                                      "end": 106
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 254,
                                      "end": 280
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 254,
                                      "end": 280
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "function",
                            "name": "show-param-value",
                            "autofill": true,
                            "item": {
                              "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                              "commentRange": {
                                "start": 13,
                                "end": 15
                              },
                              "context": {
                                "type": "function",
                                "name": "show-param-value",
                                "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                "line": {
                                  "start": 16,
                                  "end": 20
                                }
                              },
                              "parameter": [
                                {
                                  "type": "any",
                                  "name": "value"
                                }
                              ],
                              "access": "private",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 66,
                                      "end": 76
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 81,
                                      "end": 91
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 96,
                                      "end": 106
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 111,
                                      "end": 121
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 126,
                                      "end": 136
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-in-list",
                                    "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 142,
                                      "end": 152
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "auto-color",
                              "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                              "line": {
                                "start": 229,
                                "end": 243
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 13,
                          "end": 15
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 16,
                            "end": 20
                          }
                        },
                        "parameter": [
                          {
                            "type": "any",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 142,
                                "end": 152
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 266,
                          "end": 283
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley",
                        "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                        "line": {
                          "start": 308,
                          "end": 322
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "col-width",
                        "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                        "line": {
                          "start": 325,
                          "end": 351
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "variable",
                "name": "alley-sizes",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 280,
                    "end": 280
                  },
                  "context": {
                    "type": "variable",
                    "name": "alley-sizes",
                    "value": "map_merge((\n    noalley: 0,\n    tightest: 25,\n    tighter: 50,\n    tight: 75,\n    comfy: 100,\n    loose: 125,\n    looser: 150,\n    loosest: 175,\n), $alley-sizes)",
                    "scope": "private",
                    "line": {
                      "start": 281,
                      "end": 290
                    }
                  },
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "file": {
                    "path": "_vars.scss",
                    "name": "_vars.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 266,
                          "end": 283
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 266,
                          "end": 283
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 266,
                          "end": 283
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley",
                        "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                        "line": {
                          "start": 308,
                          "end": 322
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "variable",
                "name": "alley",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 217,
                    "end": 217
                  },
                  "context": {
                    "type": "variable",
                    "name": "alley",
                    "value": "30px",
                    "scope": "default",
                    "line": {
                      "start": 218,
                      "end": 218
                    }
                  },
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "file": {
                    "path": "_vars.scss",
                    "name": "_vars.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 266,
                          "end": 283
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 266,
                          "end": 283
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 266,
                          "end": 283
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 266,
                          "end": 283
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 266,
                          "end": 283
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 266,
                          "end": 283
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row",
                  "code": "@include row-alleys(row, $alley-multiplier);\n@include clearfix();\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 286,
                    "end": 296
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row",
                  "code": "@include row-alleys(row, $alley-multiplier);\n@include clearfix();\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 286,
                    "end": 296
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley-styles",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 299,
                    "end": 305
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley-styles",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 299,
                    "end": 305
                  }
                }
              }
            ]
          }
        },
        {
          "type": "mixin",
          "name": "clearfix",
          "autofill": true,
          "item": {
            "description": "Utility to clear floats\n",
            "commentRange": {
              "start": 1,
              "end": 1
            },
            "context": {
              "type": "mixin",
              "name": "clearfix",
              "code": "&:before,\n&:after {\n    display:table;\n    clear:both;\n    width:100%;\n    content:'';\n}\n",
              "line": {
                "start": 2,
                "end": 10
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row",
                  "code": "@include row-alleys(row, $alley-multiplier);\n@include clearfix();\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 286,
                    "end": 296
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 298,
        "end": 298
      },
      "context": {
        "type": "mixin",
        "name": "row-alley-styles",
        "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
        "line": {
          "start": 299,
          "end": 305
        }
      },
      "access": "private",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "row-alleys",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 265,
              "end": 265
            },
            "context": {
              "type": "mixin",
              "name": "row-alleys",
              "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
              "line": {
                "start": 266,
                "end": 283
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-unitless-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                  "commentRange": {
                    "start": 123,
                    "end": 125
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-unitless-number",
                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 126,
                      "end": 136
                    }
                  },
                  "parameter": [
                    {
                      "type": "any",
                      "name": "value"
                    },
                    {
                      "type": "bool",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-nonneg-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                        "commentRange": {
                          "start": 93,
                          "end": 95
                        },
                        "context": {
                          "type": "function",
                          "name": "is-nonneg-number",
                          "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                          "line": {
                            "start": 96,
                            "end": 106
                          }
                        },
                        "parameter": [
                          {
                            "type": "any",
                            "name": "value"
                          },
                          {
                            "type": "bool",
                            "name": "warn",
                            "default": "false"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [
                          {
                            "type": "function",
                            "name": "is-number",
                            "autofill": true,
                            "item": {
                              "description": "Checks if <code>$value</code> is a number.\n",
                              "commentRange": {
                                "start": 27,
                                "end": 28
                              },
                              "context": {
                                "type": "function",
                                "name": "is-number",
                                "code": "@return type-of($value) == number;\n",
                                "line": {
                                  "start": 29,
                                  "end": 31
                                }
                              },
                              "parameter": [
                                {
                                  "type": "any",
                                  "name": "value"
                                }
                              ],
                              "access": "public",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 66,
                                      "end": 76
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 81,
                                      "end": 91
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 96,
                                      "end": 106
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 254,
                                      "end": 280
                                    }
                                  }
                                },
                                {
                                  "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "decimal-round",
                                    "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                    "line": {
                                      "start": 254,
                                      "end": 280
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "function",
                            "name": "show-param-value",
                            "autofill": true,
                            "item": {
                              "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                              "commentRange": {
                                "start": 13,
                                "end": 15
                              },
                              "context": {
                                "type": "function",
                                "name": "show-param-value",
                                "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                "line": {
                                  "start": 16,
                                  "end": 20
                                }
                              },
                              "parameter": [
                                {
                                  "type": "any",
                                  "name": "value"
                                }
                              ],
                              "access": "private",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 66,
                                      "end": 76
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 81,
                                      "end": 91
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 96,
                                      "end": 106
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 111,
                                      "end": 121
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 126,
                                      "end": 136
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-in-list",
                                    "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 142,
                                      "end": 152
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "auto-color",
                              "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                              "line": {
                                "start": 229,
                                "end": 243
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 13,
                          "end": 15
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 16,
                            "end": 20
                          }
                        },
                        "parameter": [
                          {
                            "type": "any",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 142,
                                "end": 152
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 266,
                          "end": 283
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley",
                        "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                        "line": {
                          "start": 308,
                          "end": 322
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "col-width",
                        "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                        "line": {
                          "start": 325,
                          "end": 351
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "variable",
                "name": "alley-sizes",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 280,
                    "end": 280
                  },
                  "context": {
                    "type": "variable",
                    "name": "alley-sizes",
                    "value": "map_merge((\n    noalley: 0,\n    tightest: 25,\n    tighter: 50,\n    tight: 75,\n    comfy: 100,\n    loose: 125,\n    looser: 150,\n    loosest: 175,\n), $alley-sizes)",
                    "scope": "private",
                    "line": {
                      "start": 281,
                      "end": 290
                    }
                  },
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "file": {
                    "path": "_vars.scss",
                    "name": "_vars.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 266,
                          "end": 283
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 266,
                          "end": 283
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 266,
                          "end": 283
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley",
                        "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                        "line": {
                          "start": 308,
                          "end": 322
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "variable",
                "name": "alley",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 217,
                    "end": 217
                  },
                  "context": {
                    "type": "variable",
                    "name": "alley",
                    "value": "30px",
                    "scope": "default",
                    "line": {
                      "start": 218,
                      "end": 218
                    }
                  },
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "file": {
                    "path": "_vars.scss",
                    "name": "_vars.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 266,
                          "end": 283
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 266,
                          "end": 283
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 266,
                          "end": 283
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 266,
                          "end": 283
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 266,
                          "end": 283
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alleys",
                        "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                        "line": {
                          "start": 266,
                          "end": 283
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row",
                  "code": "@include row-alleys(row, $alley-multiplier);\n@include clearfix();\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 286,
                    "end": 296
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row",
                  "code": "@include row-alleys(row, $alley-multiplier);\n@include clearfix();\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 286,
                    "end": 296
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley-styles",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 299,
                    "end": 305
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley-styles",
                  "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                  "line": {
                    "start": 299,
                    "end": 305
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
            "line": {
              "start": 308,
              "end": 322
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
            "line": {
              "start": 308,
              "end": 322
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
            "line": {
              "start": 308,
              "end": 322
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 307,
        "end": 307
      },
      "context": {
        "type": "mixin",
        "name": "row-alley",
        "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
        "line": {
          "start": 308,
          "end": 322
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "min",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 49,
              "end": 49
            },
            "context": {
              "type": "mixin",
              "name": "min",
              "code": "@media (min-width:$min-width) {\n    @content;\n}\n",
              "line": {
                "start": 50,
                "end": 54
              }
            },
            "access": "public",
            "content": "",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                  "line": {
                    "start": 308,
                    "end": 322
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                  "line": {
                    "start": 308,
                    "end": 322
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              }
            ]
          }
        },
        {
          "type": "mixin",
          "name": "row-alley-styles",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 298,
              "end": 298
            },
            "context": {
              "type": "mixin",
              "name": "row-alley-styles",
              "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
              "line": {
                "start": 299,
                "end": 305
              }
            },
            "access": "private",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "mixin",
                "name": "row-alleys",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 265,
                    "end": 265
                  },
                  "context": {
                    "type": "mixin",
                    "name": "row-alleys",
                    "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                    "line": {
                      "start": 266,
                      "end": 283
                    }
                  },
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-nonneg-unitless-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                        "commentRange": {
                          "start": 123,
                          "end": 125
                        },
                        "context": {
                          "type": "function",
                          "name": "is-nonneg-unitless-number",
                          "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                          "line": {
                            "start": 126,
                            "end": 136
                          }
                        },
                        "parameter": [
                          {
                            "type": "any",
                            "name": "value"
                          },
                          {
                            "type": "bool",
                            "name": "warn",
                            "default": "false"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [
                          {
                            "type": "function",
                            "name": "is-nonneg-number",
                            "autofill": true,
                            "item": {
                              "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                              "commentRange": {
                                "start": 93,
                                "end": 95
                              },
                              "context": {
                                "type": "function",
                                "name": "is-nonneg-number",
                                "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                "line": {
                                  "start": 96,
                                  "end": 106
                                }
                              },
                              "parameter": [
                                {
                                  "type": "any",
                                  "name": "value"
                                },
                                {
                                  "type": "bool",
                                  "name": "warn",
                                  "default": "false"
                                }
                              ],
                              "access": "public",
                              "group": [
                                "undefined"
                              ],
                              "require": [
                                {
                                  "type": "function",
                                  "name": "is-number",
                                  "autofill": true,
                                  "item": {
                                    "description": "Checks if <code>$value</code> is a number.\n",
                                    "commentRange": {
                                      "start": 27,
                                      "end": 28
                                    },
                                    "context": {
                                      "type": "function",
                                      "name": "is-number",
                                      "code": "@return type-of($value) == number;\n",
                                      "line": {
                                        "start": 29,
                                        "end": 31
                                      }
                                    },
                                    "parameter": [
                                      {
                                        "type": "any",
                                        "name": "value"
                                      }
                                    ],
                                    "access": "public",
                                    "group": [
                                      "undefined"
                                    ],
                                    "require": [],
                                    "file": {
                                      "path": "_funcs.scss",
                                      "name": "_funcs.scss"
                                    },
                                    "usedBy": [
                                      {
                                        "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-unit-number",
                                          "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 66,
                                            "end": 76
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a unitless number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-unitless-number",
                                          "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 81,
                                            "end": 91
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-nonneg-number",
                                          "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 96,
                                            "end": 106
                                          }
                                        }
                                      },
                                      {
                                        "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "decimal-round",
                                          "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                          "line": {
                                            "start": 254,
                                            "end": 280
                                          }
                                        }
                                      },
                                      {
                                        "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "decimal-round",
                                          "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                                          "line": {
                                            "start": 254,
                                            "end": 280
                                          }
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "function",
                                  "name": "show-param-value",
                                  "autofill": true,
                                  "item": {
                                    "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                                    "commentRange": {
                                      "start": 13,
                                      "end": 15
                                    },
                                    "context": {
                                      "type": "function",
                                      "name": "show-param-value",
                                      "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                      "line": {
                                        "start": 16,
                                        "end": 20
                                      }
                                    },
                                    "parameter": [
                                      {
                                        "type": "any",
                                        "name": "value"
                                      }
                                    ],
                                    "access": "private",
                                    "group": [
                                      "undefined"
                                    ],
                                    "require": [],
                                    "file": {
                                      "path": "_funcs.scss",
                                      "name": "_funcs.scss"
                                    },
                                    "usedBy": [
                                      {
                                        "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-unit-number",
                                          "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 66,
                                            "end": 76
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a unitless number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-unitless-number",
                                          "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 81,
                                            "end": 91
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-nonneg-number",
                                          "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 96,
                                            "end": 106
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-nonneg-unit-number",
                                          "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 111,
                                            "end": 121
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-nonneg-unitless-number",
                                          "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 126,
                                            "end": 136
                                          }
                                        }
                                      },
                                      {
                                        "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                        "context": {
                                          "type": "function",
                                          "name": "is-in-list",
                                          "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                          "line": {
                                            "start": 142,
                                            "end": 152
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 111,
                                      "end": 121
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 126,
                                      "end": 136
                                    }
                                  }
                                },
                                {
                                  "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "auto-color",
                                    "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                                    "line": {
                                      "start": 229,
                                      "end": 243
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "function",
                            "name": "show-param-value",
                            "autofill": true,
                            "item": {
                              "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                              "commentRange": {
                                "start": 13,
                                "end": 15
                              },
                              "context": {
                                "type": "function",
                                "name": "show-param-value",
                                "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                                "line": {
                                  "start": 16,
                                  "end": 20
                                }
                              },
                              "parameter": [
                                {
                                  "type": "any",
                                  "name": "value"
                                }
                              ],
                              "access": "private",
                              "group": [
                                "undefined"
                              ],
                              "require": [],
                              "file": {
                                "path": "_funcs.scss",
                                "name": "_funcs.scss"
                              },
                              "usedBy": [
                                {
                                  "description": "Checks if <code>$value</code> is a number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unit-number",
                                    "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 66,
                                      "end": 76
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-unitless-number",
                                    "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 81,
                                      "end": 91
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-number",
                                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 96,
                                      "end": 106
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unit-number",
                                    "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 111,
                                      "end": 121
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-nonneg-unitless-number",
                                    "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 126,
                                      "end": 136
                                    }
                                  }
                                },
                                {
                                  "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                                  "context": {
                                    "type": "function",
                                    "name": "is-in-list",
                                    "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                                    "line": {
                                      "start": 142,
                                      "end": 152
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                              "line": {
                                "start": 266,
                                "end": 283
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alley",
                              "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                              "line": {
                                "start": 308,
                                "end": 322
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "col-width",
                              "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                              "line": {
                                "start": 325,
                                "end": 351
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "variable",
                      "name": "alley-sizes",
                      "autofill": true,
                      "item": {
                        "description": "",
                        "commentRange": {
                          "start": 280,
                          "end": 280
                        },
                        "context": {
                          "type": "variable",
                          "name": "alley-sizes",
                          "value": "map_merge((\n    noalley: 0,\n    tightest: 25,\n    tighter: 50,\n    tight: 75,\n    comfy: 100,\n    loose: 125,\n    looser: 150,\n    loosest: 175,\n), $alley-sizes)",
                          "scope": "private",
                          "line": {
                            "start": 281,
                            "end": 290
                          }
                        },
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "file": {
                          "path": "_vars.scss",
                          "name": "_vars.scss"
                        },
                        "usedBy": [
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                              "line": {
                                "start": 266,
                                "end": 283
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                              "line": {
                                "start": 266,
                                "end": 283
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                              "line": {
                                "start": 266,
                                "end": 283
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alley",
                              "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                              "line": {
                                "start": 308,
                                "end": 322
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "variable",
                      "name": "alley",
                      "autofill": true,
                      "item": {
                        "description": "",
                        "commentRange": {
                          "start": 217,
                          "end": 217
                        },
                        "context": {
                          "type": "variable",
                          "name": "alley",
                          "value": "30px",
                          "scope": "default",
                          "line": {
                            "start": 218,
                            "end": 218
                          }
                        },
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "file": {
                          "path": "_vars.scss",
                          "name": "_vars.scss"
                        },
                        "usedBy": [
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                              "line": {
                                "start": 266,
                                "end": 283
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                              "line": {
                                "start": 266,
                                "end": 283
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                              "line": {
                                "start": 266,
                                "end": 283
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                              "line": {
                                "start": 266,
                                "end": 283
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                              "line": {
                                "start": 266,
                                "end": 283
                              }
                            }
                          },
                          {
                            "description": "",
                            "context": {
                              "type": "mixin",
                              "name": "row-alleys",
                              "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                              "line": {
                                "start": 266,
                                "end": 283
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_mixins.scss",
                    "name": "_mixins.scss"
                  },
                  "usedBy": [
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row",
                        "code": "@include row-alleys(row, $alley-multiplier);\n@include clearfix();\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                        "line": {
                          "start": 286,
                          "end": 296
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row",
                        "code": "@include row-alleys(row, $alley-multiplier);\n@include clearfix();\n\ndisplay:flex;\nflex-wrap:wrap;\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                        "line": {
                          "start": 286,
                          "end": 296
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley-styles",
                        "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                        "line": {
                          "start": 299,
                          "end": 305
                        }
                      }
                    },
                    {
                      "description": "",
                      "context": {
                        "type": "mixin",
                        "name": "row-alley-styles",
                        "code": "@include row-alleys(row, $alley-multiplier);\n\n> * {\n    @include row-alleys(col, $alley-multiplier);\n}\n",
                        "line": {
                          "start": 299,
                          "end": 305
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                  "line": {
                    "start": 308,
                    "end": 322
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                  "line": {
                    "start": 308,
                    "end": 322
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                  "line": {
                    "start": 308,
                    "end": 322
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
            "commentRange": {
              "start": 123,
              "end": 125
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unitless-number",
              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
              "line": {
                "start": 126,
                "end": 136
              }
            },
            "parameter": [
              {
                "type": "any",
                "name": "value"
              },
              {
                "type": "bool",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 93,
                    "end": 95
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 96,
                      "end": 106
                    }
                  },
                  "parameter": [
                    {
                      "type": "any",
                      "name": "value"
                    },
                    {
                      "type": "bool",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 27,
                          "end": 28
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 29,
                            "end": 31
                          }
                        },
                        "parameter": [
                          {
                            "type": "any",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 13,
                          "end": 15
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 16,
                            "end": 20
                          }
                        },
                        "parameter": [
                          {
                            "type": "any",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 142,
                                "end": 152
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 229,
                          "end": 243
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 13,
                    "end": 15
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 16,
                      "end": 20
                    }
                  },
                  "parameter": [
                    {
                      "type": "any",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 142,
                          "end": 152
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                  "line": {
                    "start": 266,
                    "end": 283
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                  "line": {
                    "start": 308,
                    "end": 322
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unit-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
            "commentRange": {
              "start": 108,
              "end": 110
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unit-number",
              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 111,
                "end": 121
              }
            },
            "parameter": [
              {
                "type": "any",
                "name": "value"
              },
              {
                "type": "bool",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 93,
                    "end": 95
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 96,
                      "end": 106
                    }
                  },
                  "parameter": [
                    {
                      "type": "any",
                      "name": "value"
                    },
                    {
                      "type": "bool",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 27,
                          "end": 28
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 29,
                            "end": 31
                          }
                        },
                        "parameter": [
                          {
                            "type": "any",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 13,
                          "end": 15
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 16,
                            "end": 20
                          }
                        },
                        "parameter": [
                          {
                            "type": "any",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 142,
                                "end": 152
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 229,
                          "end": 243
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 13,
                    "end": 15
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 16,
                      "end": 20
                    }
                  },
                  "parameter": [
                    {
                      "type": "any",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 142,
                          "end": 152
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "variable",
                "name": "lengths",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 371,
                    "end": 371
                  },
                  "context": {
                    "type": "variable",
                    "name": "lengths",
                    "value": "join($lengths-absolute, $lengths-relative)",
                    "scope": "private",
                    "line": {
                      "start": 372,
                      "end": 372
                    }
                  },
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "file": {
                    "path": "_vars.scss",
                    "name": "_vars.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                  "line": {
                    "start": 308,
                    "end": 322
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "alley-sizes",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 280,
              "end": 280
            },
            "context": {
              "type": "variable",
              "name": "alley-sizes",
              "value": "map_merge((\n    noalley: 0,\n    tightest: 25,\n    tighter: 50,\n    tight: 75,\n    comfy: 100,\n    loose: 125,\n    looser: 150,\n    loosest: 175,\n), $alley-sizes)",
              "scope": "private",
              "line": {
                "start": 281,
                "end": 290
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                  "line": {
                    "start": 266,
                    "end": 283
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                  "line": {
                    "start": 266,
                    "end": 283
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                  "line": {
                    "start": 266,
                    "end": 283
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                  "line": {
                    "start": 308,
                    "end": 322
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "breakpoints",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 318,
              "end": 318
            },
            "context": {
              "type": "variable",
              "name": "breakpoints",
              "value": "map_merge((\n    s:$breakpoint-s,\n    m:$breakpoint-m,\n    l:$breakpoint-l,\n    xl:$breakpoint-xl,\n), $breakpoints)",
              "scope": "private",
              "line": {
                "start": 319,
                "end": 324
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                  "line": {
                    "start": 308,
                    "end": 322
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                  "line": {
                    "start": 308,
                    "end": 322
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 324,
        "end": 324
      },
      "context": {
        "type": "mixin",
        "name": "col-width",
        "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
        "line": {
          "start": 325,
          "end": 351
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "require": [
        {
          "type": "mixin",
          "name": "min",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 49,
              "end": 49
            },
            "context": {
              "type": "mixin",
              "name": "min",
              "code": "@media (min-width:$min-width) {\n    @content;\n}\n",
              "line": {
                "start": 50,
                "end": 54
              }
            },
            "access": "public",
            "content": "",
            "group": [
              "undefined"
            ],
            "require": [],
            "file": {
              "path": "_mixins.scss",
              "name": "_mixins.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                  "line": {
                    "start": 308,
                    "end": 322
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                  "line": {
                    "start": 308,
                    "end": 322
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unit-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
            "commentRange": {
              "start": 108,
              "end": 110
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unit-number",
              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
              "line": {
                "start": 111,
                "end": 121
              }
            },
            "parameter": [
              {
                "type": "any",
                "name": "value"
              },
              {
                "type": "bool",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 93,
                    "end": 95
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 96,
                      "end": 106
                    }
                  },
                  "parameter": [
                    {
                      "type": "any",
                      "name": "value"
                    },
                    {
                      "type": "bool",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 27,
                          "end": 28
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 29,
                            "end": 31
                          }
                        },
                        "parameter": [
                          {
                            "type": "any",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 13,
                          "end": 15
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 16,
                            "end": 20
                          }
                        },
                        "parameter": [
                          {
                            "type": "any",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 142,
                                "end": 152
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 229,
                          "end": 243
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 13,
                    "end": 15
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 16,
                      "end": 20
                    }
                  },
                  "parameter": [
                    {
                      "type": "any",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 142,
                          "end": 152
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "variable",
                "name": "lengths",
                "autofill": true,
                "item": {
                  "description": "",
                  "commentRange": {
                    "start": 371,
                    "end": 371
                  },
                  "context": {
                    "type": "variable",
                    "name": "lengths",
                    "value": "join($lengths-absolute, $lengths-relative)",
                    "scope": "private",
                    "line": {
                      "start": 372,
                      "end": 372
                    }
                  },
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "file": {
                    "path": "_vars.scss",
                    "name": "_vars.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                  "line": {
                    "start": 308,
                    "end": 322
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              }
            ]
          }
        },
        {
          "type": "function",
          "name": "is-nonneg-unitless-number",
          "autofill": true,
          "item": {
            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
            "commentRange": {
              "start": 123,
              "end": 125
            },
            "context": {
              "type": "function",
              "name": "is-nonneg-unitless-number",
              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
              "line": {
                "start": 126,
                "end": 136
              }
            },
            "parameter": [
              {
                "type": "any",
                "name": "value"
              },
              {
                "type": "bool",
                "name": "warn",
                "default": "false"
              }
            ],
            "access": "public",
            "group": [
              "undefined"
            ],
            "require": [
              {
                "type": "function",
                "name": "is-nonneg-number",
                "autofill": true,
                "item": {
                  "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                  "commentRange": {
                    "start": 93,
                    "end": 95
                  },
                  "context": {
                    "type": "function",
                    "name": "is-nonneg-number",
                    "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                    "line": {
                      "start": 96,
                      "end": 106
                    }
                  },
                  "parameter": [
                    {
                      "type": "any",
                      "name": "value"
                    },
                    {
                      "type": "bool",
                      "name": "warn",
                      "default": "false"
                    }
                  ],
                  "access": "public",
                  "group": [
                    "undefined"
                  ],
                  "require": [
                    {
                      "type": "function",
                      "name": "is-number",
                      "autofill": true,
                      "item": {
                        "description": "Checks if <code>$value</code> is a number.\n",
                        "commentRange": {
                          "start": 27,
                          "end": 28
                        },
                        "context": {
                          "type": "function",
                          "name": "is-number",
                          "code": "@return type-of($value) == number;\n",
                          "line": {
                            "start": 29,
                            "end": 31
                          }
                        },
                        "parameter": [
                          {
                            "type": "any",
                            "name": "value"
                          }
                        ],
                        "access": "public",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          },
                          {
                            "description": "Rounds, ceils or floors <code>$number</code> to given decimal <code>$places</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "decimal-round",
                              "code": "$n:1;\n\n@if not is-number($number) {\n    @return $number;\n}\n\n@if not is-number($places) {\n    @return $number;\n}\n\n@if $places > 0 and $places < 20 {\n    @for $i from 1 through $places {\n        $n:$n * 10;\n    }\n}\n\n@if $mode == round {\n    @return round($number * $n) / $n;\n} @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n} @else if $mode == floor {\n    @return floor($number * $n) / $n;\n} @else {\n    @return $number;\n}\n",
                              "line": {
                                "start": 254,
                                "end": 280
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "function",
                      "name": "show-param-value",
                      "autofill": true,
                      "item": {
                        "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                        "commentRange": {
                          "start": 13,
                          "end": 15
                        },
                        "context": {
                          "type": "function",
                          "name": "show-param-value",
                          "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                          "line": {
                            "start": 16,
                            "end": 20
                          }
                        },
                        "parameter": [
                          {
                            "type": "any",
                            "name": "value"
                          }
                        ],
                        "access": "private",
                        "group": [
                          "undefined"
                        ],
                        "require": [],
                        "file": {
                          "path": "_funcs.scss",
                          "name": "_funcs.scss"
                        },
                        "usedBy": [
                          {
                            "description": "Checks if <code>$value</code> is a number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unit-number",
                              "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 66,
                                "end": 76
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-unitless-number",
                              "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 81,
                                "end": 91
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-number",
                              "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 96,
                                "end": 106
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unit-number",
                              "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 111,
                                "end": 121
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                            "context": {
                              "type": "function",
                              "name": "is-nonneg-unitless-number",
                              "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 126,
                                "end": 136
                              }
                            }
                          },
                          {
                            "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                            "context": {
                              "type": "function",
                              "name": "is-in-list",
                              "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                              "line": {
                                "start": 142,
                                "end": 152
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Returns a <code>$dark</code> or <code>$light</code> color depending on the lightness <code>$threshold</code> of the <code>$bg-color</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "auto-color",
                        "code": "@if type-of($bg-color) != color {\n    @error '`#{$bg-color}` is not a valid color.';\n}\n\n@if not is-nonneg-number($threshold) {\n    @error '`#{$threshold}` is not a nonnegative number.';\n}\n\n@if lightness($bg-color) > $threshold {\n    @return $dark;\n} @else {\n    @return $light;\n}\n",
                        "line": {
                          "start": 229,
                          "end": 243
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "function",
                "name": "show-param-value",
                "autofill": true,
                "item": {
                  "description": "Returns a formatted string containing <code>$value</code> and its type.\n",
                  "commentRange": {
                    "start": 13,
                    "end": 15
                  },
                  "context": {
                    "type": "function",
                    "name": "show-param-value",
                    "code": "$value:if(type-of($value) == string, '\"#{$value}\"', $value);\n\n@return 'Received: <#{type-of($value)}: #{$value}>.';\n",
                    "line": {
                      "start": 16,
                      "end": 20
                    }
                  },
                  "parameter": [
                    {
                      "type": "any",
                      "name": "value"
                    }
                  ],
                  "access": "private",
                  "group": [
                    "undefined"
                  ],
                  "require": [],
                  "file": {
                    "path": "_funcs.scss",
                    "name": "_funcs.scss"
                  },
                  "usedBy": [
                    {
                      "description": "Checks if <code>$value</code> is a number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unit-number",
                        "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 66,
                          "end": 76
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-unitless-number",
                        "code": "@if is-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 81,
                          "end": 91
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-number",
                        "code": "@if is-number($value) and $value > -1 {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 96,
                          "end": 106
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unit-number",
                        "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 111,
                          "end": 121
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$value</code> is a nonnegative, unitless number.\n",
                      "context": {
                        "type": "function",
                        "name": "is-nonneg-unitless-number",
                        "code": "@if is-nonneg-number($value) and unitless($value) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 126,
                          "end": 136
                        }
                      }
                    },
                    {
                      "description": "Checks if <code>$needle</code> is found in <code>$haystack</code>.\n",
                      "context": {
                        "type": "function",
                        "name": "is-in-list",
                        "code": "@if index($haystack, $needle) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';\n}\n\n@return false;\n",
                        "line": {
                          "start": 142,
                          "end": 152
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "file": {
              "path": "_funcs.scss",
              "name": "_funcs.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alleys",
                  "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
                  "line": {
                    "start": 266,
                    "end": 283
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                  "line": {
                    "start": 308,
                    "end": 322
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "columns",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 326,
              "end": 326
            },
            "context": {
              "type": "variable",
              "name": "columns",
              "value": "(map_merge((\n    1:percentage(1/12),\n    2:percentage(2/12),\n    3:percentage(3/12),\n    4:percentage(4/12),\n    5:percentage(5/12),\n    6:percentage(6/12),\n    7:percentage(7/12),\n    8:percentage(8/12),\n    9:percentage(9/12),\n    10:percentage(10/12),\n    11:percentage(11/12),\n    12:percentage(12/12),\n    p5:5%,\n    p10:10%,\n    p15:15%,\n    p20:20%,\n    p25:25%,\n    p30:30%,\n    p35:35%,\n    p40:40%,\n    p45:45%,\n    p50:50%,\n    p55:55%,\n    p60:60%,\n    p65:65%,\n    p70:70%,\n    p75:75%,\n    p80:80%,\n    p85:85%,\n    p90:90%,\n    p95:95%,\n    p100:100%,\n), $columns))",
              "scope": "private",
              "line": {
                "start": 327,
                "end": 360
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              }
            ]
          }
        },
        {
          "type": "variable",
          "name": "breakpoints",
          "autofill": true,
          "item": {
            "description": "",
            "commentRange": {
              "start": 318,
              "end": 318
            },
            "context": {
              "type": "variable",
              "name": "breakpoints",
              "value": "map_merge((\n    s:$breakpoint-s,\n    m:$breakpoint-m,\n    l:$breakpoint-l,\n    xl:$breakpoint-xl,\n), $breakpoints)",
              "scope": "private",
              "line": {
                "start": 319,
                "end": 324
              }
            },
            "access": "public",
            "group": [
              "undefined"
            ],
            "file": {
              "path": "_vars.scss",
              "name": "_vars.scss"
            },
            "usedBy": [
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "hide",
                  "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
                  "line": {
                    "start": 220,
                    "end": 230
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                  "line": {
                    "start": 308,
                    "end": 322
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "row-alley",
                  "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
                  "line": {
                    "start": 308,
                    "end": 322
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              },
              {
                "description": "",
                "context": {
                  "type": "mixin",
                  "name": "col-width",
                  "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
                  "line": {
                    "start": 325,
                    "end": 351
                  }
                }
              }
            ]
          }
        }
      ],
      "file": {
        "path": "_mixins.scss",
        "name": "_mixins.scss"
      }
    }
  ],
  "variables": [
    {
      "description": "",
      "commentRange": {
        "start": 6,
        "end": 6
      },
      "context": {
        "type": "variable",
        "name": "font-stack-serif",
        "value": "Constantia, 'Lucida Bright', Lucidabright, Georgia, serif",
        "scope": "default",
        "line": {
          "start": 7,
          "end": 7
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 8,
        "end": 8
      },
      "context": {
        "type": "variable",
        "name": "font-stack-sansserif",
        "value": "'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif",
        "scope": "default",
        "line": {
          "start": 9,
          "end": 9
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 10,
        "end": 10
      },
      "context": {
        "type": "variable",
        "name": "font-stack-general",
        "value": "$font-stack-sansserif",
        "scope": "default",
        "line": {
          "start": 11,
          "end": 11
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 12,
        "end": 12
      },
      "context": {
        "type": "variable",
        "name": "font-stack-heading",
        "value": "$font-stack-general",
        "scope": "default",
        "line": {
          "start": 13,
          "end": 13
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "h",
            "code": "font-size:map_get($font-sizes, h#{$type});\nfont-family:$font-stack-heading;\nline-height:map_get($line-heights, h#{$type});\n\n@if $margins-multiplier {\n    $margins-multiplier:$margins-multiplier / 100;\n\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $margins-multiplier;\n    margin-bottom:$margin-bottom-h * $margins-multiplier;\n}\n",
            "line": {
              "start": 192,
              "end": 205
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 14,
        "end": 14
      },
      "context": {
        "type": "variable",
        "name": "font-stack-mono",
        "value": "Consolas, 'Ubuntu Mono', 'Lucida Console', 'Courier New', Courier, monospace",
        "scope": "default",
        "line": {
          "start": 15,
          "end": 15
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 17,
        "end": 17
      },
      "context": {
        "type": "variable",
        "name": "font-stacks",
        "value": "map-merge((\n    serif:$font-stack-serif,\n    sansserif:$font-stack-sansserif,\n    general:$font-stack-general,\n    heading:$font-stack-heading,\n    mono:$font-stack-mono,\n), $font-stacks)",
        "scope": "private",
        "line": {
          "start": 18,
          "end": 24
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 25,
        "end": 25
      },
      "context": {
        "type": "variable",
        "name": "font-size-base",
        "value": "16px",
        "scope": "default",
        "line": {
          "start": 26,
          "end": 26
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "Converts <code>$size-in-rem</code> to pixels based on <code>$font-size-base</code>.\n",
          "context": {
            "type": "function",
            "name": "rem-to-pixels",
            "code": "@return strip-unit($size-in-rem) * $font-size-base;\n",
            "line": {
              "start": 309,
              "end": 311
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 27,
        "end": 27
      },
      "context": {
        "type": "variable",
        "name": "font-size-general",
        "value": "1rem",
        "scope": "default",
        "line": {
          "start": 28,
          "end": 28
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 29,
        "end": 29
      },
      "context": {
        "type": "variable",
        "name": "font-size-big",
        "value": "1.1em",
        "scope": "default",
        "line": {
          "start": 30,
          "end": 30
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 31,
        "end": 31
      },
      "context": {
        "type": "variable",
        "name": "font-size-xbig",
        "value": "1.2em",
        "scope": "default",
        "line": {
          "start": 32,
          "end": 32
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 33,
        "end": 33
      },
      "context": {
        "type": "variable",
        "name": "font-size-xxbig",
        "value": "1.3em",
        "scope": "default",
        "line": {
          "start": 34,
          "end": 34
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 35,
        "end": 35
      },
      "context": {
        "type": "variable",
        "name": "font-size-small",
        "value": "0.9em",
        "scope": "default",
        "line": {
          "start": 36,
          "end": 36
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 37,
        "end": 37
      },
      "context": {
        "type": "variable",
        "name": "font-size-xsmall",
        "value": "0.8em",
        "scope": "default",
        "line": {
          "start": 38,
          "end": 38
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 39,
        "end": 39
      },
      "context": {
        "type": "variable",
        "name": "font-size-xxsmall",
        "value": "0.7em",
        "scope": "default",
        "line": {
          "start": 40,
          "end": 40
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 41,
        "end": 41
      },
      "context": {
        "type": "variable",
        "name": "font-size-h1",
        "value": "2em",
        "scope": "default",
        "line": {
          "start": 42,
          "end": 42
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 43,
        "end": 43
      },
      "context": {
        "type": "variable",
        "name": "font-size-h2",
        "value": "1.6em",
        "scope": "default",
        "line": {
          "start": 44,
          "end": 44
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 45,
        "end": 45
      },
      "context": {
        "type": "variable",
        "name": "font-size-h3",
        "value": "1.4em",
        "scope": "default",
        "line": {
          "start": 46,
          "end": 46
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 47,
        "end": 47
      },
      "context": {
        "type": "variable",
        "name": "font-size-h4",
        "value": "1.2em",
        "scope": "default",
        "line": {
          "start": 48,
          "end": 48
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 50,
        "end": 50
      },
      "context": {
        "type": "variable",
        "name": "font-sizes",
        "value": "map-merge((\n    base:$font-size-base,\n    general:$font-size-general,\n    big:$font-size-big,\n    xbig:$font-size-xbig,\n    xxbig:$font-size-xxbig,\n    small:$font-size-small,\n    xsmall:$font-size-xsmall,\n    xxsmall:$font-size-xxsmall,\n    h1:$font-size-h1,\n    h2:$font-size-h2,\n    h3:$font-size-h3,\n    h4:$font-size-h4,\n), $font-sizes)",
        "scope": "private",
        "line": {
          "start": 51,
          "end": 64
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "h",
            "code": "font-size:map_get($font-sizes, h#{$type});\nfont-family:$font-stack-heading;\nline-height:map_get($line-heights, h#{$type});\n\n@if $margins-multiplier {\n    $margins-multiplier:$margins-multiplier / 100;\n\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $margins-multiplier;\n    margin-bottom:$margin-bottom-h * $margins-multiplier;\n}\n",
            "line": {
              "start": 192,
              "end": 205
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 65,
        "end": 65
      },
      "context": {
        "type": "variable",
        "name": "font-weight-normal",
        "value": "400",
        "scope": "default",
        "line": {
          "start": 66,
          "end": 66
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 67,
        "end": 67
      },
      "context": {
        "type": "variable",
        "name": "font-weight-bold",
        "value": "700",
        "scope": "default",
        "line": {
          "start": 68,
          "end": 68
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 69,
        "end": 69
      },
      "context": {
        "type": "variable",
        "name": "font-weight-heading",
        "value": "$font-weight-bold",
        "scope": "default",
        "line": {
          "start": 70,
          "end": 70
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 72,
        "end": 72
      },
      "context": {
        "type": "variable",
        "name": "font-weights",
        "value": "map-merge((\n    normal:$font-weight-normal,\n    bold:$font-weight-bold,\n    heading:$font-weight-heading,\n), $font-weights)",
        "scope": "private",
        "line": {
          "start": 73,
          "end": 77
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 78,
        "end": 78
      },
      "context": {
        "type": "variable",
        "name": "line-height-general",
        "value": "1.5",
        "scope": "default",
        "line": {
          "start": 79,
          "end": 79
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 80,
        "end": 80
      },
      "context": {
        "type": "variable",
        "name": "line-height-h1",
        "value": "1.15",
        "scope": "default",
        "line": {
          "start": 81,
          "end": 81
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 82,
        "end": 82
      },
      "context": {
        "type": "variable",
        "name": "line-height-h2",
        "value": "1.25",
        "scope": "default",
        "line": {
          "start": 83,
          "end": 83
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 84,
        "end": 84
      },
      "context": {
        "type": "variable",
        "name": "line-height-h3",
        "value": "1.35",
        "scope": "default",
        "line": {
          "start": 85,
          "end": 85
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 86,
        "end": 86
      },
      "context": {
        "type": "variable",
        "name": "line-height-h4",
        "value": "1.45",
        "scope": "default",
        "line": {
          "start": 87,
          "end": 87
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 89,
        "end": 89
      },
      "context": {
        "type": "variable",
        "name": "line-heights",
        "value": "map-merge((\n    general:$line-height-general,\n    h1:$line-height-h1,\n    h2:$line-height-h2,\n    h3:$line-height-h3,\n    h4:$line-height-h4,\n), $line-heights)",
        "scope": "private",
        "line": {
          "start": 90,
          "end": 96
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "h",
            "code": "font-size:map_get($font-sizes, h#{$type});\nfont-family:$font-stack-heading;\nline-height:map_get($line-heights, h#{$type});\n\n@if $margins-multiplier {\n    $margins-multiplier:$margins-multiplier / 100;\n\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $margins-multiplier;\n    margin-bottom:$margin-bottom-h * $margins-multiplier;\n}\n",
            "line": {
              "start": 192,
              "end": 205
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 97,
        "end": 97
      },
      "context": {
        "type": "variable",
        "name": "color-dark",
        "value": "#1f1f20",
        "scope": "default",
        "line": {
          "start": 98,
          "end": 98
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 99,
        "end": 99
      },
      "context": {
        "type": "variable",
        "name": "color-light",
        "value": "#f5f2ef",
        "scope": "default",
        "line": {
          "start": 100,
          "end": 100
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 101,
        "end": 101
      },
      "context": {
        "type": "variable",
        "name": "color-gray",
        "value": "lighten(black, 50%)",
        "scope": "default",
        "line": {
          "start": 102,
          "end": 102
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 103,
        "end": 103
      },
      "context": {
        "type": "variable",
        "name": "color-graylight",
        "value": "lighten($color-gray, 25%)",
        "scope": "default",
        "line": {
          "start": 104,
          "end": 104
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 105,
        "end": 105
      },
      "context": {
        "type": "variable",
        "name": "color-graylighter",
        "value": "lighten($color-gray, 35%)",
        "scope": "default",
        "line": {
          "start": 106,
          "end": 106
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 107,
        "end": 107
      },
      "context": {
        "type": "variable",
        "name": "color-graylightest",
        "value": "lighten($color-gray, 45%)",
        "scope": "default",
        "line": {
          "start": 108,
          "end": 108
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 109,
        "end": 109
      },
      "context": {
        "type": "variable",
        "name": "color-graydark",
        "value": "darken($color-gray, 5%)",
        "scope": "default",
        "line": {
          "start": 110,
          "end": 110
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 111,
        "end": 111
      },
      "context": {
        "type": "variable",
        "name": "color-graydarker",
        "value": "darken($color-gray, 10%)",
        "scope": "default",
        "line": {
          "start": 112,
          "end": 112
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 113,
        "end": 113
      },
      "context": {
        "type": "variable",
        "name": "color-graydarkest",
        "value": "darken($color-gray, 15%)",
        "scope": "default",
        "line": {
          "start": 114,
          "end": 114
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 115,
        "end": 115
      },
      "context": {
        "type": "variable",
        "name": "color-primary",
        "value": "#c0392b",
        "scope": "default",
        "line": {
          "start": 116,
          "end": 116
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 117,
        "end": 117
      },
      "context": {
        "type": "variable",
        "name": "color-secondary",
        "value": "#acb29d",
        "scope": "default",
        "line": {
          "start": 118,
          "end": 118
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 119,
        "end": 119
      },
      "context": {
        "type": "variable",
        "name": "color-accent",
        "value": "#cb9556",
        "scope": "default",
        "line": {
          "start": 120,
          "end": 120
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 121,
        "end": 121
      },
      "context": {
        "type": "variable",
        "name": "color-idle",
        "value": "$color-graylighter",
        "scope": "default",
        "line": {
          "start": 122,
          "end": 122
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 123,
        "end": 123
      },
      "context": {
        "type": "variable",
        "name": "color-success",
        "value": "#708b45",
        "scope": "default",
        "line": {
          "start": 124,
          "end": 124
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 125,
        "end": 125
      },
      "context": {
        "type": "variable",
        "name": "color-alert",
        "value": "#f44336",
        "scope": "default",
        "line": {
          "start": 126,
          "end": 126
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 127,
        "end": 127
      },
      "context": {
        "type": "variable",
        "name": "color-warning",
        "value": "#ee7b0c",
        "scope": "default",
        "line": {
          "start": 128,
          "end": 128
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 129,
        "end": 129
      },
      "context": {
        "type": "variable",
        "name": "color-highlight",
        "value": "#feca57",
        "scope": "default",
        "line": {
          "start": 130,
          "end": 130
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 131,
        "end": 131
      },
      "context": {
        "type": "variable",
        "name": "color-dribbble",
        "value": "#ea4c89",
        "scope": "default",
        "line": {
          "start": 132,
          "end": 132
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 133,
        "end": 133
      },
      "context": {
        "type": "variable",
        "name": "color-facebook",
        "value": "#3b5998",
        "scope": "default",
        "line": {
          "start": 134,
          "end": 134
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 135,
        "end": 135
      },
      "context": {
        "type": "variable",
        "name": "color-flickr",
        "value": "#ff0084",
        "scope": "default",
        "line": {
          "start": 136,
          "end": 136
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 137,
        "end": 137
      },
      "context": {
        "type": "variable",
        "name": "color-instagram",
        "value": "#517fa4",
        "scope": "default",
        "line": {
          "start": 138,
          "end": 138
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 139,
        "end": 139
      },
      "context": {
        "type": "variable",
        "name": "color-linkedin",
        "value": "#0077b5",
        "scope": "default",
        "line": {
          "start": 140,
          "end": 140
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 141,
        "end": 141
      },
      "context": {
        "type": "variable",
        "name": "color-medium",
        "value": "#00ab6b",
        "scope": "default",
        "line": {
          "start": 142,
          "end": 142
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 143,
        "end": 143
      },
      "context": {
        "type": "variable",
        "name": "color-pinterest",
        "value": "#bd081c",
        "scope": "default",
        "line": {
          "start": 144,
          "end": 144
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 145,
        "end": 145
      },
      "context": {
        "type": "variable",
        "name": "color-rss",
        "value": "#f26522",
        "scope": "default",
        "line": {
          "start": 146,
          "end": 146
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 147,
        "end": 147
      },
      "context": {
        "type": "variable",
        "name": "color-tumblr",
        "value": "#35465c",
        "scope": "default",
        "line": {
          "start": 148,
          "end": 148
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 149,
        "end": 149
      },
      "context": {
        "type": "variable",
        "name": "color-twitter",
        "value": "#55acee",
        "scope": "default",
        "line": {
          "start": 150,
          "end": 150
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 151,
        "end": 151
      },
      "context": {
        "type": "variable",
        "name": "color-youtube",
        "value": "#b31217",
        "scope": "default",
        "line": {
          "start": 152,
          "end": 152
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 153,
        "end": 153
      },
      "context": {
        "type": "variable",
        "name": "color-text",
        "value": "$color-dark",
        "scope": "default",
        "line": {
          "start": 154,
          "end": 154
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 155,
        "end": 155
      },
      "context": {
        "type": "variable",
        "name": "color-link",
        "value": "$color-primary",
        "scope": "default",
        "line": {
          "start": 156,
          "end": 156
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 157,
        "end": 157
      },
      "context": {
        "type": "variable",
        "name": "color-body-bg",
        "value": "#ffffff",
        "scope": "default",
        "line": {
          "start": 158,
          "end": 158
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 159,
        "end": 159
      },
      "context": {
        "type": "variable",
        "name": "color-border",
        "value": "$color-graylighter",
        "scope": "default",
        "line": {
          "start": 160,
          "end": 160
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 161,
        "end": 161
      },
      "context": {
        "type": "variable",
        "name": "color-quote-bdl",
        "value": "$color-graylighter",
        "scope": "default",
        "line": {
          "start": 162,
          "end": 162
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 163,
        "end": 163
      },
      "context": {
        "type": "variable",
        "name": "color-ins-bg",
        "value": "$color-primary",
        "scope": "default",
        "line": {
          "start": 164,
          "end": 164
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 165,
        "end": 165
      },
      "context": {
        "type": "variable",
        "name": "color-mark-bg",
        "value": "$color-highlight",
        "scope": "default",
        "line": {
          "start": 166,
          "end": 166
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 167,
        "end": 167
      },
      "context": {
        "type": "variable",
        "name": "color-pre-bg",
        "value": "$color-graylightest",
        "scope": "default",
        "line": {
          "start": 168,
          "end": 168
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 169,
        "end": 169
      },
      "context": {
        "type": "variable",
        "name": "color-pre-bdl",
        "value": "$color-primary",
        "scope": "default",
        "line": {
          "start": 170,
          "end": 170
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 171,
        "end": 171
      },
      "context": {
        "type": "variable",
        "name": "color-code-bg",
        "value": "$color-graylightest",
        "scope": "default",
        "line": {
          "start": 172,
          "end": 172
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 174,
        "end": 174
      },
      "context": {
        "type": "variable",
        "name": "colors",
        "value": "map-merge((\n    primary: $color-primary,\n    secondary: $color-secondary,\n    accent: $color-accent,\n    idle: $color-idle,\n    success: $color-success,\n    alert: $color-alert,\n    warning: $color-warning,\n    highlight: $color-highlight,\n    dark: $color-dark,\n    light: $color-light,\n    gray: $color-gray,\n    graylight: $color-graylight,\n    graylighter: $color-graylighter,\n    graylightest: $color-graylightest,\n    graydark: $color-graydark,\n    graydarker: $color-graydarker,\n    graydarkest: $color-graydarkest,\n    dribbble: $color-dribbble,\n    facebook: $color-facebook,\n    flickr: $color-flickr,\n    instagram: $color-instagram,\n    linkedin: $color-linkedin,\n    medium: $color-medium,\n    pinterest: $color-pinterest,\n    rss: $color-rss,\n    tumblr: $color-tumblr,\n    twitter: $color-twitter,\n    youtube: $color-youtube,\n), $colors)",
        "scope": "private",
        "line": {
          "start": 175,
          "end": 204
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 205,
        "end": 205
      },
      "context": {
        "type": "variable",
        "name": "border-radius",
        "value": "0.25rem",
        "scope": "default",
        "line": {
          "start": 206,
          "end": 206
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 207,
        "end": 207
      },
      "context": {
        "type": "variable",
        "name": "border-size",
        "value": "1px",
        "scope": "default",
        "line": {
          "start": 208,
          "end": 208
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 209,
        "end": 209
      },
      "context": {
        "type": "variable",
        "name": "margin",
        "value": "$font-size-general * $line-height-general",
        "scope": "default",
        "line": {
          "start": 210,
          "end": 210
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
            "line": {
              "start": 139,
              "end": 189
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
            "line": {
              "start": 139,
              "end": 189
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
            "line": {
              "start": 139,
              "end": 189
            }
          }
        },
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
            "line": {
              "start": 139,
              "end": 189
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "mgb",
            "code": "@if $important == true {\n    margin-bottom:$margin * ($multiplier / 100) !important;\n} @else {\n    margin-bottom:$margin * ($multiplier / 100);\n}\n",
            "line": {
              "start": 233,
              "end": 239
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "mgb",
            "code": "@if $important == true {\n    margin-bottom:$margin * ($multiplier / 100) !important;\n} @else {\n    margin-bottom:$margin * ($multiplier / 100);\n}\n",
            "line": {
              "start": 233,
              "end": 239
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 211,
        "end": 211
      },
      "context": {
        "type": "variable",
        "name": "padding",
        "value": "$font-size-general * $line-height-general",
        "scope": "default",
        "line": {
          "start": 212,
          "end": 212
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 213,
        "end": 213
      },
      "context": {
        "type": "variable",
        "name": "margin-top-h",
        "value": "$margin * 1.25",
        "scope": "default",
        "line": {
          "start": 214,
          "end": 214
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
            "line": {
              "start": 139,
              "end": 189
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "h",
            "code": "font-size:map_get($font-sizes, h#{$type});\nfont-family:$font-stack-heading;\nline-height:map_get($line-heights, h#{$type});\n\n@if $margins-multiplier {\n    $margins-multiplier:$margins-multiplier / 100;\n\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $margins-multiplier;\n    margin-bottom:$margin-bottom-h * $margins-multiplier;\n}\n",
            "line": {
              "start": 192,
              "end": 205
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 215,
        "end": 215
      },
      "context": {
        "type": "variable",
        "name": "margin-bottom-h",
        "value": "$margin * 0.625",
        "scope": "default",
        "line": {
          "start": 216,
          "end": 216
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "Sets default vertical margins for selected elements\n",
          "context": {
            "type": "mixin",
            "name": "vertical-margins",
            "code": "$multiplier:$multiplier / 100;\n\nhr {\n    margin-top:$margin * $multiplier;\n    margin-bottom:$margin * $multiplier;\n}\n\ncaption {\n    margin-bottom:($margin * 0.25) * $multiplier;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $multiplier;\n    margin-bottom:$margin-bottom-h * $multiplier;\n}\n\naddress,\narticle,\naside,\nblockquote,\ncanvas,\ndiv,\ndl,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nheader,\nhr,\nmain,\nnav,\nnoscript,\nol,\np,\npre,\nsection,\ntable,\nul,\nvideo {\n    margin-bottom:$margin * $multiplier;\n}\n",
            "line": {
              "start": 139,
              "end": 189
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "h",
            "code": "font-size:map_get($font-sizes, h#{$type});\nfont-family:$font-stack-heading;\nline-height:map_get($line-heights, h#{$type});\n\n@if $margins-multiplier {\n    $margins-multiplier:$margins-multiplier / 100;\n\n    @include control-margins(top);\n\n    margin-top:$margin-top-h * $margins-multiplier;\n    margin-bottom:$margin-bottom-h * $margins-multiplier;\n}\n",
            "line": {
              "start": 192,
              "end": 205
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 217,
        "end": 217
      },
      "context": {
        "type": "variable",
        "name": "alley",
        "value": "30px",
        "scope": "default",
        "line": {
          "start": 218,
          "end": 218
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
            "line": {
              "start": 266,
              "end": 283
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
            "line": {
              "start": 266,
              "end": 283
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
            "line": {
              "start": 266,
              "end": 283
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
            "line": {
              "start": 266,
              "end": 283
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
            "line": {
              "start": 266,
              "end": 283
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
            "line": {
              "start": 266,
              "end": 283
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 219,
        "end": 219
      },
      "context": {
        "type": "variable",
        "name": "p-inline-t",
        "value": "0.125rem",
        "scope": "default",
        "line": {
          "start": 220,
          "end": 220
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 221,
        "end": 221
      },
      "context": {
        "type": "variable",
        "name": "p-inline-r",
        "value": "0.25rem",
        "scope": "default",
        "line": {
          "start": 222,
          "end": 222
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 223,
        "end": 223
      },
      "context": {
        "type": "variable",
        "name": "p-inline-b",
        "value": "0.125rem",
        "scope": "default",
        "line": {
          "start": 224,
          "end": 224
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 225,
        "end": 225
      },
      "context": {
        "type": "variable",
        "name": "p-inline-l",
        "value": "0.25rem",
        "scope": "default",
        "line": {
          "start": 226,
          "end": 226
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 227,
        "end": 227
      },
      "context": {
        "type": "variable",
        "name": "padding-inline",
        "value": "$p-inline-t $p-inline-r $p-inline-b $p-inline-l",
        "scope": "default",
        "line": {
          "start": 228,
          "end": 228
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 229,
        "end": 229
      },
      "context": {
        "type": "variable",
        "name": "p-box-t",
        "value": "0.75rem",
        "scope": "default",
        "line": {
          "start": 230,
          "end": 230
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 231,
        "end": 231
      },
      "context": {
        "type": "variable",
        "name": "p-box-r",
        "value": "1.25rem",
        "scope": "default",
        "line": {
          "start": 232,
          "end": 232
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 233,
        "end": 233
      },
      "context": {
        "type": "variable",
        "name": "p-box-b",
        "value": "0.75rem",
        "scope": "default",
        "line": {
          "start": 234,
          "end": 234
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 235,
        "end": 235
      },
      "context": {
        "type": "variable",
        "name": "p-box-l",
        "value": "1rem",
        "scope": "default",
        "line": {
          "start": 236,
          "end": 236
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 237,
        "end": 237
      },
      "context": {
        "type": "variable",
        "name": "padding-box",
        "value": "$p-box-t $p-box-r $p-box-b $p-box-l",
        "scope": "default",
        "line": {
          "start": 238,
          "end": 238
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 239,
        "end": 239
      },
      "context": {
        "type": "variable",
        "name": "p-message-t",
        "value": "0.75rem",
        "scope": "default",
        "line": {
          "start": 240,
          "end": 240
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 241,
        "end": 241
      },
      "context": {
        "type": "variable",
        "name": "p-message-r",
        "value": "3.25rem",
        "scope": "default",
        "line": {
          "start": 242,
          "end": 242
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 243,
        "end": 243
      },
      "context": {
        "type": "variable",
        "name": "p-message-b",
        "value": "0.75rem",
        "scope": "default",
        "line": {
          "start": 244,
          "end": 244
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 245,
        "end": 245
      },
      "context": {
        "type": "variable",
        "name": "p-message-l",
        "value": "1rem",
        "scope": "default",
        "line": {
          "start": 246,
          "end": 246
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 247,
        "end": 247
      },
      "context": {
        "type": "variable",
        "name": "padding-message",
        "value": "$p-message-t $p-message-r $p-message-b $p-message-l",
        "scope": "default",
        "line": {
          "start": 248,
          "end": 248
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 249,
        "end": 249
      },
      "context": {
        "type": "variable",
        "name": "p-table-t",
        "value": "0.5rem",
        "scope": "default",
        "line": {
          "start": 250,
          "end": 250
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 251,
        "end": 251
      },
      "context": {
        "type": "variable",
        "name": "p-table-r",
        "value": "2rem",
        "scope": "default",
        "line": {
          "start": 252,
          "end": 252
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 253,
        "end": 253
      },
      "context": {
        "type": "variable",
        "name": "p-table-b",
        "value": "0.5rem",
        "scope": "default",
        "line": {
          "start": 254,
          "end": 254
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 255,
        "end": 255
      },
      "context": {
        "type": "variable",
        "name": "p-table-l",
        "value": "0",
        "scope": "default",
        "line": {
          "start": 256,
          "end": 256
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 257,
        "end": 257
      },
      "context": {
        "type": "variable",
        "name": "padding-table",
        "value": "$p-table-t $p-table-r $p-table-b $p-table-l",
        "scope": "default",
        "line": {
          "start": 258,
          "end": 258
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 259,
        "end": 259
      },
      "context": {
        "type": "variable",
        "name": "p-button-t",
        "value": "0.5rem",
        "scope": "default",
        "line": {
          "start": 260,
          "end": 260
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 261,
        "end": 261
      },
      "context": {
        "type": "variable",
        "name": "p-button-r",
        "value": "1.25rem",
        "scope": "default",
        "line": {
          "start": 262,
          "end": 262
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 263,
        "end": 263
      },
      "context": {
        "type": "variable",
        "name": "p-button-b",
        "value": "0.5rem",
        "scope": "default",
        "line": {
          "start": 264,
          "end": 264
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 265,
        "end": 265
      },
      "context": {
        "type": "variable",
        "name": "p-button-l",
        "value": "1.25rem",
        "scope": "default",
        "line": {
          "start": 266,
          "end": 266
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 267,
        "end": 267
      },
      "context": {
        "type": "variable",
        "name": "padding-button",
        "value": "$p-button-t $p-button-r $p-button-b $p-button-l",
        "scope": "default",
        "line": {
          "start": 268,
          "end": 268
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 269,
        "end": 269
      },
      "context": {
        "type": "variable",
        "name": "p-input-t",
        "value": "0.5rem",
        "scope": "default",
        "line": {
          "start": 270,
          "end": 270
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 271,
        "end": 271
      },
      "context": {
        "type": "variable",
        "name": "p-input-r",
        "value": "0.75rem",
        "scope": "default",
        "line": {
          "start": 272,
          "end": 272
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 273,
        "end": 273
      },
      "context": {
        "type": "variable",
        "name": "p-input-b",
        "value": "0.5rem",
        "scope": "default",
        "line": {
          "start": 274,
          "end": 274
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 275,
        "end": 275
      },
      "context": {
        "type": "variable",
        "name": "p-input-l",
        "value": "0.75rem",
        "scope": "default",
        "line": {
          "start": 276,
          "end": 276
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 277,
        "end": 277
      },
      "context": {
        "type": "variable",
        "name": "padding-input",
        "value": "$p-input-t $p-input-r $p-input-b $p-input-l",
        "scope": "default",
        "line": {
          "start": 278,
          "end": 278
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 280,
        "end": 280
      },
      "context": {
        "type": "variable",
        "name": "alley-sizes",
        "value": "map_merge((\n    noalley: 0,\n    tightest: 25,\n    tighter: 50,\n    tight: 75,\n    comfy: 100,\n    loose: 125,\n    looser: 150,\n    loosest: 175,\n), $alley-sizes)",
        "scope": "private",
        "line": {
          "start": 281,
          "end": 290
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
            "line": {
              "start": 266,
              "end": 283
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
            "line": {
              "start": 266,
              "end": 283
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alleys",
            "code": "$multiplier:map_get($alley-sizes, comfy);\n$alley:$alley / 2;\n\n@if index(map_keys($alley-sizes), $alley-multiplier) {\n    $multiplier:map_get($alley-sizes, $alley-multiplier);\n} @else if is-nonneg-unitless-number($alley-multiplier) {\n    $multiplier:$alley-multiplier;\n}\n\n@if $type == row {\n    margin-right:-$alley * ($multiplier / 100);\n    margin-left:-$alley * ($multiplier / 100);\n} @else if $type == col {\n    padding-right:$alley * ($multiplier / 100);\n    padding-left:$alley * ($multiplier / 100);\n}\n",
            "line": {
              "start": 266,
              "end": 283
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
            "line": {
              "start": 308,
              "end": 322
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 297,
        "end": 297
      },
      "context": {
        "type": "variable",
        "name": "ease-in-out-expo",
        "value": "cubic-bezier(1, 0, 0, 1)",
        "scope": "default",
        "line": {
          "start": 298,
          "end": 298
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 299,
        "end": 299
      },
      "context": {
        "type": "variable",
        "name": "ease-in-out-quart",
        "value": "cubic-bezier(0.77, 0, 0.175, 1)",
        "scope": "default",
        "line": {
          "start": 300,
          "end": 300
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 301,
        "end": 301
      },
      "context": {
        "type": "variable",
        "name": "easing",
        "value": "$ease-in-out-expo",
        "scope": "default",
        "line": {
          "start": 302,
          "end": 302
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 309,
        "end": 309
      },
      "context": {
        "type": "variable",
        "name": "breakpoint-s",
        "value": "480px",
        "scope": "default",
        "line": {
          "start": 310,
          "end": 310
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "min-s",
            "code": "@media (min-width:$breakpoint-s) {\n    @content;\n}\n",
            "line": {
              "start": 64,
              "end": 68
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 311,
        "end": 311
      },
      "context": {
        "type": "variable",
        "name": "breakpoint-m",
        "value": "768px",
        "scope": "default",
        "line": {
          "start": 312,
          "end": 312
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "min-m",
            "code": "@media (min-width:$breakpoint-m) {\n    @content;\n}\n",
            "line": {
              "start": 71,
              "end": 75
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 313,
        "end": 313
      },
      "context": {
        "type": "variable",
        "name": "breakpoint-l",
        "value": "960px",
        "scope": "default",
        "line": {
          "start": 314,
          "end": 314
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "min-l",
            "code": "@media (min-width:$breakpoint-l) {\n    @content;\n}\n",
            "line": {
              "start": 78,
              "end": 82
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 315,
        "end": 315
      },
      "context": {
        "type": "variable",
        "name": "breakpoint-xl",
        "value": "1200px",
        "scope": "default",
        "line": {
          "start": 316,
          "end": 316
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "min-xl",
            "code": "@media (min-width:$breakpoint-xl) {\n    @content;\n}\n",
            "line": {
              "start": 85,
              "end": 89
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 318,
        "end": 318
      },
      "context": {
        "type": "variable",
        "name": "breakpoints",
        "value": "map_merge((\n    s:$breakpoint-s,\n    m:$breakpoint-m,\n    l:$breakpoint-l,\n    xl:$breakpoint-xl,\n), $breakpoints)",
        "scope": "private",
        "line": {
          "start": 319,
          "end": 324
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "hide",
            "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
            "line": {
              "start": 220,
              "end": 230
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "hide",
            "code": "@if index(map_keys($breakpoints), $breakpoint) {\n    @include min(map_get($breakpoints, $breakpoint)) {\n        display:none;\n    }\n} @else if is-nonneg-unit-number($breakpoint) {\n    @include min($breakpoint) {\n        display:none;\n    }\n}\n",
            "line": {
              "start": 220,
              "end": 230
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
            "line": {
              "start": 308,
              "end": 322
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "row-alley",
            "code": "@if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            @include row-alley-styles($alley-multiplier);\n        }\n    } @else {\n        @include row-alley-styles($alley-multiplier);\n    }\n}\n",
            "line": {
              "start": 308,
              "end": 322
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 325,
              "end": 351
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 325,
              "end": 351
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 325,
              "end": 351
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 325,
              "end": 351
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 326,
        "end": 326
      },
      "context": {
        "type": "variable",
        "name": "columns",
        "value": "(map_merge((\n    1:percentage(1/12),\n    2:percentage(2/12),\n    3:percentage(3/12),\n    4:percentage(4/12),\n    5:percentage(5/12),\n    6:percentage(6/12),\n    7:percentage(7/12),\n    8:percentage(8/12),\n    9:percentage(9/12),\n    10:percentage(10/12),\n    11:percentage(11/12),\n    12:percentage(12/12),\n    p5:5%,\n    p10:10%,\n    p15:15%,\n    p20:20%,\n    p25:25%,\n    p30:30%,\n    p35:35%,\n    p40:40%,\n    p45:45%,\n    p50:50%,\n    p55:55%,\n    p60:60%,\n    p65:65%,\n    p70:70%,\n    p75:75%,\n    p80:80%,\n    p85:85%,\n    p90:90%,\n    p95:95%,\n    p100:100%,\n), $columns))",
        "scope": "private",
        "line": {
          "start": 327,
          "end": 360
        }
      },
      "access": "public",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 325,
              "end": 351
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 325,
              "end": 351
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 325,
              "end": 351
            }
          }
        },
        {
          "description": "",
          "context": {
            "type": "mixin",
            "name": "col-width",
            "code": "@if index(map_keys($columns), $column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:map_get($columns, $column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:map_get($columns, $column-width);\n        }\n    } @else {\n        width:map_get($columns, $column-width);\n    }\n} @else if is-nonneg-unitless-number($column-width) {\n    @if index(map_keys($breakpoints), $breakpoint) {\n        @include min(map_get($breakpoints, $breakpoint)) {\n            width:percentage($column-width);\n        }\n    } @else if is-nonneg-unit-number($breakpoint) {\n        @include min($breakpoint) {\n            width:percentage($column-width);\n        }\n    } @else {\n        width:percentage($column-width);\n    }\n}\n",
            "line": {
              "start": 325,
              "end": 351
            }
          }
        }
      ]
    },
    {
      "description": "",
      "commentRange": {
        "start": 367,
        "end": 367
      },
      "context": {
        "type": "variable",
        "name": "lengths-absolute",
        "value": "(cm, mm, in, px, pt, pc)",
        "scope": "private",
        "line": {
          "start": 368,
          "end": 368
        }
      },
      "access": "private",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 369,
        "end": 369
      },
      "context": {
        "type": "variable",
        "name": "lengths-relative",
        "value": "(em, ex, ch, rem, vw, vh, vmin, vmax, '%')",
        "scope": "private",
        "line": {
          "start": 370,
          "end": 370
        }
      },
      "access": "private",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      }
    },
    {
      "description": "",
      "commentRange": {
        "start": 371,
        "end": 371
      },
      "context": {
        "type": "variable",
        "name": "lengths",
        "value": "join($lengths-absolute, $lengths-relative)",
        "scope": "private",
        "line": {
          "start": 372,
          "end": 372
        }
      },
      "access": "private",
      "group": [
        "undefined"
      ],
      "file": {
        "path": "_vars.scss",
        "name": "_vars.scss"
      },
      "usedBy": [
        {
          "description": "Checks if <code>$value</code> is a number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-unit-number",
            "code": "@if is-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 66,
              "end": 76
            }
          }
        },
        {
          "description": "Checks if <code>$value</code> is a nonnegative number with a unit.\n",
          "context": {
            "type": "function",
            "name": "is-nonneg-unit-number",
            "code": "@if is-nonneg-number($value) and index($lengths, unit($value)) {\n    @return true;\n}\n\n@if $warn == true {\n    @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';\n}\n\n@return false;\n",
            "line": {
              "start": 111,
              "end": 121
            }
          }
        }
      ]
    }
  ]
}