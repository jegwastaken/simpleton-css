/// Joins `$list` items into a `$glue` separated string and uses
/// an optional `$closer` before the final item.
/// @param {list} $list
/// @param {string} $glue ['']
/// @param {string} $closer [null]
/// @param {bool} $quote-strings [false]
@function list-to-string($list, $glue:'', $closer:null, $quote-strings:true) {
    $output:null;
    $last-item:null;
    $last-item-quoted:false;

    @if type-of($list) != list {
        @error '`#{$list}` is not a valid list.';
    }

    @for $i from 1 through length($list) {
        $item:nth($list, $i);

        @if type-of($item) == list {
            @if $i == length($list) {
                $last-item:nth($item, -1);
                $is-nested-list:type-of($last-item) == list;

                @while $is-nested-list {
                    $last-item:nth($last-item, -1);

                    @if type-of($last-item) != list {
                        $is-nested-list:false;
                        $last-item-quoted:type-of($last-item) == string and $quote-strings;
                    }
                }

                $output:#{$output}#{list-to-string($item, $glue, null, $quote-strings)};
            } @else {
                $output:#{$output}#{list-to-string($item, $glue, null, $quote-strings)}#{$glue};
            }
        } @else {
            $item:if(type-of($item) == string and $quote-strings, '"#{$item}"', $item);

            @if $i == length($list) {
                $last-item:$item;
                $last-item-quoted:type-of($last-item) == string and $quote-strings;

                $output:#{$output}#{$item}
            } @else {
                $output:#{$output}#{$item}#{$glue};
            }
        }
    }

    @if $closer != null {
        $offset:if($last-item-quoted, 2, 0);
        $find:#{$glue}#{$last-item};
        $slice-1:str-slice($output, 1, -(str-length(#{$find}) + 1 + $offset));
        $slice-2:str-slice($output, -(str-length(#{$last-item}) + $offset));
        $output:#{$slice-1}#{$closer}#{$slice-2};
    }

    @return $output;
}

/***
 * Utilities
 *
 */

/// Formats `$values` into a comma separated string.
/// @param {list} $values
/// @access private
@function format-valid-values($values) {
    @return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';
}

/// Returns `$value` and its type.
/// @param {any} $value
/// @access private
@function show-param-value($value) {
    $value:if(type-of($value) == string, '"#{$value}"', $value);

    @return 'Received: <#{type-of($value)}: #{$value}>.';
}

/***
 * Conditionals
 *
 */

/// Checks if `$value` is a number.
/// @param {any} $value
@function is-number($value) {
    @return type-of($value) == number;
}

/// Checks if `$value` is a list.
/// @param {any} $value
@function is-list($value) {
    @return type-of($value) == list;
}

/// Checks if `$value` is a map.
/// @param {any} $value
@function is-map($value) {
    @return type-of($value) == map;
}

/// Checks if `$value` is a string.
/// @param {any} $value
@function is-string($value) {
    @return type-of($value) == string;
}

/// Checks if `$value` is a boolean.
/// @param {any} $value
@function is-bool($value) {
    @return type-of($value) == bool;
}

/// Checks if `$value` is a color.
/// @param {any} $value
@function is-color($value) {
    @return type-of($value) == color;
}

/// Checks if `$value` is a number with a unit.
/// @param {any} $value
/// @warn {bool} $warn [false]
@function is-unit-number($value, $warn: false) {
    @if is-number($value) and index($lengths, unit($value)) {
        @return true;
    }

    @if $warn == true {
        @warn '`$value` must be a <length>. #{show-param-value($value)}';
    }

    @return false;
}

/// Checks if `$value` is a unitless number.
/// @param {any} $value
/// @warn {bool} $warn [false]
@function is-unitless-number($value, $warn: false) {
    @if is-number($value) and unitless($value) {
        @return true;
    }

    @if $warn == true {
        @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';
    }

    @return false;
}

/// Checks if `$value` is an absolute number.
/// @param {any} $value
/// @warn {bool} $warn [false]
@function is-absolute-number($value, $warn: false) {
    @if is-number($value) and $value > -1 {
        @return true;
    }

    @if $warn == true {
        @warn '`$value` must be an absolute <number>. #{show-param-value($value)}';
    }

    @return false;
}

/// Checks if `$value` is an absolute number with a unit.
/// @param {any} $value
/// @warn {bool} $warn [false]
@function is-absolute-unit-number($value, $warn: false) {
    @if is-absolute-number($value) and index($lengths, unit($value)) {
        @return true;
    }

    @if $warn == true {
        @warn '`$value` must be an absolute <length>. #{show-param-value($value)}';
    }

    @return false;
}

/// Checks if `$value` is an absolute and unitless number.
/// @param {any} $value
/// @warn {bool} $warn [false]
@function is-absolute-unitless-number($value, $warn: false) {
    @if is-absolute-number($value) and unitless($value) {
        @return true;
    }

    @if $warn == true {
        @warn '`$value` must be an absolute, unitless <number>. #{show-param-value($number)}';
    }

    @return false;
}

/// Checks if `$needle` is found in `$haystack`.
/// @param {string|number} $needle
/// @param {list} $haystack
/// @warn {bool} $warn [false]
@function is-in-list($needle, $haystack, $warn: false) {
    @if index($haystack, $needle) {
        @return true;
    }

    @if $warn == true {
        @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';
    }

    @return false;
}

/// Returns a `$dark` or `$light` color that contrasts with`$bg-color`.
/// @param {color} $bg-color
/// @param {number} $threshold [60]
/// @param {color} $dark [$color-dark]
/// @param {color} $light [$color-light]
@function auto-text-color($bg-color, $threshold: 60, $dark:$color-dark, $light:$color-light) {
    @if type-of($bg-color) != color {
        @error '`#{$bg-color}` is not a valid color.';
    }

    @if not is-absolute-number($threshold) {
        @error '`#{$threshold}` is not an absolute number.';
    }

    @if lightness($bg-color) > $threshold {
        @return $dark;
    } @else {
        @return $light;
    }
}

/***
 * Numbers
 *
 */

/// Rounds, ceils or floors `$number` to given decimal `$places`.
/// @param {number} $number
/// @param {number} $places
/// @param {string (round, ceil, floor)} $mode [round]
@function decimal-round($number, $places:3, $mode:round) {
    $n:1;

    @if not is-number($number) {
        @return $number;
    }

    @if not is-number($places) {
        @return $number;
    }

    @if $places > 0 {
        @for $i from 1 through $places {
            $n:$n * 10;
        }
    }

    @if $mode == round {
        @return round($number * $n) / $n;
    } @else if $mode == ceil {
        @return ceil($number * $n) / $n;
    } @else if $mode == floor {
        @return floor($number * $n) / $n;
    } @else {
        @return $number;
    }
}

/// Ceils `$number` to given decimal `$places`.
/// @param {number} $number
/// @param {number} $places
@function decimal-ceil($number, $places:3) {
    @return decimal-round($number, $places, ceil);
}

/// Floors `$number` to given decimal `$places`.
/// @param {number} $number
/// @param {number} $places
@function decimal-floor($number, $places:3) {
    @return decimal-round($number, $places, floor);
}

/// Removes the unit from `$number`.
/// @param {number} $number
@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }

    @return $number;
}

/// Converts `$size-in-rem` to pixels based on `$font-size-base`.
/// @param {number} $size-in-rem
/// @param {number} $font-size-base [$font-size-base]
@function rem-to-pixels($size-in-rem, $font-size-base: $font-size-base) {
    @return strip-unit($size-in-rem) * $font-size-base;
}
