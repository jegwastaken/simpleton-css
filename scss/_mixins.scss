/// Utility to clear floats
@mixin clearfix() {
    &:before,
    &:after {
        display:table;
        clear:both;
        width:100%;
        content:'';
    }
}

/// Converts `$aspect-width` and `$aspect-height` to the appropriate bottom padding.
/// @param {number} $aspect-width [16]
/// @param {number} $aspect-height [9]
/// @access private
@mixin aspect-ratio-to-padding($aspect-width:16, $aspect-height:9) {
    padding-bottom:percentage($aspect-height / $aspect-width);
}

/// Adds styles for a responsive video container.
/// @param {number} $aspect-width [16]
/// @param {number} $aspect-height [9]
@mixin video-container($aspect-width:16, $aspect-height:9) {
    @include aspect-ratio-to-padding($aspect-width, $aspect-height);

    position:relative;
    display:block;
    height:0;

    iframe,
    object,
    embed {
        position:absolute;
        top:0;
        left:0;
        width:100%;
        height:100%;
    }
}

/// Includes `@content` on screens up to `$max-width` wide.
/// @param {number} $max-width
@mixin max($max-width) {
    @media (max-width:$max-width) {
        @content;
    }
}

///
@mixin min($min-width) {
    @media (min-width:$min-width) {
        @content;
    }
}

///
@mixin min-max($min-width, $max-width) {
    @media (min-width:$min-width) and (max-width:$max-width) {
        @content;
    }
}

///
@mixin min-s() {
    @media (min-width:$breakpoint-s) {
        @content;
    }
}

///
@mixin min-m() {
    @media (min-width:$breakpoint-m) {
        @content;
    }
}

///
@mixin min-l() {
    @media (min-width:$breakpoint-l) {
        @content;
    }
}

///
@mixin min-xl() {
    @media (min-width:$breakpoint-xl) {
        @content;
    }
}

/// Includes `@content` for ie9 and above.
@mixin ie9plus() {
    // @formatter:off
    @media (min-width:0\0) and (min-resolution:+72dpi) {
        @content;
    }
    // @formatter:on
}

/// Includes `@content` for ie10 and above.
@mixin ie10plus() {
    @media (-ms-high-contrast:none), (-ms-high-contrast:active) {
        @content;
    }
}

/// Removes margins if element is first and/or last child (depending on scope).
/// @param {string} $scope [all]
@mixin control-margins($scope:all) {
    $scope-y:$scope == vertical or $scope == all;
    $scope-x:$scope == horizontal or $scope == all;

    @if $scope-y or $scope == top {
        &:first-child:not(.f-margins) {
            margin-top:0 !important;
        }
    }

    @if $scope-x or $scope == right {
        &:last-child:not(.f-margins) {
            margin-right:0 !important;
        }
    }

    @if $scope-y or $scope == bottom {
        &:last-child:not(.f-margins) {
            margin-bottom:0 !important;
        }
    }

    @if $scope-x or $scope == left {
        &:first-child:not(.f-margins) {
            margin-left:0 !important;
        }
    }
}

/// Removes bottom margins from last children.
@mixin controlled() {
    * {
        @include control-margins(bottom);
    }
}

/// Sets default vertical margins for selected elements
@mixin vertical-margins($multiplier:100) {
    $multiplier:$multiplier / 100;

    hr {
        margin-top:$margin * $multiplier;
        margin-bottom:$margin * $multiplier;
    }

    caption {
        margin-bottom:($margin * 0.25) * $multiplier;
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
        @include control-margins(top);

        margin-top:$margin-top-h * $multiplier;
        margin-bottom:$margin-bottom-h * $multiplier;
    }

    address,
    blockquote,
    canvas,
    dl,
    fieldset,
    figure,
    form,
    hr,
    noscript,
    ol,
    p,
    pre,
    table,
    ul,
    video {
        margin-bottom:$margin * $multiplier;
    }
}

///
@mixin h($type:1, $margins-multiplier:100) {
    font-weight:$font-weight-heading;
    font-size:map_get($font-sizes, h#{$type});
    font-family:var(--font-stack-heading);
    line-height:map_get($line-heights, h#{$type});

    @if $margins-multiplier {
        $margins-multiplier:$margins-multiplier / 100;

        @include control-margins(top);

        margin-top:$margin-top-h * $margins-multiplier;
        margin-bottom:$margin-bottom-h * $margins-multiplier;
    }
}

///
@mixin ellipsis() {
    overflow:hidden;
    text-overflow:ellipsis;
    white-space:nowrap;
}

/// Removes border radius
@mixin sq() {
    border-radius:0;
}

///
@mixin hide($breakpoint:s) {
    @if index(map_keys($breakpoints), $breakpoint) {
        @include min(map_get($breakpoints, $breakpoint)) {
            display:none;
        }
    } @else if is-nonneg-unit-number($breakpoint) {
        @include min($breakpoint) {
            display:none;
        }
    }
}

///
@mixin mgb($multiplier:100, $important:false) {
    @if $important == true {
        margin-bottom:$margin * ($multiplier / 100) !important;
    } @else {
        margin-bottom:$margin * ($multiplier / 100);
    }
}

///
@mixin mgbch($multiplier:100, $important:false) {
    > * {
        @include mgb($multiplier, $important);
    }
}

///
@mixin mgb-row($multiplier:100, $important:false) {
    &:not(:last-child):after,
    &.f-margins:last-child:after {
        @include mgb($multiplier, $important);
    }
}

///
@mixin mgbch-row($multiplier:100, $important:false) {
    @include mgb(-$multiplier, $important);

    > * {
        @include mgb($multiplier, $important);
    }
}

///
@mixin row-alleys($type:row, $alley-multiplier:false) {
    $multiplier:map_get($alley-sizes, comfy);
    $alley:$alley / 2;

    @if index(map_keys($alley-sizes), $alley-multiplier) {
        $multiplier:map_get($alley-sizes, $alley-multiplier);
    } @else if is-nonneg-unitless-number($alley-multiplier) {
        $multiplier:$alley-multiplier;
    }

    @if $type == row {
        margin-right:-$alley * ($multiplier / 100);
        margin-left:-$alley * ($multiplier / 100);
    } @else if $type == col {
        padding-right:$alley * ($multiplier / 100);
        padding-left:$alley * ($multiplier / 100);
    }
}

///
@mixin row($alley-multiplier:false) {
    @include row-alleys(row, $alley-multiplier);
    @include clearfix();

    display:flex;
    flex-wrap:wrap;

    > * {
        @include row-alleys(col, $alley-multiplier);
    }
}

/// @access private
@mixin row-alley-styles($alley-multiplier) {
    @include row-alleys(row, $alley-multiplier);

    > * {
        @include row-alleys(col, $alley-multiplier);
    }
}

///
@mixin row-alley($alley-multiplier, $breakpoint:false) {
    @if index(map_keys($alley-sizes), $alley-multiplier) or is-nonneg-unitless-number($alley-multiplier) {
        @if index(map_keys($breakpoints), $breakpoint) {
            @include min(map_get($breakpoints, $breakpoint)) {
                @include row-alley-styles($alley-multiplier);
            }
        } @else if is-nonneg-unit-number($breakpoint) {
            @include min($breakpoint) {
                @include row-alley-styles($alley-multiplier);
            }
        } @else {
            @include row-alley-styles($alley-multiplier);
        }
    }
}

///
@mixin col-width($column-width, $breakpoint:false) {
    @if index(map_keys($columns), $column-width) {
        @if index(map_keys($breakpoints), $breakpoint) {
            @include min(map_get($breakpoints, $breakpoint)) {
                width:map_get($columns, $column-width);
            }
        } @else if is-nonneg-unit-number($breakpoint) {
            @include min($breakpoint) {
                width:map_get($columns, $column-width);
            }
        } @else {
            width:map_get($columns, $column-width);
        }
    } @else if is-nonneg-unitless-number($column-width) {
        @if index(map_keys($breakpoints), $breakpoint) {
            @include min(map_get($breakpoints, $breakpoint)) {
                width:percentage($column-width);
            }
        } @else if is-nonneg-unit-number($breakpoint) {
            @include min($breakpoint) {
                width:percentage($column-width);
            }
        } @else {
            width:percentage($column-width);
        }
    }
}
