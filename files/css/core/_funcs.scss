@use 'sass:color';
@use 'sass:list';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';
//
// Strings
//
//

/// Joins `$list` items into a `$glue` separated string and uses an optional `$closer` before the final item.
/// @param {<list>} $list
/// @param {<any>} $glue ['']
/// @param {<any>} $closer [null]
/// @param {<bool>} $quote-strings [false]
@function list-to-string(
    $list,
    $glue: '',
    $closer: null,
    $quote-strings: true
) {
    $output: null;
    $last-item: null;
    $last-item-quoted: false;

    @if meta.type-of($list) != list {
        @error '`#{$list}` is not a valid list.';
    }

    @for $i from 1 through list.length($list) {
        $item: list.nth($list, $i);

        @if meta.type-of($item) == list {
            @if $i == list.length($list) {
                $last-item: list.nth($item, -1);
                $is-nested-list: meta.type-of($last-item) == list;

                @while $is-nested-list {
                    $last-item: list.nth($last-item, -1);

                    @if meta.type-of($last-item) != list {
                        $is-nested-list: false;
                        $last-item-quoted: meta.type-of($last-item) ==
                            string and
                            $quote-strings;
                    }
                }

                $output: #{$output}#{list-to-string(
                        $item,
                        $glue,
                        null,
                        $quote-strings
                    )};
            } @else {
                $output: #{$output}#{list-to-string(
                        $item,
                        $glue,
                        null,
                        $quote-strings
                    )}#{$glue};
            }
        } @else {
            $item: if(
                meta.type-of($item) == string and $quote-strings,
                '"#{$item}"',
                $item
            );

            @if $i == list.length($list) {
                $last-item: $item;
                $last-item-quoted: meta.type-of($last-item) ==
                    string and
                    $quote-strings;

                $output: #{$output}#{$item};
            } @else {
                $output: #{$output}#{$item}#{$glue};
            }
        }
    }

    @if $closer != null {
        $offset: if($last-item-quoted, 2, 0);
        $find: #{$glue}#{$last-item};
        $slice-1: string.slice(
            $output,
            1,
            -(string.length(#{$find}) + 1 + $offset)
        );
        $slice-2: string.slice(
            $output,
            -(string.length(#{$last-item}) + $offset)
        );
        $output: #{$slice-1}#{$closer}#{$slice-2};
    }

    @return $output;
}

//
// Colors
//
//

/// Returns a `$dark` or `$light` color depending on the lightness `$threshold` of the `$bg-color`.
/// @param {<color>} $bg-color
/// @param {<number>} $threshold [60]
/// @param {<color>} $dark [black]
/// @param {<color>} $light [white]
@function auto-color-contrast(
    $bg-color,
    $threshold: 84,
    $dark: black,
    $light: white
) {
    @if meta.type-of($bg-color) != color {
        @error '`#{$bg-color}` is not a valid color.';
    }

    @if not is-nonneg-number($threshold) {
        @error '`#{$threshold}` is not a nonnegative number.';
    }

    @if color.lightness($bg-color) > $threshold {
        @return $dark;
    } @else {
        @return $light;
    }
}

//
// Numbers
//
//

/// Ceils `$number` to given decimal `$places`.
/// @param {<number>} $number
/// @param {<number>} $places
@function decimal-ceil($number, $places: 3) {
    @return decimal-round($number, $places, ceil);
}

/// Floors `$number` to given decimal `$places`.
/// @param {<number>} $number
/// @param {<number>} $places
@function decimal-floor($number, $places: 3) {
    @return decimal-round($number, $places, floor);
}

/// Rounds, ceils or floors `$number` to given decimal `$places`.
/// @param {<number>} $number
/// @param {<number>} $places
/// @param {<any> (round, ceil, floor)} $mode [round]
@function decimal-round($number, $places: 3, $mode: round) {
    $n: 1;

    @if not is-number($number) {
        @return $number;
    }

    @if not is-number($places) {
        @return $number;
    }

    @if $places > 0 and $places < 20 {
        @for $i from 1 through $places {
            $n: $n * 10;
        }
    }

    @if $mode == round {
        @return math.round($number * $n) / $n;
    } @else if $mode == ceil {
        @return math.ceil($number * $n) / $n;
    } @else if $mode == floor {
        @return math.floor($number * $n) / $n;
    } @else {
        @return $number;
    }
}

/// Removes the unit from `$number`.
/// @param {<number>} $number
@function strip-unit($number) {
    @if meta.type-of($number) == 'number' and not math.is-unitless($number) {
        @return $number / ($number * 0 + 1);
    }

    @return $number;
}

/// Converts `$size-in-rem` to pixels based on `$font-size-base`.
/// @param {<number>} $size-in-rem
/// @param {<number>} $font-size-base
@function rem-to-pixels($size-in-rem, $font-size-base) {
    @return strip-unit($size-in-rem) * $font-size-base;
}

//
// Conditionals
//
//

/// Checks if `$value` is a boolean.
/// @param {<any>} $value
@function is-bool($value) {
    @return meta.type-of($value) == bool;
}

/// Checks if `$value` is a color.
/// @param {<any>} $value
@function is-color($value) {
    @return meta.type-of($value) == color;
}

/// Checks if `$value` is a string.
/// @param {<any>} $value
@function is-string($value) {
    @return meta.type-of($value) == string;
}

/// Checks if `$value` is a number.
/// @param {<any>} $value
@function is-number($value) {
    @return meta.type-of($value) == number;
}

/// Checks if `$value` is a number with a unit.
/// @param {<any>} $value
/// @param {<bool>} $warn [false]
@function is-unit-number($value, $warn: false) {
    @if is-number($value) and list.index($lengths, math.unit($value)) {
        @return true;
    }

    @if $warn == true {
        @warn '`$value` must be a <length>. #{show-param-value($value)}';
    }

    @return false;
}

/// Checks if `$value` is a unitless number.
/// @param {<any>} $value
/// @param {<bool>} $warn [false]
@function is-unitless-number($value, $warn: false) {
    @if is-number($value) and math.is-unitless($value) {
        @return true;
    }

    @if $warn == true {
        @warn '`$value` must be a unitless <number>. #{show-param-value($value)}';
    }

    @return false;
}

/// Checks if `$value` is a nonnegative number.
/// @param {<any>} $value
/// @param {<bool>} $warn [false]
@function is-nonneg-number($value, $warn: false) {
    @if is-number($value) and $value > -1 {
        @return true;
    }

    @if $warn == true {
        @warn '`$value` must be a nonnegative <number>. #{show-param-value($value)}';
    }

    @return false;
}

/// Checks if `$value` is a nonnegative number with a unit.
/// @param {<any>} $value
/// @param {<bool>} $warn [false]
@function is-nonneg-unit-number($value, $warn: false) {
    @if is-nonneg-number($value) and list.index($lengths, math.unit($value)) {
        @return true;
    }

    @if $warn == true {
        @warn '`$value` must be a nonnegative <length>. #{show-param-value($value)}';
    }

    @return false;
}

/// Checks if `$value` is a nonnegative, unitless number.
/// @param {<any>} $value
/// @param {<bool>} $warn [false]
@function is-nonneg-unitless-number($value, $warn: false) {
    @if is-nonneg-number($value) and math.is-unitless($value) {
        @return true;
    }

    @if $warn == true {
        @warn '`$value` must be a nonnegative, unitless <number>. #{show-param-value($number)}';
    }

    @return false;
}

/// Checks if `$value` is a map.
/// @param {<any>} $value
@function is-map($value) {
    @return meta.type-of($value) == map;
}

/// Checks if `$value` is a list.
/// @param {<any>} $value
@function is-list($value) {
    @return meta.type-of($value) == list;
}

/// Checks if `$needle` is found in `$haystack`.
/// @param {<any>|number} $needle
/// @param {<list>} $haystack
/// @param {<bool>} $warn [false]
@function is-in-list($needle, $haystack, $warn: false) {
    @if list.index($haystack, $needle) {
        @return true;
    }

    @if $warn == true {
        @warn 'Invalid `$needle`. #{show-param-value($needle)} #{format-valid-values($haystack)}';
    }

    @return false;
}

//
// Utilities
//
//

/// Returns a formatted string containing `$value` and its type.
/// @param {<any>} $value
/// @access private
@function show-param-value($value) {
    $value: if(meta.type-of($value) == string, '"#{$value}"', $value);

    @return 'Received: <#{meta.type-of($value)}: #{$value}>.';
}

/// Returns a formatted string of valid `$values`.
/// @param {<list>} $values
/// @access private
@function format-valid-values($values) {
    @return 'Valid values are #{list-to-string($values, ', ', ' and ')}.';
}
