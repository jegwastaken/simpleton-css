@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'funcs' as *;

/// Converts `$aspect-width` and `$aspect-height` to the appropriate bottom padding.
/// @param {<number>} $aspect-width [16]
/// @param {<number>} $aspect-height [9]
/// @access private
@mixin aspect-ratio-to-padding($aspect-width: 16, $aspect-height: 9) {
    padding-bottom: math.percentage(calc($aspect-height / $aspect-width));
}

/// Adds styles for a responsive video container.
/// @param {<number>} $aspect-width [16]
/// @param {<number>} $aspect-height [9]
@mixin video-container($aspect-width: 16, $aspect-height: 9) {
    @include aspect-ratio-to-padding($aspect-width, $aspect-height);

    position: relative;
    display: block;
    height: 0;

    iframe,
    object,
    embed {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
}

/// Includes `@content` on screens at least `$min-width` wide.
/// @param {<number>} $min-width
@mixin min($min-width) {
    @media (min-width: $min-width) {
        @content;
    }
}

/// Includes `@content` on screens up to `$max-width` wide.
/// @param {<number>} $max-width
@mixin max($max-width) {
    @media (max-width: $max-width) {
        @content;
    }
}

/// Includes `@content` on screens `$min-width` to `$max-width` wide.
/// @param {<number>} $min-width
/// @param {<number>} $max-width
@mixin min-max($min-width, $max-width) {
    @media (min-width: $min-width) and (max-width: $max-width) {
        @content;
    }
}

/// Includes `@content` for ie10 and above.
@mixin ie10plus() {
    @media (-ms-high-contrast: none), (-ms-high-contrast: active) {
        @content;
    }
}

/// Removes margins if element is the first and/or last child (depending on `$scope`).
/// @param {<string>} $scope [all]
@mixin control-margins($scope: all) {
    $scope-y: $scope == vertical or $scope == all;
    $scope-x: $scope == horizontal or $scope == all;

    @if $scope-y or $scope == top {
        &:first-child:not(.f-margins) {
            margin-top: 0;
        }
    }

    @if $scope-x or $scope == right {
        &:last-child:not(.f-margins) {
            margin-right: 0;
        }
    }

    @if $scope-y or $scope == bottom {
        &:last-child:not(.f-margins) {
            margin-bottom: 0;
        }
    }

    @if $scope-x or $scope == left {
        &:first-child:not(.f-margins) {
            margin-left: 0;
        }
    }
}

/// Removes bottom margins from last children.
@mixin controlled($scope: bottom) {
    @warn "The `controlled` mixin is deprecated. Please use `control-child-margins` instead.";
    * {
        @include control-margins(bottom);
    }
}

@mixin control-child-margins($scope: bottom) {
    * {
        @include control-margins(bottom);
    }
}

@mixin content-styles($vertical-space-multiplier: 1) {
    @if not is-nonneg-unitless-number($vertical-space-multiplier) {
        @error "The `content-styles` mixin only accepts a positive unitless number for the `$vertical-space-multiplier` argument. You passed `#{$vertical-space-multiplier}`.";
    }

    h1 {
        font-size: var(--font-size-h1);
        line-height: var(--line-height-h1);
    }

    h2 {
        font-size: var(--font-size-h2);
        line-height: var(--line-height-h2);
    }

    h3 {
        font-size: var(--font-size-h3);
        line-height: var(--line-height-h3);
    }

    h4 {
        font-size: var(--font-size-h4);
        line-height: var(--line-height-h4);
    }

    h5 {
        font-size: var(--font-size-h5);
        line-height: var(--line-height-h5);
    }

    caption {
        padding-top: calc(var(--space) * 0.375);
        font-size: var(--font-size-xsmall);
        line-height: var(--line-height-xsmall);
    }

    figcaption {
        padding-top: calc(var(--space) * 0.5);
        font-size: var(--font-size-xsmall);
        line-height: var(--line-height-xsmall);
    }

    blockquote {
        @include xbig();

        padding-top: calc(var(--space) * 0.25);
        padding-bottom: calc(var(--space) * 0.25);
    }

    @include vertical-margins($vertical-space-multiplier);
}

/// Sets default vertical margins for selected elements
/// @param {<number>|false} $multiplier [false]
@mixin vertical-margins($multiplier: 1) {
    @if not is-nonneg-unitless-number($multiplier) {
        @error "The `vertical-margins` mixin only accepts a positive unitless number for the `$multiplier` argument. You passed `#{$multiplier}`.";
    }

    $m: if($multiplier == 1, false, $multiplier);

    hr {
        margin-top: if(
            $m,
            calc(var(--space-top-h) * #{$m}),
            var(--space-top-h)
        );
        margin-bottom: if(
            $m,
            calc(var(--space-top-h) * #{$m}),
            var(--space-top-h)
        );
    }

    caption {
        margin-bottom: if(
            $m,
            calc(calc(var(--space) * #{$m}) * 0.5),
            calc(var(--space) * 0.5)
        );
    }

    h1 {
        @include control-margins(top);

        margin-top: if(
            $m,
            calc(var(--space-top-h) * #{$m}),
            var(--space-top-h)
        );
        margin-bottom: if($m, calc(var(--space) * #{$m}), var(--space));
    }

    h2,
    h3,
    h4,
    h5,
    h6 {
        @include control-margins(top);

        margin-top: if(
            $m,
            calc(var(--space-top-h) * #{$m}),
            var(--space-top-h)
        );
        margin-bottom: if(
            $m,
            calc(var(--space-bottom-h) * #{$m}),
            var(--space-bottom-h)
        );
    }

    address,
    article,
    blockquote,
    canvas,
    details,
    details[open] summary,
    dl,
    fieldset,
    figure,
    form,
    form > div,
    noscript,
    ol,
    p,
    pre,
    table,
    ul,
    video {
        margin-bottom: if($m, calc(var(--space) * #{$m}), var(--space));
    }
}

/// @param {1|2|3|4|5} $type
/// @param {<number>|false} $margins-multiplier [false]
@mixin h($type: 1, $margins-multiplier: false) {
    font-weight: var(--font-weight-heading);
    font-size: var(--font-size-h#{$type});
    font-family: var(--font-stack-heading);
    line-height: var(--line-height-h#{$type});

    @if is-nonneg-unitless-number($margins-multiplier) {
        $m: $margins-multiplier;

        @include control-margins(top);

        margin-top: if(
            $m,
            calc(var(--space-top-h) * #{$m}),
            var(--space-top-h)
        );
        margin-bottom: if(
            $m,
            calc(var(--space-bottom-h) * #{$m}),
            var(--space-bottom-h)
        );
    }
}

///
@mixin big() {
    font-size: var(--font-size-big);
    line-height: var(--line-height-big);
}

///
@mixin xbig() {
    font-size: var(--font-size-xbig);
    line-height: var(--line-height-xbig);
}

///
@mixin xxbig() {
    font-size: var(--font-size-xxbig);
    line-height: var(--line-height-xxbig);
}

///
@mixin small() {
    font-size: var(--font-size-small);
    line-height: var(--line-height-small);
}

///
@mixin xsmall() {
    font-size: var(--font-size-xsmall);
    line-height: var(--line-height-xsmall);
}

///
@mixin xxsmall() {
    font-size: var(--font-size-xxsmall);
    line-height: var(--line-height-xxsmall);
}

@mixin button-styles() {
    @include ellipsis();

    display: inline-block;
    padding: var(--padding-input);
    min-height: var(--min-input-height);
    border: none;
    border-radius: var(--border-radius);
    background-color: var(--color-contrast);
    color: var(--color-background);
    cursor: pointer;
    transition: box-shadow 0.25s, color 0.25s;
    vertical-align: middle;

    &[disabled] {
        cursor: not-allowed;
        box-shadow: inset 0 0 0 100vh rgba(white, 0.375);
    }

    a {
        display: inline-block;
        color: inherit;

        &:hover {
            color: inherit;
        }
    }
}

@mixin input-styles() {
    padding: var(--padding-input);
    min-height: var(--min-input-height);
    border: var(--border-size) solid var(--color-contrast-lower);
    border-radius: var(--border-radius);
    vertical-align: middle;
}

/// Hides element when viewport is as wide or wider than `$breakpoint`
@mixin hide($breakpoint: s) {
    @if list.index(map.keys($breakpoints), $breakpoint) {
        @include min(map.get($breakpoints, $breakpoint)) {
            display: none;
        }
    } @else if is-nonneg-unit-number($breakpoint) {
        @include min($breakpoint) {
            display: none;
        }
    }
}

/// @param {<number>} $multiplier [1]
/// @param {<bool>} $important [false]
@mixin row-vertical-margins($multiplier: 1, $important: false) {
    @if not is-nonneg-unitless-number($multiplier) {
        @error "The `row-vertical-margins` mixin only accepts a positive unitless number for the `$multiplier` argument. You passed `#{$multiplier}`.";
    }

    $m: if($multiplier == 1, false, $multiplier);

    @if is-nonneg-unitless-number($multiplier) {
        $m: $multiplier;
    }

    $i: if($important == true, $important, false);

    margin-top: calc(var(--space) * -#{$m}) if($i, !important, null);

    > * {
        margin-top: calc(var(--space) * #{$m}) if($i, !important, null);
    }
}

/// @param {row|col} $type [row]
/// @param {<number>|false} $multiplier [false]
@mixin row-alleys($type: row, $multiplier: 1) {
    @if not is-nonneg-unitless-number($multiplier) {
        @error "The `row-alleys` mixin only accepts a positive unitless number for the `$multiplier` argument. You passed `#{$multiplier}`.";
    }

    $m: if($multiplier == 1, false, $multiplier);

    @if is-nonneg-unitless-number($multiplier) {
        $m: $multiplier;
    }

    @if $type == row {
        margin-right: if(
            $m,
            calc(calc(var(--alley) * -#{$m} / 2)),
            calc(calc(var(--alley) * -1 / 2))
        );
        margin-left: if(
            $m,
            calc(calc(var(--alley) * -#{$m} / 2)),
            calc(calc(var(--alley) * -1 / 2))
        );
    } @else if $type == col {
        padding-right: if(
            $m,
            calc(calc(var(--alley) * #{$m} / 2)),
            calc(var(--alley) / 2)
        );
        padding-left: if(
            $m,
            calc(calc(var(--alley) * #{$m} / 2)),
            calc(var(--alley) / 2)
        );
    }
}

///
@mixin row($alley-multiplier: 1, $space-multiplier: 1) {
    @if not is-nonneg-unitless-number($space-multiplier) {
        @error "The `row` mixin only accepts a positive unitless number for the `$space-multiplier` argument. You passed `#{$space-multiplier}`.";
    }

    @if not is-nonneg-unitless-number($alley-multiplier) {
        @error "The `row` mixin only accepts a positive unitless number for the `$alley-multiplier` argument. You passed `#{$alley-multiplier}`.";
    }

    @include row-alleys(row, $alley-multiplier);

    display: flex;
    flex-wrap: wrap;

    > * {
        @include row-alleys(col, $alley-multiplier);
    }

    @include row-vertical-margins($space-multiplier);
}

/// @access private
@mixin row-alley-styles($alley-multiplier) {
    @include row-alleys(row, $alley-multiplier);

    > * {
        @include row-alleys(col, $alley-multiplier);
    }
}

@mixin flex-wrap-gap(
    $alley-multiplier: 1,
    $space-multiplier: 1,
    $colsperrow: 2
) {
    @if not is-nonneg-unitless-number($alley-multiplier) {
        @error "The `flex-wrap-gap` mixin only accepts a positive unitless number for the `$alley-multiplier` argument. You passed `#{$alley-multiplier}`.";
    }

    @if not is-nonneg-unitless-number($space-multiplier) {
        @error "The `flex-wrap-gap` mixin only accepts a positive unitless number for the `$space-multiplier` argument. You passed `#{$space-multiplier}`.";
    }

    $space: if(
        $space-multiplier == 1,
        var(--space),
        calc(var(--space) * $space-multiplier)
    );

    $alley: if(
        $alley-multiplier == 1,
        var(--alley),
        calc(var(--alley) * $alley-multiplier)
    );

    display: flex;
    flex-wrap: wrap;
    gap: #{$space} #{$alley};

    > * {
        width: calc(
            (100% / #{$colsperrow}) -
                (((#{$colsperrow} - 1) / #{$colsperrow}) * #{$alley})
        );
    }
}

/// Utility to clear floats
@mixin clearfix() {
    &:before,
    &:after {
        display: table;
        clear: both;
        width: 100%;
        content: '';
    }
}

/// Unsets border radius
@mixin sq() {
    border-radius: unset;
}

///
@mixin ellipsis() {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

///
@mixin flex-column() {
    display: flex;
    flex-direction: column;
}

///
@mixin screen-reader-only {
    position: absolute;
    overflow: hidden;
    clip: rect(1px, 1px, 1px, 1px);
    margin: -1px;
    padding: 0;
    width: 1px;
    height: 1px;
    border: 0;
    word-wrap: normal;
    clip-path: inset(50%);
}
